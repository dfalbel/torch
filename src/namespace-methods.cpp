// Autogenerated file

#include "torch_types.h"

#include "utils.hpp"

#include "scalar.hpp"

#include "device.hpp"

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__cast_Byte_0f2f7 (Rcpp::XPtr<torch::Tensor> self, bool non_blocking) {
     auto r_out = torch::_cast_Byte(*self, non_blocking);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__cast_Char_0f2f7 (Rcpp::XPtr<torch::Tensor> self, bool non_blocking) {
     auto r_out = torch::_cast_Char(*self, non_blocking);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__cast_Double_0f2f7 (Rcpp::XPtr<torch::Tensor> self, bool non_blocking) {
     auto r_out = torch::_cast_Double(*self, non_blocking);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__cast_Float_0f2f7 (Rcpp::XPtr<torch::Tensor> self, bool non_blocking) {
     auto r_out = torch::_cast_Float(*self, non_blocking);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__cast_Int_0f2f7 (Rcpp::XPtr<torch::Tensor> self, bool non_blocking) {
     auto r_out = torch::_cast_Int(*self, non_blocking);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__cast_Long_0f2f7 (Rcpp::XPtr<torch::Tensor> self, bool non_blocking) {
     auto r_out = torch::_cast_Long(*self, non_blocking);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__cast_Short_0f2f7 (Rcpp::XPtr<torch::Tensor> self, bool non_blocking) {
     auto r_out = torch::_cast_Short(*self, non_blocking);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__cast_Half_0f2f7 (Rcpp::XPtr<torch::Tensor> self, bool non_blocking) {
     auto r_out = torch::_cast_Half(*self, non_blocking);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_align_tensors_595f6 (Rcpp::List tensors) {
     auto r_out = torch::align_tensors(tensor_list_from_r_(tensors));
 Rcpp::List v;

 for (int i = 0; i < r_out.size(); ++i) {
  v.push_back(make_tensor_ptr(r_out[i]));
 }

 return v;
   };

// [[Rcpp::export]]
    Rcpp::List tch__cudnn_ctc_loss_3727a (Rcpp::XPtr<torch::Tensor> log_probs, Rcpp::XPtr<torch::Tensor> targets, std::vector<std::int64_t> input_lengths, std::vector<std::int64_t> target_lengths, int64_t blank, bool deterministic, bool zero_infinity) {
     auto r_out = torch::_cudnn_ctc_loss(*log_probs, *targets, input_lengths, target_lengths, blank, deterministic, zero_infinity);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__cudnn_rnn_flatten_weight_4a9ab (Rcpp::List weight_arr, int64_t weight_stride0, int64_t input_size, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, bool bidirectional) {
     auto r_out = torch::_cudnn_rnn_flatten_weight(tensor_list_from_r_(weight_arr), weight_stride0, input_size, mode, hidden_size, num_layers, batch_first, bidirectional);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch__cudnn_rnn_d41d7 (Rcpp::XPtr<torch::Tensor> input, Rcpp::List weight, int64_t weight_stride0, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight_buf, Rcpp::XPtr<torch::Tensor> hx, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, std::vector<std::int64_t> batch_sizes, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> dropout_state) {
     auto r_out = torch::_cudnn_rnn(*input, tensor_list_from_r_(weight), weight_stride0, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight_buf), *hx, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(cx), mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(dropout_state));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)), make_tensor_ptr(std::get<3>(r_out)), make_tensor_ptr(std::get<4>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__cudnn_rnn_backward_e2ff6 (Rcpp::XPtr<torch::Tensor> input, Rcpp::List weight, int64_t weight_stride0, Rcpp::XPtr<torch::Tensor> weight_buf, Rcpp::XPtr<torch::Tensor> hx, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> cx, Rcpp::XPtr<torch::Tensor> output, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_output, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_hy, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, std::vector<std::int64_t> batch_sizes, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> dropout_state, Rcpp::XPtr<torch::Tensor> reserve, std::vector<bool> output_mask) {
     auto r_out = torch::_cudnn_rnn_backward(*input, tensor_list_from_r_(weight), weight_stride0, *weight_buf, *hx, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(cx), *output, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_output), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_hy), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_cy), mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(dropout_state), *reserve, vector_to_array_bool<4>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)), tensorlist_to_r(std::get<3>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__cudnn_init_dropout_state_580d5 (double dropout, bool train, int64_t dropout_seed, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::_cudnn_init_dropout_state(dropout, train, dropout_seed, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    int64_t tch__debug_has_internal_overlap_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::_debug_has_internal_overlap(*self);
return r_out;
   };

// [[Rcpp::export]]
    Rcpp::List tch__fused_dropout_7c6a3 (Rcpp::XPtr<torch::Tensor> self, double p, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::_fused_dropout(*self, p, *generator);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__masked_scale_43979 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, double scale) {
     auto r_out = torch::_masked_scale(*self, *mask, scale);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch__sobol_engine_draw_0ac71 (Rcpp::XPtr<torch::Tensor> quasi, int64_t n, Rcpp::XPtr<torch::Tensor> sobolstate, int64_t dimension, int64_t num_generated, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::_sobol_engine_draw(*quasi, n, *sobolstate, dimension, num_generated, scalar_type_from_string(dtype));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__sobol_engine_ff__8ba8a (Rcpp::XPtr<torch::Tensor> self, int64_t n, Rcpp::XPtr<torch::Tensor> sobolstate, int64_t dimension, int64_t num_generated) {
     auto r_out = torch::_sobol_engine_ff_(*self, n, *sobolstate, dimension, num_generated);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__sobol_engine_scramble__3715e (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> ltm, int64_t dimension) {
     auto r_out = torch::_sobol_engine_scramble_(*self, *ltm, dimension);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__sobol_engine_initialize_state__0a139 (Rcpp::XPtr<torch::Tensor> self, int64_t dimension) {
     auto r_out = torch::_sobol_engine_initialize_state_(*self, dimension);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__reshape_from_tensor_8d946 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> shape) {
     auto r_out = torch::_reshape_from_tensor(*self, *shape);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__shape_as_tensor_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::_shape_as_tensor(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_dropout_0f6ce (Rcpp::XPtr<torch::Tensor> input, double p, bool train) {
     auto r_out = torch::dropout(*input, p, train);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_dropout__84534 (Rcpp::XPtr<torch::Tensor> self, double p, bool train) {
     auto r_out = torch::dropout_(*self, p, train);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_feature_dropout_0f6ce (Rcpp::XPtr<torch::Tensor> input, double p, bool train) {
     auto r_out = torch::feature_dropout(*input, p, train);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_feature_dropout__84534 (Rcpp::XPtr<torch::Tensor> self, double p, bool train) {
     auto r_out = torch::feature_dropout_(*self, p, train);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_alpha_dropout_0f6ce (Rcpp::XPtr<torch::Tensor> input, double p, bool train) {
     auto r_out = torch::alpha_dropout(*input, p, train);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_alpha_dropout__84534 (Rcpp::XPtr<torch::Tensor> self, double p, bool train) {
     auto r_out = torch::alpha_dropout_(*self, p, train);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_feature_alpha_dropout_0f6ce (Rcpp::XPtr<torch::Tensor> input, double p, bool train) {
     auto r_out = torch::feature_alpha_dropout(*input, p, train);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_feature_alpha_dropout__84534 (Rcpp::XPtr<torch::Tensor> self, double p, bool train) {
     auto r_out = torch::feature_alpha_dropout_(*self, p, train);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_abs_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::abs(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_abs__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::abs_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_abs_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::abs_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_acos_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::acos(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_acos__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::acos_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_acos_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::acos_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_avg_pool1d_fe39b (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, bool ceil_mode, bool count_include_pad) {
     auto r_out = torch::avg_pool1d(*self, kernel_size, stride, padding, ceil_mode, count_include_pad);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_adaptive_avg_pool1d_e0cae (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size) {
     auto r_out = torch::adaptive_avg_pool1d(*self, output_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_adaptive_max_pool1d_e0cae (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size) {
     auto r_out = torch::adaptive_max_pool1d(*self, output_size);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_add_02bec (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, SEXP alpha) {
     auto r_out = torch::add(*self, *other, scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_add_out_8a334 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, SEXP alpha) {
     auto r_out = torch::add_out(*out, *self, *other, scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_add_783c8 (Rcpp::XPtr<torch::Tensor> self, SEXP other, SEXP alpha) {
     auto r_out = torch::add(*self, scalar_from_r_(other), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_addmv_1072d (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat, Rcpp::XPtr<torch::Tensor> vec, SEXP beta, SEXP alpha) {
     auto r_out = torch::addmv(*self, *mat, *vec, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_addmv__4820c (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat, Rcpp::XPtr<torch::Tensor> vec, SEXP beta, SEXP alpha) {
     auto r_out = torch::addmv_(*self, *mat, *vec, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_addmv_out_e5194 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat, Rcpp::XPtr<torch::Tensor> vec, SEXP beta, SEXP alpha) {
     auto r_out = torch::addmv_out(*out, *self, *mat, *vec, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_addr_ab5fb (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec1, Rcpp::XPtr<torch::Tensor> vec2, SEXP beta, SEXP alpha) {
     auto r_out = torch::addr(*self, *vec1, *vec2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_addr_out_7b100 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec1, Rcpp::XPtr<torch::Tensor> vec2, SEXP beta, SEXP alpha) {
     auto r_out = torch::addr_out(*out, *self, *vec1, *vec2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_affine_grid_generator_d960c (Rcpp::XPtr<torch::Tensor> theta, std::vector<std::int64_t> size, bool align_corners) {
     auto r_out = torch::affine_grid_generator(*theta, size, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_affine_grid_generator_backward_468ac (Rcpp::XPtr<torch::Tensor> grad, std::vector<std::int64_t> size, bool align_corners) {
     auto r_out = torch::affine_grid_generator_backward(*grad, size, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_all_a00d6 (Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim) {
     auto r_out = torch::all(*self, dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_all_out_e1560 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim) {
     auto r_out = torch::all_out(*out, *self, dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_all_06a58 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::all(*self, *dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_all_out_3472e (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::all_out(*out, *self, *dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    bool tch_allclose_68991 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, double rtol, double atol, bool equal_nan) {
     auto r_out = torch::allclose(*self, *other, rtol, atol, equal_nan);
return r_out;
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_any_a00d6 (Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim) {
     auto r_out = torch::any(*self, dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_any_out_e1560 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim) {
     auto r_out = torch::any_out(*out, *self, dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_any_06a58 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::any(*self, *dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_any_out_3472e (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::any_out(*out, *self, *dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_arange_786cf (SEXP end, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::arange(scalar_from_r_(end), *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_arange_08b0a (SEXP start, SEXP end, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::arange(scalar_from_r_(start), scalar_from_r_(end), *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_arange_226c7 (SEXP start, SEXP end, SEXP step, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::arange(scalar_from_r_(start), scalar_from_r_(end), scalar_from_r_(step), *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_arange_out_15d84 (Rcpp::XPtr<torch::Tensor> out, SEXP end) {
     auto r_out = torch::arange_out(*out, scalar_from_r_(end));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_arange_out_346d8 (Rcpp::XPtr<torch::Tensor> out, SEXP start, SEXP end, SEXP step) {
     auto r_out = torch::arange_out(*out, scalar_from_r_(start), scalar_from_r_(end), scalar_from_r_(step));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__dim_arange_93c71 (Rcpp::XPtr<torch::Tensor> like, int64_t dim) {
     auto r_out = torch::_dim_arange(*like, dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_argmax_49e69 (Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<int64_t> dim, bool keepdim) {
     auto r_out = torch::argmax(*self, resolve_null_argument(dim), keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_argmin_49e69 (Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<int64_t> dim, bool keepdim) {
     auto r_out = torch::argmin(*self, resolve_null_argument(dim), keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_as_strided_48a5c (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> size, std::vector<std::int64_t> stride, Rcpp::Nullable<int64_t> storage_offset) {
     auto r_out = torch::as_strided(*self, size, stride, resolve_null_argument(storage_offset));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_as_strided__854a1 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> size, std::vector<std::int64_t> stride, Rcpp::Nullable<int64_t> storage_offset) {
     auto r_out = torch::as_strided_(*self, size, stride, resolve_null_argument(storage_offset));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_asin_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::asin(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_asin__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::asin_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_asin_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::asin_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_atan_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::atan(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_atan__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::atan_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_atan_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::atan_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_baddbmm_f084a (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, SEXP beta, SEXP alpha) {
     auto r_out = torch::baddbmm(*self, *batch1, *batch2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__baddbmm_mkl__e3967 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, SEXP beta, SEXP alpha) {
     auto r_out = torch::_baddbmm_mkl_(*self, *batch1, *batch2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_baddbmm_out_b5181 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, SEXP beta, SEXP alpha) {
     auto r_out = torch::baddbmm_out(*out, *self, *batch1, *batch2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_bartlett_window_3a556 (int64_t window_length, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::bartlett_window(window_length, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_bartlett_window_b5590 (int64_t window_length, bool periodic, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::bartlett_window(window_length, periodic, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_batch_norm_5981d (Rcpp::XPtr<torch::Tensor> input, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_mean, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
     auto r_out = torch::batch_norm(*input, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_mean), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_var), training, momentum, eps, cudnn_enabled);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch__batch_norm_impl_index_5981d (Rcpp::XPtr<torch::Tensor> input, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_mean, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
     auto r_out = torch::_batch_norm_impl_index(*input, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_mean), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_var), training, momentum, eps, cudnn_enabled);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)), std::get<3>(r_out));
   };

// [[Rcpp::export]]
    Rcpp::List tch__batch_norm_impl_index_backward_1df7a (int64_t impl_index, Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_mean, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_var, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> save_mean, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> save_var_transform, bool train, double eps, std::vector<bool> output_mask) {
     auto r_out = torch::_batch_norm_impl_index_backward(impl_index, *input, *grad_output, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_mean), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_var), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(save_mean), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(save_var_transform), train, eps, vector_to_array_bool<3>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_bernoulli_172e9 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::bernoulli(*self, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_bernoulli_out_afdba (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::bernoulli_out(*out, *self, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_bernoulli_7c6a3 (Rcpp::XPtr<torch::Tensor> self, double p, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::bernoulli(*self, p, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_bilinear_0887c (Rcpp::XPtr<torch::Tensor> input1, Rcpp::XPtr<torch::Tensor> input2, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias) {
     auto r_out = torch::bilinear(*input1, *input2, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_binary_cross_entropy_with_logits_d8883 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> pos_weight, int64_t reduction) {
     auto r_out = torch::binary_cross_entropy_with_logits(*self, *target, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(pos_weight), reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_binary_cross_entropy_with_logits_backward_72cff (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> pos_weight, int64_t reduction) {
     auto r_out = torch::binary_cross_entropy_with_logits_backward(*grad_output, *self, *target, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(pos_weight), reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_bincount_f4aae (Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weights, int64_t minlength) {
     auto r_out = torch::bincount(*self, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weights), minlength);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_bitwise_not_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::bitwise_not(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_bitwise_not_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::bitwise_not_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_logical_not_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::logical_not(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_logical_not_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::logical_not_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_logical_xor_7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::logical_xor(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_logical_xor_out_b81ca (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::logical_xor_out(*out, *self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_blackman_window_3a556 (int64_t window_length, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::blackman_window(window_length, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_blackman_window_b5590 (int64_t window_length, bool periodic, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::blackman_window(window_length, periodic, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_bmm_41798 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat2) {
     auto r_out = torch::bmm(*self, *mat2);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_bmm_out_05a32 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat2) {
     auto r_out = torch::bmm_out(*out, *self, *mat2);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_broadcast_tensors_595f6 (Rcpp::List tensors) {
     auto r_out = torch::broadcast_tensors(tensor_list_from_r_(tensors));
 Rcpp::List v;

 for (int i = 0; i < r_out.size(); ++i) {
  v.push_back(make_tensor_ptr(r_out[i]));
 }

 return v;
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cat_55ff1 (Rcpp::List tensors, int64_t dim) {
     auto r_out = torch::cat(tensor_list_from_r_(tensors), dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cat_out_52c09 (Rcpp::XPtr<torch::Tensor> out, Rcpp::List tensors, int64_t dim) {
     auto r_out = torch::cat_out(*out, tensor_list_from_r_(tensors), dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cat_bf3f3 (Rcpp::List tensors, Rcpp::XPtr<torch::Dimname> dim) {
     auto r_out = torch::cat(tensor_list_from_r_(tensors), *dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cat_out_60af5 (Rcpp::XPtr<torch::Tensor> out, Rcpp::List tensors, Rcpp::XPtr<torch::Dimname> dim) {
     auto r_out = torch::cat_out(*out, tensor_list_from_r_(tensors), *dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ceil_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::ceil(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ceil__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::ceil_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ceil_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::ceil_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_chain_matmul_e2d4d (Rcpp::List matrices) {
     auto r_out = torch::chain_matmul(tensor_list_from_r_(matrices));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_chunk_d1ba7 (Rcpp::XPtr<torch::Tensor> self, int64_t chunks, int64_t dim) {
     auto r_out = torch::chunk(*self, chunks, dim);
 Rcpp::List v;

 for (int i = 0; i < r_out.size(); ++i) {
  v.push_back(make_tensor_ptr(r_out[i]));
 }

 return v;
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_clamp_70f48 (Rcpp::XPtr<torch::Tensor> self, SEXP min, SEXP max) {
     auto r_out = torch::clamp(*self, resolve_null_scalar(min), resolve_null_scalar(max));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_clamp__de153 (Rcpp::XPtr<torch::Tensor> self, SEXP min, SEXP max) {
     auto r_out = torch::clamp_(*self, resolve_null_scalar(min), resolve_null_scalar(max));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_clamp_out_d5ca0 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP min, SEXP max) {
     auto r_out = torch::clamp_out(*out, *self, resolve_null_scalar(min), resolve_null_scalar(max));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_clamp_max_63229 (Rcpp::XPtr<torch::Tensor> self, SEXP max) {
     auto r_out = torch::clamp_max(*self, scalar_from_r_(max));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_clamp_max__1319c (Rcpp::XPtr<torch::Tensor> self, SEXP max) {
     auto r_out = torch::clamp_max_(*self, scalar_from_r_(max));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_clamp_max_out_f3a1c (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP max) {
     auto r_out = torch::clamp_max_out(*out, *self, scalar_from_r_(max));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_clamp_min_96a46 (Rcpp::XPtr<torch::Tensor> self, SEXP min) {
     auto r_out = torch::clamp_min(*self, scalar_from_r_(min));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_clamp_min__a683f (Rcpp::XPtr<torch::Tensor> self, SEXP min) {
     auto r_out = torch::clamp_min_(*self, scalar_from_r_(min));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_clamp_min_out_2cd87 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP min) {
     auto r_out = torch::clamp_min_out(*out, *self, scalar_from_r_(min));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    bool tch_cudnn_is_acceptable_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::cudnn_is_acceptable(*self);
return r_out;
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_constant_pad_nd_b282d (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> pad, SEXP value) {
     auto r_out = torch::constant_pad_nd(*self, pad, scalar_from_r_(value));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_convolution_1d39d (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool transposed, std::vector<std::int64_t> output_padding, int64_t groups) {
     auto r_out = torch::convolution(*input, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, dilation, transposed, output_padding, groups);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_convolution_overrideable_1d39d (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool transposed, std::vector<std::int64_t> output_padding, int64_t groups) {
     auto r_out = torch::convolution_overrideable(*input, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, dilation, transposed, output_padding, groups);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_convolution_backward_overrideable_3344f (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool transposed, std::vector<std::int64_t> output_padding, int64_t groups, std::vector<bool> output_mask) {
     auto r_out = torch::convolution_backward_overrideable(*grad_output, *input, *weight, stride, padding, dilation, transposed, output_padding, groups, vector_to_array_bool<3>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__convolution_1b531 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool transposed, std::vector<std::int64_t> output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled) {
     auto r_out = torch::_convolution(*input, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__convolution_nogroup_5798a (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool transposed, std::vector<std::int64_t> output_padding) {
     auto r_out = torch::_convolution_nogroup(*input, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, dilation, transposed, output_padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch__convolution_double_backward_3454c (Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> ggI, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> ggW, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> ggb, Rcpp::XPtr<torch::Tensor> gO, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool transposed, std::vector<std::int64_t> output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::vector<bool> output_mask) {
     auto r_out = torch::_convolution_double_backward(*Rcpp::as<Rcpp::XPtr<torch::Tensor>>(ggI), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(ggW), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(ggb), *gO, *weight, *self, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, vector_to_array_bool<3>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_conv1d_cc85c (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, int64_t groups) {
     auto r_out = torch::conv1d(*input, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, dilation, groups);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_conv2d_cc85c (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, int64_t groups) {
     auto r_out = torch::conv2d(*input, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, dilation, groups);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_conv3d_cc85c (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, int64_t groups) {
     auto r_out = torch::conv3d(*input, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, dilation, groups);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_conv_tbc_81072 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, int64_t pad) {
     auto r_out = torch::conv_tbc(*self, *weight, *bias, pad);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_conv_tbc_backward_cd77c (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, int64_t pad) {
     auto r_out = torch::conv_tbc_backward(*self, *input, *weight, *bias, pad);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_conv_transpose1d_7c381 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> output_padding, int64_t groups, std::vector<std::int64_t> dilation) {
     auto r_out = torch::conv_transpose1d(*input, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, output_padding, groups, dilation);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_conv_transpose2d_7c381 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> output_padding, int64_t groups, std::vector<std::int64_t> dilation) {
     auto r_out = torch::conv_transpose2d(*input, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, output_padding, groups, dilation);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_conv_transpose3d_7c381 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> output_padding, int64_t groups, std::vector<std::int64_t> dilation) {
     auto r_out = torch::conv_transpose3d(*input, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, output_padding, groups, dilation);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__copy_from_210af (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> dst, bool non_blocking) {
     auto r_out = torch::_copy_from(*self, *dst, non_blocking);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cos_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::cos(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cos__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::cos_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cos_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::cos_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cosh_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::cosh(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cosh__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::cosh_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cosh_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::cosh_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cosine_embedding_loss_825ed (Rcpp::XPtr<torch::Tensor> input1, Rcpp::XPtr<torch::Tensor> input2, Rcpp::XPtr<torch::Tensor> target, double margin, int64_t reduction) {
     auto r_out = torch::cosine_embedding_loss(*input1, *input2, *target, margin, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cudnn_affine_grid_generator_d4724 (Rcpp::XPtr<torch::Tensor> theta, int64_t False, int64_t C, int64_t H, int64_t W) {
     auto r_out = torch::cudnn_affine_grid_generator(*theta, FALSE, C, H, W);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cudnn_affine_grid_generator_backward_9db7e (Rcpp::XPtr<torch::Tensor> grad, int64_t False, int64_t C, int64_t H, int64_t W) {
     auto r_out = torch::cudnn_affine_grid_generator_backward(*grad, FALSE, C, H, W);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_cudnn_batch_norm_e7029 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_mean, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_var, bool training, double exponential_average_factor, double epsilon) {
     auto r_out = torch::cudnn_batch_norm(*input, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_mean), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_var), training, exponential_average_factor, epsilon);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_cudnn_batch_norm_backward_43ba9 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_mean, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_var, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> save_mean, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> save_var, double epsilon) {
     auto r_out = torch::cudnn_batch_norm_backward(*input, *grad_output, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_mean), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_var), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(save_mean), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(save_var), epsilon);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cudnn_convolution_4b7d8 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic) {
     auto r_out = torch::cudnn_convolution(*self, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), padding, stride, dilation, groups, benchmark, deterministic);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cudnn_convolution_backward_input_1d479 (std::vector<std::int64_t> self_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic) {
     auto r_out = torch::cudnn_convolution_backward_input(self_size, *grad_output, *weight, padding, stride, dilation, groups, benchmark, deterministic);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_cudnn_convolution_backward_2db50 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic, std::vector<bool> output_mask) {
     auto r_out = torch::cudnn_convolution_backward(*self, *grad_output, *weight, padding, stride, dilation, groups, benchmark, deterministic, vector_to_array_bool<3>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cudnn_convolution_backward_bias_1be88 (Rcpp::XPtr<torch::Tensor> grad_output) {
     auto r_out = torch::cudnn_convolution_backward_bias(*grad_output);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cudnn_convolution_backward_weight_6c614 (std::vector<std::int64_t> weight_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic) {
     auto r_out = torch::cudnn_convolution_backward_weight(weight_size, *grad_output, *self, padding, stride, dilation, groups, benchmark, deterministic);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cudnn_convolution_transpose_abf15 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> padding, std::vector<std::int64_t> output_padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic) {
     auto r_out = torch::cudnn_convolution_transpose(*self, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), padding, output_padding, stride, dilation, groups, benchmark, deterministic);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_cudnn_convolution_transpose_backward_fba5c (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> padding, std::vector<std::int64_t> output_padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic, std::vector<bool> output_mask) {
     auto r_out = torch::cudnn_convolution_transpose_backward(*self, *grad_output, *weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, vector_to_array_bool<3>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cudnn_convolution_transpose_backward_bias_1be88 (Rcpp::XPtr<torch::Tensor> grad_output) {
     auto r_out = torch::cudnn_convolution_transpose_backward_bias(*grad_output);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cudnn_convolution_transpose_backward_input_37783 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic) {
     auto r_out = torch::cudnn_convolution_transpose_backward_input(*grad_output, *weight, padding, stride, dilation, groups, benchmark, deterministic);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cudnn_convolution_transpose_backward_weight_6c614 (std::vector<std::int64_t> weight_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic) {
     auto r_out = torch::cudnn_convolution_transpose_backward_weight(weight_size, *grad_output, *self, padding, stride, dilation, groups, benchmark, deterministic);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cudnn_grid_sampler_5ef54 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> grid) {
     auto r_out = torch::cudnn_grid_sampler(*self, *grid);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_cudnn_grid_sampler_backward_edec7 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> grid, Rcpp::XPtr<torch::Tensor> grad_output) {
     auto r_out = torch::cudnn_grid_sampler_backward(*self, *grid, *grad_output);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cumsum_497ac (Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::cumsum(*self, dim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cumsum_out_8c281 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::cumsum_out(*out, *self, dim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cumsum_035ee (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::cumsum(*self, *dim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cumsum_out_153d8 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::cumsum_out(*out, *self, *dim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cumprod_497ac (Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::cumprod(*self, dim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cumprod_out_8c281 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::cumprod_out(*out, *self, dim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cumprod_035ee (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::cumprod(*self, *dim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cumprod_out_153d8 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::cumprod_out(*out, *self, *dim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ctc_loss_a08d9 (Rcpp::XPtr<torch::Tensor> log_probs, Rcpp::XPtr<torch::Tensor> targets, std::vector<std::int64_t> input_lengths, std::vector<std::int64_t> target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {
     auto r_out = torch::ctc_loss(*log_probs, *targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ctc_loss_6dc3b (Rcpp::XPtr<torch::Tensor> log_probs, Rcpp::XPtr<torch::Tensor> targets, Rcpp::XPtr<torch::Tensor> input_lengths, Rcpp::XPtr<torch::Tensor> target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {
     auto r_out = torch::ctc_loss(*log_probs, *targets, *input_lengths, *target_lengths, blank, reduction, zero_infinity);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch__ctc_loss_b1b81 (Rcpp::XPtr<torch::Tensor> log_probs, Rcpp::XPtr<torch::Tensor> targets, std::vector<std::int64_t> input_lengths, std::vector<std::int64_t> target_lengths, int64_t blank, bool zero_infinity) {
     auto r_out = torch::_ctc_loss(*log_probs, *targets, input_lengths, target_lengths, blank, zero_infinity);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__ctc_loss_backward_42383 (Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> log_probs, Rcpp::XPtr<torch::Tensor> targets, std::vector<std::int64_t> input_lengths, std::vector<std::int64_t> target_lengths, Rcpp::XPtr<torch::Tensor> neg_log_likelihood, Rcpp::XPtr<torch::Tensor> log_alpha, int64_t blank, bool zero_infinity) {
     auto r_out = torch::_ctc_loss_backward(*grad, *log_probs, *targets, input_lengths, target_lengths, *neg_log_likelihood, *log_alpha, blank, zero_infinity);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_det_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::det(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_diag_embed_83af1 (Rcpp::XPtr<torch::Tensor> self, int64_t offset, int64_t dim1, int64_t dim2) {
     auto r_out = torch::diag_embed(*self, offset, dim1, dim2);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_diagflat_c2bc3 (Rcpp::XPtr<torch::Tensor> self, int64_t offset) {
     auto r_out = torch::diagflat(*self, offset);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_diagonal_83af1 (Rcpp::XPtr<torch::Tensor> self, int64_t offset, int64_t dim1, int64_t dim2) {
     auto r_out = torch::diagonal(*self, offset, dim1, dim2);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_div_7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::div(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_div_out_b81ca (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::div_out(*out, *self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_div_828c7 (Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::div(*self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_dot_20e8a (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor) {
     auto r_out = torch::dot(*self, *tensor);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_dot_out_b2f3c (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor) {
     auto r_out = torch::dot_out(*out, *self, *tensor);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_einsum_0ab63 (std::string equation, Rcpp::List tensors) {
     auto r_out = torch::einsum(equation, tensor_list_from_r_(tensors));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_embedding_965f4 (Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {
     auto r_out = torch::embedding(*weight, *indices, padding_idx, scale_grad_by_freq, sparse);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_embedding_backward_2c0a8 (Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {
     auto r_out = torch::embedding_backward(*grad, *indices, num_weights, padding_idx, scale_grad_by_freq, sparse);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_embedding_dense_backward_5b554 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {
     auto r_out = torch::embedding_dense_backward(*grad_output, *indices, num_weights, padding_idx, scale_grad_by_freq);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_embedding_renorm__a9c8c (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices, double max_norm, double norm_type) {
     auto r_out = torch::embedding_renorm_(*self, *indices, max_norm, norm_type);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_embedding_sparse_backward_96378 (Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {
     auto r_out = torch::embedding_sparse_backward(*grad, *indices, num_weights, padding_idx, scale_grad_by_freq);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_embedding_bag_63df1 (Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> per_sample_weights) {
     auto r_out = torch::embedding_bag(*weight, *indices, *offsets, scale_grad_by_freq, mode, sparse, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(per_sample_weights));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)), make_tensor_ptr(std::get<3>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__embedding_bag_63df1 (Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> per_sample_weights) {
     auto r_out = torch::_embedding_bag(*weight, *indices, *offsets, scale_grad_by_freq, mode, sparse, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(per_sample_weights));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)), make_tensor_ptr(std::get<3>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__embedding_bag_backward_09a9f (Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> offsets, Rcpp::XPtr<torch::Tensor> offset2bag, Rcpp::XPtr<torch::Tensor> bag_size, Rcpp::XPtr<torch::Tensor> maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> per_sample_weights) {
     auto r_out = torch::_embedding_bag_backward(*grad, *indices, *offsets, *offset2bag, *bag_size, *maximum_indices, num_weights, scale_grad_by_freq, mode, sparse, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(per_sample_weights));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__embedding_bag_sparse_backward_49858 (Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> offsets, Rcpp::XPtr<torch::Tensor> offset2bag, Rcpp::XPtr<torch::Tensor> bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> per_sample_weights) {
     auto r_out = torch::_embedding_bag_sparse_backward(*grad, *indices, *offsets, *offset2bag, *bag_size, num_weights, scale_grad_by_freq, mode, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(per_sample_weights));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__embedding_bag_dense_backward_2bfab (Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> offsets, Rcpp::XPtr<torch::Tensor> offset2bag, Rcpp::XPtr<torch::Tensor> bag_size, Rcpp::XPtr<torch::Tensor> maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> per_sample_weights) {
     auto r_out = torch::_embedding_bag_dense_backward(*grad, *indices, *offsets, *offset2bag, *bag_size, *maximum_indices, num_weights, scale_grad_by_freq, mode, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(per_sample_weights));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__embedding_bag_per_sample_weights_backward_2a097 (Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> offsets, Rcpp::XPtr<torch::Tensor> offset2bag, int64_t mode) {
     auto r_out = torch::_embedding_bag_per_sample_weights_backward(*grad, *weight, *indices, *offsets, *offset2bag, mode);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_empty_ddbf9 (std::vector<std::int64_t> size, Rcpp::Nullable<Rcpp::XPtr<torch::Dimname>> names, Rcpp::XPtr<torch::TensorOptions> options, Rcpp::Nullable<Rcpp::XPtr<torch::MemoryFormat>> memory_format) {
     auto r_out = torch::empty(size, *resolve_null_argument(names), *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_empty_e3d31 (std::vector<std::int64_t> size, Rcpp::XPtr<torch::TensorOptions> options, Rcpp::Nullable<Rcpp::XPtr<torch::MemoryFormat>> memory_format) {
     auto r_out = torch::empty(size, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__empty_affine_quantized_95cd4 (std::vector<std::int64_t> size, Rcpp::XPtr<torch::TensorOptions> options, double scale, int64_t zero_point, Rcpp::Nullable<Rcpp::XPtr<torch::MemoryFormat>> memory_format) {
     auto r_out = torch::_empty_affine_quantized(size, *options, scale, zero_point);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__empty_per_channel_affine_quantized_544b0 (std::vector<std::int64_t> size, Rcpp::XPtr<torch::Tensor> scales, Rcpp::XPtr<torch::Tensor> zero_points, int64_t axis, Rcpp::XPtr<torch::TensorOptions> options, Rcpp::Nullable<Rcpp::XPtr<torch::MemoryFormat>> memory_format) {
     auto r_out = torch::_empty_per_channel_affine_quantized(size, *scales, *zero_points, axis, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_empty_out_f648c (Rcpp::XPtr<torch::Tensor> out, std::vector<std::int64_t> size, Rcpp::Nullable<Rcpp::XPtr<torch::MemoryFormat>> memory_format) {
     auto r_out = torch::empty_out(*out, size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_empty_like_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::empty_like(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_empty_like_c2ca8 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::TensorOptions> options, Rcpp::Nullable<Rcpp::XPtr<torch::MemoryFormat>> memory_format) {
     auto r_out = torch::empty_like(*self, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_empty_strided_f6159 (std::vector<std::int64_t> size, std::vector<std::int64_t> stride, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::empty_strided(size, stride, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_erf_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::erf(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_erf__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::erf_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_erf_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::erf_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_erfc_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::erfc(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_erfc__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::erfc_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_erfc_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::erfc_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_exp_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::exp(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_exp__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::exp_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_exp_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::exp_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_expm1_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::expm1(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_expm1__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::expm1_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_expm1_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::expm1_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_eye_3cccf (int64_t n, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::eye(n, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_eye_88853 (int64_t n, int64_t m, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::eye(n, m, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_eye_out_07617 (Rcpp::XPtr<torch::Tensor> out, int64_t n) {
     auto r_out = torch::eye_out(*out, n);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_eye_out_91585 (Rcpp::XPtr<torch::Tensor> out, int64_t n, int64_t m) {
     auto r_out = torch::eye_out(*out, n, m);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_flatten_81cfa (Rcpp::XPtr<torch::Tensor> self, int64_t start_dim, int64_t end_dim) {
     auto r_out = torch::flatten(*self, start_dim, end_dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_flatten_9b6be (Rcpp::XPtr<torch::Tensor> self, int64_t start_dim, int64_t end_dim, Rcpp::XPtr<torch::Dimname> out_dim) {
     auto r_out = torch::flatten(*self, start_dim, end_dim, *out_dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_flatten_8861e (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> start_dim, Rcpp::XPtr<torch::Dimname> end_dim, Rcpp::XPtr<torch::Dimname> out_dim) {
     auto r_out = torch::flatten(*self, *start_dim, *end_dim, *out_dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_flatten_14a0a (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dims, Rcpp::XPtr<torch::Dimname> out_dim) {
     auto r_out = torch::flatten(*self, *dims, *out_dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fill__07130 (Rcpp::XPtr<torch::Tensor> self, SEXP value) {
     auto r_out = torch::fill_(*self, scalar_from_r_(value));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fill__e477b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> value) {
     auto r_out = torch::fill_(*self, *value);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_floor_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::floor(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_floor__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::floor_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_floor_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::floor_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_frac_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::frac(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_frac__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::frac_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_frac_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::frac_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_full_6da4d (std::vector<std::int64_t> size, SEXP fill_value, Rcpp::Nullable<Rcpp::XPtr<torch::Dimname>> names, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::full(size, scalar_from_r_(fill_value), *resolve_null_argument(names), *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_full_eb9c4 (std::vector<std::int64_t> size, SEXP fill_value, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::full(size, scalar_from_r_(fill_value), *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_full_out_21022 (Rcpp::XPtr<torch::Tensor> out, std::vector<std::int64_t> size, SEXP fill_value) {
     auto r_out = torch::full_out(*out, size, scalar_from_r_(fill_value));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_full_like_5abdb (Rcpp::XPtr<torch::Tensor> self, SEXP fill_value) {
     auto r_out = torch::full_like(*self, scalar_from_r_(fill_value));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_full_like_f8c71 (Rcpp::XPtr<torch::Tensor> self, SEXP fill_value, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::full_like(*self, scalar_from_r_(fill_value), *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_from_file_f3916 (std::string filename, Rcpp::Nullable<bool> shared, Rcpp::Nullable<int64_t> size, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::from_file(filename, resolve_null_argument(shared), resolve_null_argument(size), *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_grid_sampler_f5cf2 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
     auto r_out = torch::grid_sampler(*input, *grid, interpolation_mode, padding_mode, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_grid_sampler_2d_f5cf2 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
     auto r_out = torch::grid_sampler_2d(*input, *grid, interpolation_mode, padding_mode, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_grid_sampler_2d_backward_219e8 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
     auto r_out = torch::grid_sampler_2d_backward(*grad_output, *input, *grid, interpolation_mode, padding_mode, align_corners);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_grid_sampler_3d_f5cf2 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
     auto r_out = torch::grid_sampler_3d(*input, *grid, interpolation_mode, padding_mode, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_grid_sampler_3d_backward_219e8 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
     auto r_out = torch::grid_sampler_3d_backward(*grad_output, *input, *grid, interpolation_mode, padding_mode, align_corners);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_hann_window_3a556 (int64_t window_length, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::hann_window(window_length, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_hann_window_b5590 (int64_t window_length, bool periodic, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::hann_window(window_length, periodic, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_hamming_window_3a556 (int64_t window_length, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::hamming_window(window_length, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_hamming_window_b5590 (int64_t window_length, bool periodic, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::hamming_window(window_length, periodic, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_hamming_window_c0a2b (int64_t window_length, bool periodic, double alpha, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::hamming_window(window_length, periodic, alpha, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_hamming_window_1cb3e (int64_t window_length, bool periodic, double alpha, double beta, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::hamming_window(window_length, periodic, alpha, beta, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_hinge_embedding_loss_8b45d (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, double margin, int64_t reduction) {
     auto r_out = torch::hinge_embedding_loss(*self, *target, margin, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ger_5c129 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec2) {
     auto r_out = torch::ger(*self, *vec2);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ger_out_91301 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec2) {
     auto r_out = torch::ger_out(*out, *self, *vec2);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_group_norm_c31c5 (Rcpp::XPtr<torch::Tensor> input, int64_t num_groups, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, double eps, bool cudnn_enabled) {
     auto r_out = torch::group_norm(*input, num_groups, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), eps, cudnn_enabled);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fft_b40ab (Rcpp::XPtr<torch::Tensor> self, int64_t signal_ndim, bool normalized) {
     auto r_out = torch::fft(*self, signal_ndim, normalized);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ifft_b40ab (Rcpp::XPtr<torch::Tensor> self, int64_t signal_ndim, bool normalized) {
     auto r_out = torch::ifft(*self, signal_ndim, normalized);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rfft_952cd (Rcpp::XPtr<torch::Tensor> self, int64_t signal_ndim, bool normalized, bool onesided) {
     auto r_out = torch::rfft(*self, signal_ndim, normalized, onesided);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_irfft_8dbe0 (Rcpp::XPtr<torch::Tensor> self, int64_t signal_ndim, bool normalized, bool onesided, std::vector<std::int64_t> signal_sizes) {
     auto r_out = torch::irfft(*self, signal_ndim, normalized, onesided, signal_sizes);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__fft_with_size_bd3e0 (Rcpp::XPtr<torch::Tensor> self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, std::vector<std::int64_t> checked_signal_sizes, bool normalized, bool onesided, std::vector<std::int64_t> output_sizes) {
     auto r_out = torch::_fft_with_size(*self, signal_ndim, complex_input, complex_output, inverse, checked_signal_sizes, normalized, onesided, output_sizes);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    int64_t tch__cufft_get_plan_cache_size_72dc1 (int64_t device_index) {
     auto r_out = torch::_cufft_get_plan_cache_size(device_index);
return r_out;
   };

// [[Rcpp::export]]
    int64_t tch__cufft_get_plan_cache_max_size_72dc1 (int64_t device_index) {
     auto r_out = torch::_cufft_get_plan_cache_max_size(device_index);
return r_out;
   };

// [[Rcpp::export]]
    void tch__cufft_set_plan_cache_max_size_600ec (int64_t device_index, int64_t max_size) {
     torch::_cufft_set_plan_cache_max_size(device_index, max_size);

   };

// [[Rcpp::export]]
    void tch__cufft_clear_plan_cache_72dc1 (int64_t device_index) {
     torch::_cufft_clear_plan_cache(device_index);

   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_index_814b3 (Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<Rcpp::List> indices) {
     auto r_out = torch::index(*self, tensor_list_from_r_(indices));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_index_copy_073fd (Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source) {
     auto r_out = torch::index_copy(*self, dim, *index, *source);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_index_copy_4adc4 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source) {
     auto r_out = torch::index_copy(*self, *dim, *index, *source);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_index_put__59690 (Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<Rcpp::List> indices, Rcpp::XPtr<torch::Tensor> values, bool accumulate) {
     auto r_out = torch::index_put_(*self, tensor_list_from_r_(indices), *values, accumulate);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_index_put_17d44 (Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<Rcpp::List> indices, Rcpp::XPtr<torch::Tensor> values, bool accumulate) {
     auto r_out = torch::index_put(*self, tensor_list_from_r_(indices), *values, accumulate);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__index_put_impl__a799d (Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<Rcpp::List> indices, Rcpp::XPtr<torch::Tensor> values, bool accumulate, bool unsafe) {
     auto r_out = torch::_index_put_impl_(*self, tensor_list_from_r_(indices), *values, accumulate, unsafe);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_instance_norm_823ac (Rcpp::XPtr<torch::Tensor> input, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_mean, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled) {
     auto r_out = torch::instance_norm(*input, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_mean), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_var), use_input_stats, momentum, eps, cudnn_enabled);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_inverse_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::inverse(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_inverse_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::inverse_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__inverse_helper_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::_inverse_helper(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_isclose_68991 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, double rtol, double atol, bool equal_nan) {
     auto r_out = torch::isclose(*self, *other, rtol, atol, equal_nan);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_isnan_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::isnan(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    bool tch_is_distributed_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::is_distributed(*self);
return r_out;
   };

// [[Rcpp::export]]
    bool tch_is_floating_point_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::is_floating_point(*self);
return r_out;
   };

// [[Rcpp::export]]
    bool tch_is_complex_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::is_complex(*self);
return r_out;
   };

// [[Rcpp::export]]
    bool tch_is_nonzero_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::is_nonzero(*self);
return r_out;
   };

// [[Rcpp::export]]
    bool tch_is_same_size_7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::is_same_size(*self, *other);
return r_out;
   };

// [[Rcpp::export]]
    bool tch_is_signed_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::is_signed(*self);
return r_out;
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_kl_div_227af (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::kl_div(*self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_kl_div_backward_13cf8 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::kl_div_backward(*grad_output, *self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_kthvalue_552a2 (Rcpp::XPtr<torch::Tensor> self, int64_t k, int64_t dim, bool keepdim) {
     auto r_out = torch::kthvalue(*self, k, dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_kthvalue_out_f41f3 (Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, int64_t k, int64_t dim, bool keepdim) {
     auto r_out = torch::kthvalue_out(*values, *indices, *self, k, dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_kthvalue_d14ec (Rcpp::XPtr<torch::Tensor> self, int64_t k, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::kthvalue(*self, k, *dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_kthvalue_out_dcf9a (Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, int64_t k, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::kthvalue_out(*values, *indices, *self, k, *dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_layer_norm_d1a1a (Rcpp::XPtr<torch::Tensor> input, std::vector<std::int64_t> normalized_shape, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, double eps, bool cudnn_enable) {
     auto r_out = torch::layer_norm(*input, normalized_shape, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), eps, cudnn_enable);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_native_layer_norm_921de (Rcpp::XPtr<torch::Tensor> input, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, int64_t M, int64_t False, double eps) {
     auto r_out = torch::native_layer_norm(*input, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), M, FALSE, eps);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_native_layer_norm_backward_db316 (Rcpp::XPtr<torch::Tensor> grad_out, Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> mean, Rcpp::XPtr<torch::Tensor> rstd, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t M, int64_t False, std::vector<bool> output_mask) {
     auto r_out = torch::native_layer_norm_backward(*grad_out, *input, *mean, *rstd, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), M, FALSE, vector_to_array_bool<3>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_native_layer_norm_double_backward_ee4a6 (Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> ggI, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> ggW, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> ggb, Rcpp::XPtr<torch::Tensor> gO, Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> mean, Rcpp::XPtr<torch::Tensor> rstd, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t M, int64_t False, std::vector<bool> output_mask) {
     auto r_out = torch::native_layer_norm_double_backward(*Rcpp::as<Rcpp::XPtr<torch::Tensor>>(ggI), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(ggW), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(ggb), *gO, *input, *mean, *rstd, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), M, FALSE, vector_to_array_bool<3>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_linear_73573 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias) {
     auto r_out = torch::linear(*input, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mkldnn_linear_73573 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias) {
     auto r_out = torch::mkldnn_linear(*input, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fbgemm_linear_int8_weight_fp32_activation_04ea0 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> packed, Rcpp::XPtr<torch::Tensor> col_offsets, SEXP weight_scale, SEXP weight_zero_point, Rcpp::XPtr<torch::Tensor> bias) {
     auto r_out = torch::fbgemm_linear_int8_weight_fp32_activation(*input, *weight, *packed, *col_offsets, scalar_from_r_(weight_scale), scalar_from_r_(weight_zero_point), *bias);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fbgemm_linear_int8_weight_04ea0 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> packed, Rcpp::XPtr<torch::Tensor> col_offsets, SEXP weight_scale, SEXP weight_zero_point, Rcpp::XPtr<torch::Tensor> bias) {
     auto r_out = torch::fbgemm_linear_int8_weight(*input, *weight, *packed, *col_offsets, scalar_from_r_(weight_scale), scalar_from_r_(weight_zero_point), *bias);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_fbgemm_linear_quantize_weight_1ebd2 (Rcpp::XPtr<torch::Tensor> input) {
     auto r_out = torch::fbgemm_linear_quantize_weight(*input);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), std::get<2>(r_out), std::get<3>(r_out));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fbgemm_pack_gemm_matrix_fp16_1ebd2 (Rcpp::XPtr<torch::Tensor> input) {
     auto r_out = torch::fbgemm_pack_gemm_matrix_fp16(*input);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fbgemm_linear_fp16_weight_fp32_activation_6d516 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> packed_weight, Rcpp::XPtr<torch::Tensor> bias) {
     auto r_out = torch::fbgemm_linear_fp16_weight_fp32_activation(*input, *packed_weight, *bias);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fbgemm_linear_fp16_weight_6d516 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> packed_weight, Rcpp::XPtr<torch::Tensor> bias) {
     auto r_out = torch::fbgemm_linear_fp16_weight(*input, *packed_weight, *bias);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fbgemm_pack_quantized_matrix_1ebd2 (Rcpp::XPtr<torch::Tensor> input) {
     auto r_out = torch::fbgemm_pack_quantized_matrix(*input);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fbgemm_pack_quantized_matrix_6495b (Rcpp::XPtr<torch::Tensor> input, int64_t K, int64_t False) {
     auto r_out = torch::fbgemm_pack_quantized_matrix(*input, K, FALSE);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_linspace_98425 (SEXP start, SEXP end, int64_t steps, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::linspace(scalar_from_r_(start), scalar_from_r_(end), steps, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_linspace_out_0d8d7 (Rcpp::XPtr<torch::Tensor> out, SEXP start, SEXP end, int64_t steps) {
     auto r_out = torch::linspace_out(*out, scalar_from_r_(start), scalar_from_r_(end), steps);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_log_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::log(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_log__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::log_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_log_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::log_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_log10_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::log10(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_log10__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::log10_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_log10_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::log10_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_log1p_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::log1p(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_log1p__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::log1p_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_log1p_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::log1p_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_log2_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::log2(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_log2__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::log2_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_log2_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::log2_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_logdet_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::logdet(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_logspace_a4017 (SEXP start, SEXP end, int64_t steps, double base, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::logspace(scalar_from_r_(start), scalar_from_r_(end), steps, base, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_logspace_out_98f42 (Rcpp::XPtr<torch::Tensor> out, SEXP start, SEXP end, int64_t steps, double base) {
     auto r_out = torch::logspace_out(*out, scalar_from_r_(start), scalar_from_r_(end), steps, base);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_log_softmax_497ac (Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::log_softmax(*self, dim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_log_softmax_035ee (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::log_softmax(*self, *dim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__log_softmax_3e758 (Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool half_to_float) {
     auto r_out = torch::_log_softmax(*self, dim, half_to_float);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__log_softmax_backward_data_f3810 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> output, int64_t dim, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::_log_softmax_backward_data(*grad_output, *output, dim, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_logsumexp_3d8e8 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool keepdim) {
     auto r_out = torch::logsumexp(*self, dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_logsumexp_out_b8c18 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool keepdim) {
     auto r_out = torch::logsumexp_out(*out, *self, dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_logsumexp_1de70 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::logsumexp(*self, *dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_logsumexp_out_e1c9e (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::logsumexp_out(*out, *self, *dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_margin_ranking_loss_825ed (Rcpp::XPtr<torch::Tensor> input1, Rcpp::XPtr<torch::Tensor> input2, Rcpp::XPtr<torch::Tensor> target, double margin, int64_t reduction) {
     auto r_out = torch::margin_ranking_loss(*input1, *input2, *target, margin, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_matmul_7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::matmul(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_matmul_out_b81ca (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::matmul_out(*out, *self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_matrix_rank_9da2a (Rcpp::XPtr<torch::Tensor> self, double tol, bool symmetric) {
     auto r_out = torch::matrix_rank(*self, tol, symmetric);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_matrix_rank_40e87 (Rcpp::XPtr<torch::Tensor> self, bool symmetric) {
     auto r_out = torch::matrix_rank(*self, symmetric);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_matrix_power_fbba1 (Rcpp::XPtr<torch::Tensor> self, int64_t n) {
     auto r_out = torch::matrix_power(*self, n);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_max_a00d6 (Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim) {
     auto r_out = torch::max(*self, dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_max_out_f02b3 (Rcpp::XPtr<torch::Tensor> max, Rcpp::XPtr<torch::Tensor> max_values, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim) {
     auto r_out = torch::max_out(*max, *max_values, *self, dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_values_3d8e8 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool keepdim) {
     auto r_out = torch::max_values(*self, dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_max_06a58 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::max(*self, *dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_max_out_4646a (Rcpp::XPtr<torch::Tensor> max, Rcpp::XPtr<torch::Tensor> max_values, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::max_out(*max, *max_values, *self, *dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_values_1de70 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::max_values(*self, *dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_max_pool1d_with_indices_e506e (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool ceil_mode) {
     auto r_out = torch::max_pool1d_with_indices(*self, kernel_size, stride, padding, dilation, ceil_mode);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_pool1d_e506e (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool ceil_mode) {
     auto r_out = torch::max_pool1d(*self, kernel_size, stride, padding, dilation, ceil_mode);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_pool2d_e506e (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool ceil_mode) {
     auto r_out = torch::max_pool2d(*self, kernel_size, stride, padding, dilation, ceil_mode);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mkldnn_max_pool2d_e506e (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool ceil_mode) {
     auto r_out = torch::mkldnn_max_pool2d(*self, kernel_size, stride, padding, dilation, ceil_mode);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_quantized_max_pool2d_e506e (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool ceil_mode) {
     auto r_out = torch::quantized_max_pool2d(*self, kernel_size, stride, padding, dilation, ceil_mode);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_pool3d_e506e (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool ceil_mode) {
     auto r_out = torch::max_pool3d(*self, kernel_size, stride, padding, dilation, ceil_mode);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mean_e9eab (Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::mean(*self, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mean_b75b9 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool keepdim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::mean(*self, dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mean_out_d0079 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool keepdim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::mean_out(*out, *self, dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mean_a6335 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::mean(*self, *dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mean_out_f1e5a (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::mean_out(*out, *self, *dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_median_a00d6 (Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim) {
     auto r_out = torch::median(*self, dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_median_out_3f290 (Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim) {
     auto r_out = torch::median_out(*values, *indices, *self, dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_median_06a58 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::median(*self, *dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_median_out_20787 (Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::median_out(*values, *indices, *self, *dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_min_a00d6 (Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim) {
     auto r_out = torch::min(*self, dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_min_out_94872 (Rcpp::XPtr<torch::Tensor> min, Rcpp::XPtr<torch::Tensor> min_indices, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim) {
     auto r_out = torch::min_out(*min, *min_indices, *self, dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_min_values_3d8e8 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool keepdim) {
     auto r_out = torch::min_values(*self, dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_min_06a58 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::min(*self, *dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_min_out_e6737 (Rcpp::XPtr<torch::Tensor> min, Rcpp::XPtr<torch::Tensor> min_indices, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::min_out(*min, *min_indices, *self, *dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_min_values_1de70 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::min_values(*self, *dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mkldnn_convolution_6d8f9 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups) {
     auto r_out = torch::mkldnn_convolution(*self, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), padding, stride, dilation, groups);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mkldnn_convolution_backward_input_2ee87 (std::vector<std::int64_t> self_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool bias_defined) {
     auto r_out = torch::mkldnn_convolution_backward_input(self_size, *grad_output, *weight, padding, stride, dilation, groups, bias_defined);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_mkldnn_convolution_backward_weights_3d9b7 (std::vector<std::int64_t> weight_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool bias_defined) {
     auto r_out = torch::mkldnn_convolution_backward_weights(weight_size, *grad_output, *self, padding, stride, dilation, groups, bias_defined);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_mkldnn_convolution_backward_d4718 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, std::vector<bool> output_mask) {
     auto r_out = torch::mkldnn_convolution_backward(*self, *grad_output, *weight, padding, stride, dilation, groups, vector_to_array_bool<3>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_miopen_batch_norm_e7029 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_mean, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_var, bool training, double exponential_average_factor, double epsilon) {
     auto r_out = torch::miopen_batch_norm(*input, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_mean), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_var), training, exponential_average_factor, epsilon);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_miopen_batch_norm_backward_43ba9 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_mean, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_var, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> save_mean, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> save_var, double epsilon) {
     auto r_out = torch::miopen_batch_norm_backward(*input, *grad_output, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_mean), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_var), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(save_mean), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(save_var), epsilon);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_miopen_convolution_4b7d8 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic) {
     auto r_out = torch::miopen_convolution(*self, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), padding, stride, dilation, groups, benchmark, deterministic);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_miopen_convolution_backward_input_1d479 (std::vector<std::int64_t> self_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic) {
     auto r_out = torch::miopen_convolution_backward_input(self_size, *grad_output, *weight, padding, stride, dilation, groups, benchmark, deterministic);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_miopen_convolution_backward_2db50 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic, std::vector<bool> output_mask) {
     auto r_out = torch::miopen_convolution_backward(*self, *grad_output, *weight, padding, stride, dilation, groups, benchmark, deterministic, vector_to_array_bool<3>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_miopen_convolution_backward_bias_1be88 (Rcpp::XPtr<torch::Tensor> grad_output) {
     auto r_out = torch::miopen_convolution_backward_bias(*grad_output);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_miopen_convolution_backward_weight_6c614 (std::vector<std::int64_t> weight_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic) {
     auto r_out = torch::miopen_convolution_backward_weight(weight_size, *grad_output, *self, padding, stride, dilation, groups, benchmark, deterministic);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_miopen_convolution_transpose_abf15 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> padding, std::vector<std::int64_t> output_padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic) {
     auto r_out = torch::miopen_convolution_transpose(*self, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), padding, output_padding, stride, dilation, groups, benchmark, deterministic);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_miopen_convolution_transpose_backward_fba5c (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> padding, std::vector<std::int64_t> output_padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic, std::vector<bool> output_mask) {
     auto r_out = torch::miopen_convolution_transpose_backward(*self, *grad_output, *weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, vector_to_array_bool<3>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_miopen_convolution_transpose_backward_input_37783 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic) {
     auto r_out = torch::miopen_convolution_transpose_backward_input(*grad_output, *weight, padding, stride, dilation, groups, benchmark, deterministic);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_miopen_convolution_transpose_backward_weight_6c614 (std::vector<std::int64_t> weight_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic) {
     auto r_out = torch::miopen_convolution_transpose_backward_weight(weight_size, *grad_output, *self, padding, stride, dilation, groups, benchmark, deterministic);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_miopen_depthwise_convolution_4b7d8 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic) {
     auto r_out = torch::miopen_depthwise_convolution(*self, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), padding, stride, dilation, groups, benchmark, deterministic);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_miopen_depthwise_convolution_backward_input_1d479 (std::vector<std::int64_t> self_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic) {
     auto r_out = torch::miopen_depthwise_convolution_backward_input(self_size, *grad_output, *weight, padding, stride, dilation, groups, benchmark, deterministic);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_miopen_depthwise_convolution_backward_2db50 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic, std::vector<bool> output_mask) {
     auto r_out = torch::miopen_depthwise_convolution_backward(*self, *grad_output, *weight, padding, stride, dilation, groups, benchmark, deterministic, vector_to_array_bool<3>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_miopen_depthwise_convolution_backward_weight_6c614 (std::vector<std::int64_t> weight_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups, bool benchmark, bool deterministic) {
     auto r_out = torch::miopen_depthwise_convolution_backward_weight(weight_size, *grad_output, *self, padding, stride, dilation, groups, benchmark, deterministic);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_miopen_rnn_62f3e (Rcpp::XPtr<torch::Tensor> input, Rcpp::List weight, int64_t weight_stride0, Rcpp::XPtr<torch::Tensor> hx, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, std::vector<std::int64_t> batch_sizes, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> dropout_state) {
     auto r_out = torch::miopen_rnn(*input, tensor_list_from_r_(weight), weight_stride0, *hx, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(cx), mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(dropout_state));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)), make_tensor_ptr(std::get<3>(r_out)), make_tensor_ptr(std::get<4>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_miopen_rnn_backward_e2ff6 (Rcpp::XPtr<torch::Tensor> input, Rcpp::List weight, int64_t weight_stride0, Rcpp::XPtr<torch::Tensor> weight_buf, Rcpp::XPtr<torch::Tensor> hx, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> cx, Rcpp::XPtr<torch::Tensor> output, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_output, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_hy, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, std::vector<std::int64_t> batch_sizes, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> dropout_state, Rcpp::XPtr<torch::Tensor> reserve, std::vector<bool> output_mask) {
     auto r_out = torch::miopen_rnn_backward(*input, tensor_list_from_r_(weight), weight_stride0, *weight_buf, *hx, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(cx), *output, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_output), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_hy), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_cy), mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(dropout_state), *reserve, vector_to_array_bool<4>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)), tensorlist_to_r(std::get<3>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mm_41798 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat2) {
     auto r_out = torch::mm(*self, *mat2);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mm_out_05a32 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat2) {
     auto r_out = torch::mm_out(*out, *self, *mat2);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__sparse_mm_6933c (Rcpp::XPtr<torch::Tensor> sparse, Rcpp::XPtr<torch::Tensor> dense) {
     auto r_out = torch::_sparse_mm(*sparse, *dense);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_mode_a00d6 (Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim) {
     auto r_out = torch::mode(*self, dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_mode_out_3f290 (Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim) {
     auto r_out = torch::mode_out(*values, *indices, *self, dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_mode_06a58 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::mode(*self, *dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_mode_out_20787 (Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::mode_out(*values, *indices, *self, *dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mul_7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::mul(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mul_out_b81ca (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::mul_out(*out, *self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mul_828c7 (Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::mul(*self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mv_98e02 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec) {
     auto r_out = torch::mv(*self, *vec);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mv_out_a870c (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec) {
     auto r_out = torch::mv_out(*out, *self, *vec);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mvlgamma_9a315 (Rcpp::XPtr<torch::Tensor> self, int64_t p) {
     auto r_out = torch::mvlgamma(*self, p);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_narrow_d65be (Rcpp::XPtr<torch::Tensor> self, int64_t dim, int64_t start, int64_t length) {
     auto r_out = torch::narrow(*self, dim, start, length);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_native_batch_norm_0f046 (Rcpp::XPtr<torch::Tensor> input, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_mean, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_var, bool training, double momentum, double eps) {
     auto r_out = torch::native_batch_norm(*input, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_mean), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_var), training, momentum, eps);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_batch_norm_stats_537d3 (Rcpp::XPtr<torch::Tensor> input, double eps) {
     auto r_out = torch::batch_norm_stats(*input, eps);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_batch_norm_elemt_f83a1 (Rcpp::XPtr<torch::Tensor> input, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, Rcpp::XPtr<torch::Tensor> mean, Rcpp::XPtr<torch::Tensor> invstd, double eps) {
     auto r_out = torch::batch_norm_elemt(*input, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), *mean, *invstd, eps);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_batch_norm_gather_stats_36393 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> mean, Rcpp::XPtr<torch::Tensor> invstd, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_mean, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_var, double momentum, double eps, int64_t count) {
     auto r_out = torch::batch_norm_gather_stats(*input, *mean, *invstd, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_mean), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_var), momentum, eps, count);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_batch_norm_gather_stats_with_counts_e8dd7 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> mean, Rcpp::XPtr<torch::Tensor> invstd, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_mean, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_var, double momentum, double eps, std::vector<std::int64_t> counts) {
     auto r_out = torch::batch_norm_gather_stats_with_counts(*input, *mean, *invstd, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_mean), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_var), momentum, eps, counts);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_native_batch_norm_backward_963c0 (Rcpp::XPtr<torch::Tensor> grad_out, Rcpp::XPtr<torch::Tensor> input, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_mean, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_var, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> save_mean, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> save_invstd, bool train, double eps, std::vector<bool> output_mask) {
     auto r_out = torch::native_batch_norm_backward(*grad_out, *input, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_mean), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_var), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(save_mean), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(save_invstd), train, eps, vector_to_array_bool<3>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_batch_norm_backward_reduce_6d224 (Rcpp::XPtr<torch::Tensor> grad_out, Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> mean, Rcpp::XPtr<torch::Tensor> invstd, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, bool input_g, bool weight_g, bool bias_g) {
     auto r_out = torch::batch_norm_backward_reduce(*grad_out, *input, *mean, *invstd, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), input_g, weight_g, bias_g);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)), make_tensor_ptr(std::get<3>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_batch_norm_backward_elemt_fa936 (Rcpp::XPtr<torch::Tensor> grad_out, Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> mean, Rcpp::XPtr<torch::Tensor> invstd, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, Rcpp::XPtr<torch::Tensor> mean_dy, Rcpp::XPtr<torch::Tensor> mean_dy_xmu) {
     auto r_out = torch::batch_norm_backward_elemt(*grad_out, *input, *mean, *invstd, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), *mean_dy, *mean_dy_xmu);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_batch_norm_update_stats_f179e (Rcpp::XPtr<torch::Tensor> input, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_mean, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> running_var, double momentum) {
     auto r_out = torch::batch_norm_update_stats(*input, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_mean), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(running_var), momentum);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    bool tch__nnpack_available_d41d8 () {
     auto r_out = torch::_nnpack_available();
return r_out;
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__nnpack_spatial_convolution_8866b (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> padding) {
     auto r_out = torch::_nnpack_spatial_convolution(*input, *weight, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch__nnpack_spatial_convolution_backward_18af3 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> padding, std::vector<bool> output_mask) {
     auto r_out = torch::_nnpack_spatial_convolution_backward(*input, *grad_output, *weight, padding, vector_to_array_bool<3>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__nnpack_spatial_convolution_backward_input_98f55 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> padding) {
     auto r_out = torch::_nnpack_spatial_convolution_backward_input(*input, *grad_output, *weight, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__nnpack_spatial_convolution_backward_weight_9d3c3 (Rcpp::XPtr<torch::Tensor> input, std::vector<std::int64_t> weightsize, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<std::int64_t> padding) {
     auto r_out = torch::_nnpack_spatial_convolution_backward_weight(*input, weightsize, *grad_output, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ones_90179 (std::vector<std::int64_t> size, Rcpp::Nullable<Rcpp::XPtr<torch::Dimname>> names, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::ones(size, *resolve_null_argument(names), *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ones_e134c (std::vector<std::int64_t> size, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::ones(size, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ones_out_7aec6 (Rcpp::XPtr<torch::Tensor> out, std::vector<std::int64_t> size) {
     auto r_out = torch::ones_out(*out, size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ones_like_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::ones_like(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ones_like_827dc (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::ones_like(*self, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_pairwise_distance_22af9 (Rcpp::XPtr<torch::Tensor> x1, Rcpp::XPtr<torch::Tensor> x2, double p, double eps, bool keepdim) {
     auto r_out = torch::pairwise_distance(*x1, *x2, p, eps, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cdist_6dcaf (Rcpp::XPtr<torch::Tensor> x1, Rcpp::XPtr<torch::Tensor> x2, double p) {
     auto r_out = torch::cdist(*x1, *x2, p);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__cdist_backward_f0889 (Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> x1, Rcpp::XPtr<torch::Tensor> x2, double p, Rcpp::XPtr<torch::Tensor> cdist) {
     auto r_out = torch::_cdist_backward(*grad, *x1, *x2, p, *cdist);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_pdist_88d01 (Rcpp::XPtr<torch::Tensor> self, double p) {
     auto r_out = torch::pdist(*self, p);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__pdist_forward_88d01 (Rcpp::XPtr<torch::Tensor> self, double p) {
     auto r_out = torch::_pdist_forward(*self, p);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__pdist_backward_1512f (Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> self, double p, Rcpp::XPtr<torch::Tensor> pdist) {
     auto r_out = torch::_pdist_backward(*grad, *self, p, *pdist);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cosine_similarity_91cc2 (Rcpp::XPtr<torch::Tensor> x1, Rcpp::XPtr<torch::Tensor> x2, int64_t dim, double eps) {
     auto r_out = torch::cosine_similarity(*x1, *x2, dim, eps);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_pixel_shuffle_eaa66 (Rcpp::XPtr<torch::Tensor> self, int64_t upscale_factor) {
     auto r_out = torch::pixel_shuffle(*self, upscale_factor);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_pinverse_9451f (Rcpp::XPtr<torch::Tensor> self, double rcond) {
     auto r_out = torch::pinverse(*self, rcond);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_poisson_nll_loss_6faa6 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> target, bool log_input, bool full, double eps, int64_t reduction) {
     auto r_out = torch::poisson_nll_loss(*input, *target, log_input, full, eps, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_scalar_tensor_68283 (SEXP s, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::scalar_tensor(scalar_from_r_(s), *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rand_90179 (std::vector<std::int64_t> size, Rcpp::Nullable<Rcpp::XPtr<torch::Dimname>> names, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::rand(size, *resolve_null_argument(names), *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rand_0ede1 (std::vector<std::int64_t> size, Rcpp::XPtr<torch::Generator *> generator, Rcpp::Nullable<Rcpp::XPtr<torch::Dimname>> names, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::rand(size, *generator, *resolve_null_argument(names), *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rand_e134c (std::vector<std::int64_t> size, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::rand(size, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rand_bdaa4 (std::vector<std::int64_t> size, Rcpp::XPtr<torch::Generator *> generator, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::rand(size, *generator, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rand_out_7aec6 (Rcpp::XPtr<torch::Tensor> out, std::vector<std::int64_t> size) {
     auto r_out = torch::rand_out(*out, size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rand_out_ead3e (Rcpp::XPtr<torch::Tensor> out, std::vector<std::int64_t> size, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::rand_out(*out, size, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rand_like_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::rand_like(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rand_like_827dc (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::rand_like(*self, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randint_2f363 (int64_t high, std::vector<std::int64_t> size, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::randint(high, size, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randint_88e3b (int64_t high, std::vector<std::int64_t> size, Rcpp::XPtr<torch::Generator *> generator, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::randint(high, size, *generator, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randint_35565 (int64_t low, int64_t high, std::vector<std::int64_t> size, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::randint(low, high, size, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randint_9beb5 (int64_t low, int64_t high, std::vector<std::int64_t> size, Rcpp::XPtr<torch::Generator *> generator, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::randint(low, high, size, *generator, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randint_out_5b6c4 (Rcpp::XPtr<torch::Tensor> out, int64_t high, std::vector<std::int64_t> size) {
     auto r_out = torch::randint_out(*out, high, size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randint_out_04ec9 (Rcpp::XPtr<torch::Tensor> out, int64_t high, std::vector<std::int64_t> size, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::randint_out(*out, high, size, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randint_out_b49eb (Rcpp::XPtr<torch::Tensor> out, int64_t low, int64_t high, std::vector<std::int64_t> size) {
     auto r_out = torch::randint_out(*out, low, high, size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randint_out_a2daf (Rcpp::XPtr<torch::Tensor> out, int64_t low, int64_t high, std::vector<std::int64_t> size, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::randint_out(*out, low, high, size, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randint_like_726ff (Rcpp::XPtr<torch::Tensor> self, int64_t high) {
     auto r_out = torch::randint_like(*self, high);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randint_like_c06e9 (Rcpp::XPtr<torch::Tensor> self, int64_t low, int64_t high) {
     auto r_out = torch::randint_like(*self, low, high);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randint_like_5202f (Rcpp::XPtr<torch::Tensor> self, int64_t high, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::randint_like(*self, high, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randint_like_f1e80 (Rcpp::XPtr<torch::Tensor> self, int64_t low, int64_t high, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::randint_like(*self, low, high, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randn_e134c (std::vector<std::int64_t> size, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::randn(size, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randn_bdaa4 (std::vector<std::int64_t> size, Rcpp::XPtr<torch::Generator *> generator, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::randn(size, *generator, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randn_90179 (std::vector<std::int64_t> size, Rcpp::Nullable<Rcpp::XPtr<torch::Dimname>> names, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::randn(size, *resolve_null_argument(names), *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randn_0ede1 (std::vector<std::int64_t> size, Rcpp::XPtr<torch::Generator *> generator, Rcpp::Nullable<Rcpp::XPtr<torch::Dimname>> names, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::randn(size, *generator, *resolve_null_argument(names), *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randn_out_7aec6 (Rcpp::XPtr<torch::Tensor> out, std::vector<std::int64_t> size) {
     auto r_out = torch::randn_out(*out, size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randn_out_ead3e (Rcpp::XPtr<torch::Tensor> out, std::vector<std::int64_t> size, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::randn_out(*out, size, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randn_like_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::randn_like(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randn_like_827dc (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::randn_like(*self, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randperm_3cccf (int64_t n, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::randperm(n, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randperm_1bfca (int64_t n, Rcpp::XPtr<torch::Generator *> generator, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::randperm(n, *generator, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randperm_out_07617 (Rcpp::XPtr<torch::Tensor> out, int64_t n) {
     auto r_out = torch::randperm_out(*out, n);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_randperm_out_02cc5 (Rcpp::XPtr<torch::Tensor> out, int64_t n, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::randperm_out(*out, n, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_range_226c7 (SEXP start, SEXP end, SEXP step, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::range(scalar_from_r_(start), scalar_from_r_(end), scalar_from_r_(step), *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_range_08b0a (SEXP start, SEXP end, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::range(scalar_from_r_(start), scalar_from_r_(end), *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_range_out_346d8 (Rcpp::XPtr<torch::Tensor> out, SEXP start, SEXP end, SEXP step) {
     auto r_out = torch::range_out(*out, scalar_from_r_(start), scalar_from_r_(end), scalar_from_r_(step));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_reciprocal_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::reciprocal(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_reciprocal__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::reciprocal_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_reciprocal_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::reciprocal_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_neg_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::neg(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_neg__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::neg_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_neg_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::neg_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_repeat_interleave_f1d80 (Rcpp::XPtr<torch::Tensor> repeats) {
     auto r_out = torch::repeat_interleave(*repeats);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_repeat_interleave_df8da (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> repeats, Rcpp::Nullable<int64_t> dim) {
     auto r_out = torch::repeat_interleave(*self, *repeats, resolve_null_argument(dim));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_repeat_interleave_f4cdb (Rcpp::XPtr<torch::Tensor> self, int64_t repeats, Rcpp::Nullable<int64_t> dim) {
     auto r_out = torch::repeat_interleave(*self, repeats, resolve_null_argument(dim));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_reshape_00ebe (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> shape) {
     auto r_out = torch::reshape(*self, shape);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__mkldnn_reshape_00ebe (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> shape) {
     auto r_out = torch::_mkldnn_reshape(*self, shape);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_round_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::round(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_round__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::round_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_round_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::round_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rrelu_60960 (Rcpp::XPtr<torch::Tensor> self, SEXP lower, SEXP upper, bool training, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::rrelu(*self, scalar_from_r_(lower), scalar_from_r_(upper), training, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rrelu__4a4a2 (Rcpp::XPtr<torch::Tensor> self, SEXP lower, SEXP upper, bool training, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::rrelu_(*self, scalar_from_r_(lower), scalar_from_r_(upper), training, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_relu_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::relu(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_relu__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::relu_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_prelu_74aa2 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight) {
     auto r_out = torch::prelu(*self, *weight);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_prelu_backward_fdadf (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight) {
     auto r_out = torch::prelu_backward(*grad_output, *self, *weight);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_gelu_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::gelu(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_gelu_backward_410fb (Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::gelu_backward(*grad, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_hardshrink_899d6 (Rcpp::XPtr<torch::Tensor> self, SEXP lambd) {
     auto r_out = torch::hardshrink(*self, scalar_from_r_(lambd));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_hardshrink_backward_ae549 (Rcpp::XPtr<torch::Tensor> grad_out, Rcpp::XPtr<torch::Tensor> self, SEXP lambd) {
     auto r_out = torch::hardshrink_backward(*grad_out, *self, scalar_from_r_(lambd));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rsqrt_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::rsqrt(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rsqrt__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::rsqrt_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rsqrt_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::rsqrt_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_select_9119a (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, int64_t index) {
     auto r_out = torch::select(*self, *dim, index);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_select_b059a (Rcpp::XPtr<torch::Tensor> self, int64_t dim, int64_t index) {
     auto r_out = torch::select(*self, dim, index);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_selu_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::selu(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_selu__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::selu_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_celu_5bcc8 (Rcpp::XPtr<torch::Tensor> self, SEXP alpha) {
     auto r_out = torch::celu(*self, scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_celu__afb28 (Rcpp::XPtr<torch::Tensor> self, SEXP alpha) {
     auto r_out = torch::celu_(*self, scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sigmoid_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::sigmoid(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sigmoid__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::sigmoid_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sigmoid_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::sigmoid_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sin_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::sin(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sin__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::sin_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sin_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::sin_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sinh_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::sinh(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sinh__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::sinh_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sinh_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::sinh_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_detach_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::detach(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_detach__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::detach_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    int64_t tch_size_ec971 (Rcpp::XPtr<torch::Tensor> self, int64_t dim) {
     auto r_out = torch::size(*self, dim);
return r_out;
   };

// [[Rcpp::export]]
    int64_t tch_size_38055 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim) {
     auto r_out = torch::size(*self, *dim);
return r_out;
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_slice_43b67 (Rcpp::XPtr<torch::Tensor> self, int64_t dim, int64_t start, int64_t end, int64_t step) {
     auto r_out = torch::slice(*self, dim, start, end, step);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_slogdet_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::slogdet(*self);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_smm_41798 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat2) {
     auto r_out = torch::smm(*self, *mat2);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_softmax_497ac (Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::softmax(*self, dim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_softmax_035ee (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::softmax(*self, *dim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__softmax_3e758 (Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool half_to_float) {
     auto r_out = torch::_softmax(*self, dim, half_to_float);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__softmax_backward_data_f3810 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> output, int64_t dim, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::_softmax_backward_data(*grad_output, *output, dim, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_split_899f0 (Rcpp::XPtr<torch::Tensor> self, int64_t split_size, int64_t dim) {
     auto r_out = torch::split(*self, split_size, dim);
 Rcpp::List v;

 for (int i = 0; i < r_out.size(); ++i) {
  v.push_back(make_tensor_ptr(r_out[i]));
 }

 return v;
   };

// [[Rcpp::export]]
    Rcpp::List tch_split_with_sizes_6a922 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> split_sizes, int64_t dim) {
     auto r_out = torch::split_with_sizes(*self, split_sizes, dim);
 Rcpp::List v;

 for (int i = 0; i < r_out.size(); ++i) {
  v.push_back(make_tensor_ptr(r_out[i]));
 }

 return v;
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_squeeze_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::squeeze(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_squeeze_ec971 (Rcpp::XPtr<torch::Tensor> self, int64_t dim) {
     auto r_out = torch::squeeze(*self, dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_squeeze_38055 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim) {
     auto r_out = torch::squeeze(*self, *dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sspaddmm_593f9 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2, SEXP beta, SEXP alpha) {
     auto r_out = torch::sspaddmm(*self, *mat1, *mat2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sspaddmm_out_f8a2b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2, SEXP beta, SEXP alpha) {
     auto r_out = torch::sspaddmm_out(*out, *self, *mat1, *mat2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_stack_55ff1 (Rcpp::List tensors, int64_t dim) {
     auto r_out = torch::stack(tensor_list_from_r_(tensors), dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_stack_out_52c09 (Rcpp::XPtr<torch::Tensor> out, Rcpp::List tensors, int64_t dim) {
     auto r_out = torch::stack_out(*out, tensor_list_from_r_(tensors), dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_stft_c07c5 (Rcpp::XPtr<torch::Tensor> self, int64_t n_fft, Rcpp::Nullable<int64_t> hop_length, Rcpp::Nullable<int64_t> win_length, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> window, bool normalized, bool onesided) {
     auto r_out = torch::stft(*self, n_fft, resolve_null_argument(hop_length), resolve_null_argument(win_length), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(window), normalized, onesided);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    int64_t tch_stride_ec971 (Rcpp::XPtr<torch::Tensor> self, int64_t dim) {
     auto r_out = torch::stride(*self, dim);
return r_out;
   };

// [[Rcpp::export]]
    int64_t tch_stride_38055 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim) {
     auto r_out = torch::stride(*self, *dim);
return r_out;
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sum_e9eab (Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::sum(*self, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sum_b75b9 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool keepdim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::sum(*self, dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sum_a6335 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::sum(*self, *dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sum_out_d0079 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool keepdim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::sum_out(*out, *self, dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sum_out_f1e5a (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::sum_out(*out, *self, *dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sqrt_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::sqrt(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sqrt__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::sqrt_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sqrt_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::sqrt_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_std_26862 (Rcpp::XPtr<torch::Tensor> self, bool unbiased) {
     auto r_out = torch::std(*self, unbiased);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_std_e89c4 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool unbiased, bool keepdim) {
     auto r_out = torch::std(*self, dim, unbiased, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_std_mean_26862 (Rcpp::XPtr<torch::Tensor> self, bool unbiased) {
     auto r_out = torch::std_mean(*self, unbiased);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_std_mean_e89c4 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool unbiased, bool keepdim) {
     auto r_out = torch::std_mean(*self, dim, unbiased, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_std_mean_439bb (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool unbiased, bool keepdim) {
     auto r_out = torch::std_mean(*self, *dim, unbiased, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_std_out_e7788 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool unbiased, bool keepdim) {
     auto r_out = torch::std_out(*out, *self, dim, unbiased, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_std_439bb (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool unbiased, bool keepdim) {
     auto r_out = torch::std(*self, *dim, unbiased, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_std_out_d7e1e (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool unbiased, bool keepdim) {
     auto r_out = torch::std_out(*out, *self, *dim, unbiased, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_prod_e9eab (Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::prod(*self, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_prod_23927 (Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::prod(*self, dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_prod_out_fe8f5 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::prod_out(*out, *self, dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_prod_fe514 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::prod(*self, *dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_prod_out_39ef9 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim, Rcpp::Nullable<std::string> dtype) {
     auto r_out = torch::prod_out(*out, *self, *dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_t_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::t(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_tan_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::tan(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_tan__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::tan_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_tan_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::tan_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_tanh_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::tanh(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_tanh__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::tanh_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_tanh_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::tanh_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_tensordot_22df0 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, std::vector<std::int64_t> dims_self, std::vector<std::int64_t> dims_other) {
     auto r_out = torch::tensordot(*self, *other, dims_self, dims_other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_threshold_5f779 (Rcpp::XPtr<torch::Tensor> self, SEXP threshold, SEXP value) {
     auto r_out = torch::threshold(*self, scalar_from_r_(threshold), scalar_from_r_(value));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_threshold__6301d (Rcpp::XPtr<torch::Tensor> self, SEXP threshold, SEXP value) {
     auto r_out = torch::threshold_(*self, scalar_from_r_(threshold), scalar_from_r_(value));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_threshold_out_7f0e0 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP threshold, SEXP value) {
     auto r_out = torch::threshold_out(*out, *self, scalar_from_r_(threshold), scalar_from_r_(value));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_threshold_backward_d3ea3 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, SEXP threshold) {
     auto r_out = torch::threshold_backward(*grad_output, *self, scalar_from_r_(threshold));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_transpose_79f15 (Rcpp::XPtr<torch::Tensor> self, int64_t dim0, int64_t dim1) {
     auto r_out = torch::transpose(*self, dim0, dim1);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_transpose_59978 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim0, Rcpp::XPtr<torch::Dimname> dim1) {
     auto r_out = torch::transpose(*self, *dim0, *dim1);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__mkldnn_transpose_79f15 (Rcpp::XPtr<torch::Tensor> self, int64_t dim0, int64_t dim1) {
     auto r_out = torch::_mkldnn_transpose(*self, dim0, dim1);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__mkldnn_transpose__9862c (Rcpp::XPtr<torch::Tensor> self, int64_t dim0, int64_t dim1) {
     auto r_out = torch::_mkldnn_transpose_(*self, dim0, dim1);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_one_hot_80453 (Rcpp::XPtr<torch::Tensor> self, int64_t num_classes) {
     auto r_out = torch::one_hot(*self, num_classes);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_flip_58ccf (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dims) {
     auto r_out = torch::flip(*self, dims);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_roll_7d21b (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> shifts, std::vector<std::int64_t> dims) {
     auto r_out = torch::roll(*self, shifts, dims);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rot90_ba5ca (Rcpp::XPtr<torch::Tensor> self, int64_t k, std::vector<std::int64_t> dims) {
     auto r_out = torch::rot90(*self, k, dims);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_trapz_2b5b6 (Rcpp::XPtr<torch::Tensor> y, Rcpp::XPtr<torch::Tensor> x, int64_t dim) {
     auto r_out = torch::trapz(*y, *x, dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_trapz_6b2e2 (Rcpp::XPtr<torch::Tensor> y, double dx, int64_t dim) {
     auto r_out = torch::trapz(*y, dx, dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__trilinear_145e2 (Rcpp::XPtr<torch::Tensor> i1, Rcpp::XPtr<torch::Tensor> i2, Rcpp::XPtr<torch::Tensor> i3, std::vector<std::int64_t> expand1, std::vector<std::int64_t> expand2, std::vector<std::int64_t> expand3, std::vector<std::int64_t> sumdim, int64_t unroll_dim) {
     auto r_out = torch::_trilinear(*i1, *i2, *i3, expand1, expand2, expand3, sumdim, unroll_dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_triplet_margin_loss_644f1 (Rcpp::XPtr<torch::Tensor> anchor, Rcpp::XPtr<torch::Tensor> positive, Rcpp::XPtr<torch::Tensor> negative, double margin, double p, double eps, bool swap, int64_t reduction) {
     auto r_out = torch::triplet_margin_loss(*anchor, *positive, *negative, margin, p, eps, swap, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_trunc_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::trunc(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_trunc__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::trunc_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_trunc_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::trunc_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    bool tch__has_compatible_shallow_copy_type_6c3d7 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> from) {
     auto r_out = torch::_has_compatible_shallow_copy_type(*self, *from);
return r_out;
   };

// [[Rcpp::export]]
    Rcpp::List tch__unique_425b9 (Rcpp::XPtr<torch::Tensor> self, bool sorted, bool return_inverse) {
     auto r_out = torch::_unique(*self, sorted, return_inverse);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_unique_dim_0782e (Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool sorted, bool return_inverse, bool return_counts) {
     auto r_out = torch::unique_dim(*self, dim, sorted, return_inverse, return_counts);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_unique_consecutive_06950 (Rcpp::XPtr<torch::Tensor> self, bool return_inverse, bool return_counts, Rcpp::Nullable<int64_t> dim) {
     auto r_out = torch::unique_consecutive(*self, return_inverse, return_counts, resolve_null_argument(dim));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_unique_dim_consecutive_3671e (Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool return_inverse, bool return_counts) {
     auto r_out = torch::unique_dim_consecutive(*self, dim, return_inverse, return_counts);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__unique2_b3f61 (Rcpp::XPtr<torch::Tensor> self, bool sorted, bool return_inverse, bool return_counts) {
     auto r_out = torch::_unique2(*self, sorted, return_inverse, return_counts);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__unsafe_view_6bf55 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> size) {
     auto r_out = torch::_unsafe_view(*self, size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_unsqueeze_ec971 (Rcpp::XPtr<torch::Tensor> self, int64_t dim) {
     auto r_out = torch::unsqueeze(*self, dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_var_26862 (Rcpp::XPtr<torch::Tensor> self, bool unbiased) {
     auto r_out = torch::var(*self, unbiased);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_var_e89c4 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool unbiased, bool keepdim) {
     auto r_out = torch::var(*self, dim, unbiased, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_var_out_e7788 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool unbiased, bool keepdim) {
     auto r_out = torch::var_out(*out, *self, dim, unbiased, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_var_439bb (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool unbiased, bool keepdim) {
     auto r_out = torch::var(*self, *dim, unbiased, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_var_out_d7e1e (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool unbiased, bool keepdim) {
     auto r_out = torch::var_out(*out, *self, *dim, unbiased, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_var_mean_26862 (Rcpp::XPtr<torch::Tensor> self, bool unbiased) {
     auto r_out = torch::var_mean(*self, unbiased);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_var_mean_e89c4 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool unbiased, bool keepdim) {
     auto r_out = torch::var_mean(*self, dim, unbiased, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_var_mean_439bb (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool unbiased, bool keepdim) {
     auto r_out = torch::var_mean(*self, *dim, unbiased, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_where_659bd (Rcpp::XPtr<torch::Tensor> condition, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::where(*condition, *self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_where_60720 (Rcpp::XPtr<torch::Tensor> condition) {
     auto r_out = torch::where(*condition);
 Rcpp::List v;

 for (int i = 0; i < r_out.size(); ++i) {
  v.push_back(make_tensor_ptr(r_out[i]));
 }

 return v;
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__s_where_659bd (Rcpp::XPtr<torch::Tensor> condition, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::_s_where(*condition, *self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_norm_except_dim_9aeb9 (Rcpp::XPtr<torch::Tensor> v, int64_t pow, int64_t dim) {
     auto r_out = torch::norm_except_dim(*v, pow, dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__weight_norm_b01a0 (Rcpp::XPtr<torch::Tensor> v, Rcpp::XPtr<torch::Tensor> g, int64_t dim) {
     auto r_out = torch::_weight_norm(*v, *g, dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch__weight_norm_cuda_interface_b01a0 (Rcpp::XPtr<torch::Tensor> v, Rcpp::XPtr<torch::Tensor> g, int64_t dim) {
     auto r_out = torch::_weight_norm_cuda_interface(*v, *g, dim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__weight_norm_cuda_interface_backward_8bfac (Rcpp::XPtr<torch::Tensor> grad_w, Rcpp::XPtr<torch::Tensor> saved_v, Rcpp::XPtr<torch::Tensor> saved_g, Rcpp::XPtr<torch::Tensor> saved_norms, int64_t dim) {
     auto r_out = torch::_weight_norm_cuda_interface_backward(*grad_w, *saved_v, *saved_g, *saved_norms, dim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__weight_norm_differentiable_backward_8bfac (Rcpp::XPtr<torch::Tensor> grad_w, Rcpp::XPtr<torch::Tensor> saved_v, Rcpp::XPtr<torch::Tensor> saved_g, Rcpp::XPtr<torch::Tensor> saved_norms, int64_t dim) {
     auto r_out = torch::_weight_norm_differentiable_backward(*grad_w, *saved_v, *saved_g, *saved_norms, dim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_zeros_90179 (std::vector<std::int64_t> size, Rcpp::Nullable<Rcpp::XPtr<torch::Dimname>> names, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::zeros(size, *resolve_null_argument(names), *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_zeros_e134c (std::vector<std::int64_t> size, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::zeros(size, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_zeros_out_7aec6 (Rcpp::XPtr<torch::Tensor> out, std::vector<std::int64_t> size) {
     auto r_out = torch::zeros_out(*out, size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_zeros_like_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::zeros_like(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_zeros_like_827dc (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::zeros_like(*self, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__standard_gamma_grad_14c47 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> output) {
     auto r_out = torch::_standard_gamma_grad(*self, *output);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__standard_gamma_172e9 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::_standard_gamma(*self, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__dirichlet_grad_42981 (Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> alpha, Rcpp::XPtr<torch::Tensor> total) {
     auto r_out = torch::_dirichlet_grad(*x, *alpha, *total);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__sample_dirichlet_172e9 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::_sample_dirichlet(*self, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_poisson_172e9 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::poisson(*self, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_native_norm_04a03 (Rcpp::XPtr<torch::Tensor> self, SEXP p) {
     auto r_out = torch::native_norm(*self, scalar_from_r_(p));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__sparse_sum_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::_sparse_sum(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__sparse_sum_ef5e6 (Rcpp::XPtr<torch::Tensor> self, std::string dtype) {
     auto r_out = torch::_sparse_sum(*self, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__sparse_sum_527b1 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim) {
     auto r_out = torch::_sparse_sum(*self, dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__sparse_sum_b0672 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, std::string dtype) {
     auto r_out = torch::_sparse_sum(*self, dim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__sparse_sum_backward_6627f (Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim) {
     auto r_out = torch::_sparse_sum_backward(*grad, *self, dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_norm_030be (Rcpp::XPtr<torch::Tensor> self, SEXP p, std::string dtype) {
     auto r_out = torch::norm(*self, resolve_null_scalar(p), scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_norm_04a03 (Rcpp::XPtr<torch::Tensor> self, SEXP p) {
     auto r_out = torch::norm(*self, scalar_from_r_(p));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_norm_2dfa1 (Rcpp::XPtr<torch::Tensor> self, SEXP p, std::vector<std::int64_t> dim, bool keepdim, std::string dtype) {
     auto r_out = torch::norm(*self, resolve_null_scalar(p), dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_norm_6d38f (Rcpp::XPtr<torch::Tensor> self, SEXP p, std::vector<std::int64_t> dim, bool keepdim) {
     auto r_out = torch::norm(*self, resolve_null_scalar(p), dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_norm_out_f2ac1 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP p, std::vector<std::int64_t> dim, bool keepdim, std::string dtype) {
     auto r_out = torch::norm_out(*out, *self, resolve_null_scalar(p), dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_norm_out_2a3ab (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP p, std::vector<std::int64_t> dim, bool keepdim) {
     auto r_out = torch::norm_out(*out, *self, resolve_null_scalar(p), dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_norm_66684 (Rcpp::XPtr<torch::Tensor> self, SEXP p, Rcpp::XPtr<torch::Dimname> dim, bool keepdim, std::string dtype) {
     auto r_out = torch::norm(*self, resolve_null_scalar(p), *dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_norm_676a6 (Rcpp::XPtr<torch::Tensor> self, SEXP p, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::norm(*self, resolve_null_scalar(p), *dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_norm_out_bb6d7 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP p, Rcpp::XPtr<torch::Dimname> dim, bool keepdim, std::string dtype) {
     auto r_out = torch::norm_out(*out, *self, resolve_null_scalar(p), *dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_norm_out_dce66 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP p, Rcpp::XPtr<torch::Dimname> dim, bool keepdim) {
     auto r_out = torch::norm_out(*out, *self, resolve_null_scalar(p), *dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_frobenius_norm_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::frobenius_norm(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_frobenius_norm_3d8e8 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool keepdim) {
     auto r_out = torch::frobenius_norm(*self, dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_frobenius_norm_out_b8c18 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool keepdim) {
     auto r_out = torch::frobenius_norm_out(*out, *self, dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_nuclear_norm_363ee (Rcpp::XPtr<torch::Tensor> self, bool keepdim) {
     auto r_out = torch::nuclear_norm(*self, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_nuclear_norm_out_c6adb (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, bool keepdim) {
     auto r_out = torch::nuclear_norm_out(*out, *self, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_nuclear_norm_3d8e8 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool keepdim) {
     auto r_out = torch::nuclear_norm(*self, dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_nuclear_norm_out_b8c18 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool keepdim) {
     auto r_out = torch::nuclear_norm_out(*out, *self, dim, keepdim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_clone_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::clone(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_resize_as__1e3e9 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> the_template) {
     auto r_out = torch::resize_as_(*self, *the_template);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_pow_out_22210 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP exponent) {
     auto r_out = torch::pow_out(*out, *self, scalar_from_r_(exponent));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_pow_a504e (Rcpp::XPtr<torch::Tensor> self, SEXP exponent) {
     auto r_out = torch::pow(*self, scalar_from_r_(exponent));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_zero__77059 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::zero_(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sub_out_8a334 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, SEXP alpha) {
     auto r_out = torch::sub_out(*out, *self, *other, scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sub_02bec (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, SEXP alpha) {
     auto r_out = torch::sub(*self, *other, scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sub_783c8 (Rcpp::XPtr<torch::Tensor> self, SEXP other, SEXP alpha) {
     auto r_out = torch::sub(*self, scalar_from_r_(other), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rsub_02bec (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, SEXP alpha) {
     auto r_out = torch::rsub(*self, *other, scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rsub_783c8 (Rcpp::XPtr<torch::Tensor> self, SEXP other, SEXP alpha) {
     auto r_out = torch::rsub(*self, scalar_from_r_(other), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__sparse_addmm_b553e (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> sparse, Rcpp::XPtr<torch::Tensor> dense, SEXP beta, SEXP alpha) {
     auto r_out = torch::_sparse_addmm(*self, *sparse, *dense, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_addmm_out_f8a2b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2, SEXP beta, SEXP alpha) {
     auto r_out = torch::addmm_out(*out, *self, *mat1, *mat2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_addmm_593f9 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2, SEXP beta, SEXP alpha) {
     auto r_out = torch::addmm(*self, *mat1, *mat2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sparse_coo_tensor_e134c (std::vector<std::int64_t> size, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::sparse_coo_tensor(size, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sparse_coo_tensor_16e1a (Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::sparse_coo_tensor(*indices, *values, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sparse_coo_tensor_8ed0a (Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> values, std::vector<std::int64_t> size, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::sparse_coo_tensor(*indices, *values, size, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__sparse_coo_tensor_unsafe_8ed0a (Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> values, std::vector<std::int64_t> size, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::_sparse_coo_tensor_unsafe(*indices, *values, size, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__sparse_coo_tensor_with_dims_1adbc (int64_t sparse_dim, int64_t dense_dim, std::vector<std::int64_t> size, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::_sparse_coo_tensor_with_dims(sparse_dim, dense_dim, size, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__sparse_coo_tensor_with_dims_and_tensors_f5dad (int64_t sparse_dim, int64_t dense_dim, std::vector<std::int64_t> size, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::_sparse_coo_tensor_with_dims_and_tensors(sparse_dim, dense_dim, size, *indices, *values, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_to_dense_backward_99518 (Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> input) {
     auto r_out = torch::to_dense_backward(*grad, *input);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_hspmm_out_87843 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2) {
     auto r_out = torch::hspmm_out(*out, *mat1, *mat2);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_hspmm_c9d52 (Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2) {
     auto r_out = torch::hspmm(*mat1, *mat2);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_copy_sparse_to_sparse__1ccfd (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> src, bool non_blocking) {
     auto r_out = torch::copy_sparse_to_sparse_(*self, *src, non_blocking);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    int64_t tch_numel_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::numel(*self);
return r_out;
   };

// [[Rcpp::export]]
    Rcpp::List tch_unbind_ec971 (Rcpp::XPtr<torch::Tensor> self, int64_t dim) {
     auto r_out = torch::unbind(*self, dim);
 Rcpp::List v;

 for (int i = 0; i < r_out.size(); ++i) {
  v.push_back(make_tensor_ptr(r_out[i]));
 }

 return v;
   };

// [[Rcpp::export]]
    Rcpp::List tch_unbind_38055 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim) {
     auto r_out = torch::unbind(*self, *dim);
 Rcpp::List v;

 for (int i = 0; i < r_out.size(); ++i) {
  v.push_back(make_tensor_ptr(r_out[i]));
 }

 return v;
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mkldnn_reorder_conv2d_weight_b9c91 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride, std::vector<std::int64_t> dilation, int64_t groups) {
     auto r_out = torch::mkldnn_reorder_conv2d_weight(*self, padding, stride, dilation, groups);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_to_mkldnn_backward_99518 (Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> input) {
     auto r_out = torch::to_mkldnn_backward(*grad, *input);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_quantize_per_tensor_6b263 (Rcpp::XPtr<torch::Tensor> self, double scale, int64_t zero_point, std::string dtype) {
     auto r_out = torch::quantize_per_tensor(*self, scale, zero_point, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_quantize_per_channel_675d5 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> scales, Rcpp::XPtr<torch::Tensor> zero_points, int64_t axis, std::string dtype) {
     auto r_out = torch::quantize_per_channel(*self, *scales, *zero_points, axis, scalar_type_from_string(dtype));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_dequantize_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::dequantize(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    double tch_q_scale_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::q_scale(*self);
return r_out;
   };

// [[Rcpp::export]]
    int64_t tch_q_zero_point_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::q_zero_point(*self);
return r_out;
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_q_per_channel_scales_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::q_per_channel_scales(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_q_per_channel_zero_points_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::q_per_channel_zero_points(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    int64_t tch_q_per_channel_axis_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::q_per_channel_axis(*self);
return r_out;
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_int_repr_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::int_repr(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__make_per_tensor_quantized_tensor_cd44c (Rcpp::XPtr<torch::Tensor> self, double scale, int64_t zero_point) {
     auto r_out = torch::_make_per_tensor_quantized_tensor(*self, scale, zero_point);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__make_per_channel_quantized_tensor_e660e (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> scale, Rcpp::XPtr<torch::Tensor> zero_point, int64_t axis) {
     auto r_out = torch::_make_per_channel_quantized_tensor(*self, *scale, *zero_point, axis);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fake_quantize_per_tensor_affine_cb503 (Rcpp::XPtr<torch::Tensor> self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) {
     auto r_out = torch::fake_quantize_per_tensor_affine(*self, scale, zero_point, quant_min, quant_max);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fake_quantize_per_tensor_affine_backward_3f15b (Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) {
     auto r_out = torch::fake_quantize_per_tensor_affine_backward(*grad, *self, scale, zero_point, quant_min, quant_max);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fake_quantize_per_channel_affine_a10d6 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> scale, Rcpp::XPtr<torch::Tensor> zero_point, int64_t axis, int64_t quant_min, int64_t quant_max) {
     auto r_out = torch::fake_quantize_per_channel_affine(*self, *scale, *zero_point, axis, quant_min, quant_max);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fake_quantize_per_channel_affine_backward_d9046 (Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> scale, Rcpp::XPtr<torch::Tensor> zero_point, int64_t axis, int64_t quant_min, int64_t quant_max) {
     auto r_out = torch::fake_quantize_per_channel_affine_backward(*grad, *self, *scale, *zero_point, axis, quant_min, quant_max);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_meshgrid_595f6 (Rcpp::List tensors) {
     auto r_out = torch::meshgrid(tensor_list_from_r_(tensors));
 Rcpp::List v;

 for (int i = 0; i < r_out.size(); ++i) {
  v.push_back(make_tensor_ptr(r_out[i]));
 }

 return v;
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cartesian_prod_595f6 (Rcpp::List tensors) {
     auto r_out = torch::cartesian_prod(tensor_list_from_r_(tensors));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_combinations_a1c36 (Rcpp::XPtr<torch::Tensor> self, int64_t r, bool with_replacement) {
     auto r_out = torch::combinations(*self, r, with_replacement);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::ScalarType> tch_result_type_80921 (Rcpp::XPtr<torch::Tensor> tensor, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::result_type(*tensor, *other);
return make_scalar_type_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::ScalarType> tch_result_type_dcf83 (Rcpp::XPtr<torch::Tensor> tensor, SEXP other) {
     auto r_out = torch::result_type(*tensor, scalar_from_r_(other));
return make_scalar_type_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::ScalarType> tch_result_type_f78ce (SEXP scalar, Rcpp::XPtr<torch::Tensor> tensor) {
     auto r_out = torch::result_type(scalar_from_r_(scalar), *tensor);
return make_scalar_type_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::ScalarType> tch_result_type_ff97e (SEXP scalar1, SEXP scalar2) {
     auto r_out = torch::result_type(scalar_from_r_(scalar1), scalar_from_r_(scalar2));
return make_scalar_type_ptr(r_out);
   };

// [[Rcpp::export]]
    bool tch_can_cast_6bbee (std::string from, std::string to) {
     auto r_out = torch::can_cast(scalar_type_from_string(from), scalar_type_from_string(to));
return r_out;
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::ScalarType> tch_promote_types_daeb7 (std::string type1, std::string type2) {
     auto r_out = torch::promote_types(scalar_type_from_string(type1), scalar_type_from_string(type2));
return make_scalar_type_ptr(r_out);
   };

// [[Rcpp::export]]
    SEXP tch__local_scalar_dense_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::_local_scalar_dense(*self);
return scalar_to_r_(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch__thnn_fused_lstm_cell_beea1 (Rcpp::XPtr<torch::Tensor> input_gates, Rcpp::XPtr<torch::Tensor> hidden_gates, Rcpp::XPtr<torch::Tensor> cx, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> input_bias, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> hidden_bias) {
     auto r_out = torch::_thnn_fused_lstm_cell(*input_gates, *hidden_gates, *cx, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(input_bias), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(hidden_bias));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__thnn_fused_lstm_cell_backward_59f0d (Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_hy, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_cy, Rcpp::XPtr<torch::Tensor> cx, Rcpp::XPtr<torch::Tensor> cy, Rcpp::XPtr<torch::Tensor> workspace, bool has_bias) {
     auto r_out = torch::_thnn_fused_lstm_cell_backward(*Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_hy), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_cy), *cx, *cy, *workspace, has_bias);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)), make_tensor_ptr(std::get<3>(r_out)), make_tensor_ptr(std::get<4>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__thnn_differentiable_lstm_cell_backward_dc6af (Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_hy, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_cy, Rcpp::XPtr<torch::Tensor> input_gates, Rcpp::XPtr<torch::Tensor> hidden_gates, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> input_bias, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> hidden_bias, Rcpp::XPtr<torch::Tensor> cx, Rcpp::XPtr<torch::Tensor> cy) {
     auto r_out = torch::_thnn_differentiable_lstm_cell_backward(*Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_hy), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_cy), *input_gates, *hidden_gates, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(input_bias), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(hidden_bias), *cx, *cy);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)), make_tensor_ptr(std::get<3>(r_out)), make_tensor_ptr(std::get<4>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__thnn_fused_gru_cell_b28ef (Rcpp::XPtr<torch::Tensor> input_gates, Rcpp::XPtr<torch::Tensor> hidden_gates, Rcpp::XPtr<torch::Tensor> hx, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> input_bias, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> hidden_bias) {
     auto r_out = torch::_thnn_fused_gru_cell(*input_gates, *hidden_gates, *hx, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(input_bias), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(hidden_bias));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__thnn_fused_gru_cell_backward_e1b32 (Rcpp::XPtr<torch::Tensor> grad_hy, Rcpp::XPtr<torch::Tensor> workspace, bool has_bias) {
     auto r_out = torch::_thnn_fused_gru_cell_backward(*grad_hy, *workspace, has_bias);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)), make_tensor_ptr(std::get<3>(r_out)), make_tensor_ptr(std::get<4>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__thnn_differentiable_gru_cell_backward_3009f (Rcpp::XPtr<torch::Tensor> grad_hy, Rcpp::XPtr<torch::Tensor> input_gates, Rcpp::XPtr<torch::Tensor> hidden_gates, Rcpp::XPtr<torch::Tensor> hx, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> input_bias, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> hidden_bias) {
     auto r_out = torch::_thnn_differentiable_gru_cell_backward(*grad_hy, *input_gates, *hidden_gates, *hx, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(input_bias), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(hidden_bias));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)), make_tensor_ptr(std::get<3>(r_out)), make_tensor_ptr(std::get<4>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_lstm_35463 (Rcpp::XPtr<torch::Tensor> input, Rcpp::List hx, Rcpp::List params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
     auto r_out = torch::lstm(*input, tensor_list_from_r_(hx), tensor_list_from_r_(params), has_biases, num_layers, dropout, train, bidirectional, batch_first);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_lstm_2f067 (Rcpp::XPtr<torch::Tensor> data, Rcpp::XPtr<torch::Tensor> batch_sizes, Rcpp::List hx, Rcpp::List params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
     auto r_out = torch::lstm(*data, *batch_sizes, tensor_list_from_r_(hx), tensor_list_from_r_(params), has_biases, num_layers, dropout, train, bidirectional);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_gru_2e173 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::List params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
     auto r_out = torch::gru(*input, *hx, tensor_list_from_r_(params), has_biases, num_layers, dropout, train, bidirectional, batch_first);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_gru_be42e (Rcpp::XPtr<torch::Tensor> data, Rcpp::XPtr<torch::Tensor> batch_sizes, Rcpp::XPtr<torch::Tensor> hx, Rcpp::List params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
     auto r_out = torch::gru(*data, *batch_sizes, *hx, tensor_list_from_r_(params), has_biases, num_layers, dropout, train, bidirectional);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_rnn_tanh_2e173 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::List params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
     auto r_out = torch::rnn_tanh(*input, *hx, tensor_list_from_r_(params), has_biases, num_layers, dropout, train, bidirectional, batch_first);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_rnn_tanh_be42e (Rcpp::XPtr<torch::Tensor> data, Rcpp::XPtr<torch::Tensor> batch_sizes, Rcpp::XPtr<torch::Tensor> hx, Rcpp::List params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
     auto r_out = torch::rnn_tanh(*data, *batch_sizes, *hx, tensor_list_from_r_(params), has_biases, num_layers, dropout, train, bidirectional);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_rnn_relu_2e173 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::List params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
     auto r_out = torch::rnn_relu(*input, *hx, tensor_list_from_r_(params), has_biases, num_layers, dropout, train, bidirectional, batch_first);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_rnn_relu_be42e (Rcpp::XPtr<torch::Tensor> data, Rcpp::XPtr<torch::Tensor> batch_sizes, Rcpp::XPtr<torch::Tensor> hx, Rcpp::List params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
     auto r_out = torch::rnn_relu(*data, *batch_sizes, *hx, tensor_list_from_r_(params), has_biases, num_layers, dropout, train, bidirectional);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_lstm_cell_25b57 (Rcpp::XPtr<torch::Tensor> input, Rcpp::List hx, Rcpp::XPtr<torch::Tensor> w_ih, Rcpp::XPtr<torch::Tensor> w_hh, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> b_ih, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> b_hh) {
     auto r_out = torch::lstm_cell(*input, tensor_list_from_r_(hx), *w_ih, *w_hh, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(b_ih), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(b_hh));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_gru_cell_add39 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<torch::Tensor> w_ih, Rcpp::XPtr<torch::Tensor> w_hh, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> b_ih, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> b_hh) {
     auto r_out = torch::gru_cell(*input, *hx, *w_ih, *w_hh, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(b_ih), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(b_hh));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rnn_tanh_cell_add39 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<torch::Tensor> w_ih, Rcpp::XPtr<torch::Tensor> w_hh, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> b_ih, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> b_hh) {
     auto r_out = torch::rnn_tanh_cell(*input, *hx, *w_ih, *w_hh, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(b_ih), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(b_hh));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rnn_relu_cell_add39 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<torch::Tensor> w_ih, Rcpp::XPtr<torch::Tensor> w_hh, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> b_ih, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> b_hh) {
     auto r_out = torch::rnn_relu_cell(*input, *hx, *w_ih, *w_hh, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(b_ih), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(b_hh));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_quantized_lstm_c8ea3 (Rcpp::XPtr<torch::Tensor> input, Rcpp::List hx, Rcpp::List params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first, Rcpp::Nullable<std::string> dtype, bool use_dynamic) {
     auto r_out = torch::quantized_lstm(*input, tensor_list_from_r_(hx), tensor_list_from_r_(params), has_biases, num_layers, dropout, train, bidirectional, batch_first, scalar_type_from_string(dtype), use_dynamic);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_quantized_gru_2e173 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::List params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
     auto r_out = torch::quantized_gru(*input, *hx, tensor_list_from_r_(params), has_biases, num_layers, dropout, train, bidirectional, batch_first);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_quantized_gru_be42e (Rcpp::XPtr<torch::Tensor> data, Rcpp::XPtr<torch::Tensor> batch_sizes, Rcpp::XPtr<torch::Tensor> hx, Rcpp::List params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
     auto r_out = torch::quantized_gru(*data, *batch_sizes, *hx, tensor_list_from_r_(params), has_biases, num_layers, dropout, train, bidirectional);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_quantized_lstm_cell_776e3 (Rcpp::XPtr<torch::Tensor> input, Rcpp::List hx, Rcpp::XPtr<torch::Tensor> w_ih, Rcpp::XPtr<torch::Tensor> w_hh, Rcpp::XPtr<torch::Tensor> b_ih, Rcpp::XPtr<torch::Tensor> b_hh, Rcpp::XPtr<torch::Tensor> packed_ih, Rcpp::XPtr<torch::Tensor> packed_hh, Rcpp::XPtr<torch::Tensor> col_offsets_ih, Rcpp::XPtr<torch::Tensor> col_offsets_hh, SEXP scale_ih, SEXP scale_hh, SEXP zero_point_ih, SEXP zero_point_hh) {
     auto r_out = torch::quantized_lstm_cell(*input, tensor_list_from_r_(hx), *w_ih, *w_hh, *b_ih, *b_hh, *packed_ih, *packed_hh, *col_offsets_ih, *col_offsets_hh, scalar_from_r_(scale_ih), scalar_from_r_(scale_hh), scalar_from_r_(zero_point_ih), scalar_from_r_(zero_point_hh));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_quantized_gru_cell_52998 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<torch::Tensor> w_ih, Rcpp::XPtr<torch::Tensor> w_hh, Rcpp::XPtr<torch::Tensor> b_ih, Rcpp::XPtr<torch::Tensor> b_hh, Rcpp::XPtr<torch::Tensor> packed_ih, Rcpp::XPtr<torch::Tensor> packed_hh, Rcpp::XPtr<torch::Tensor> col_offsets_ih, Rcpp::XPtr<torch::Tensor> col_offsets_hh, SEXP scale_ih, SEXP scale_hh, SEXP zero_point_ih, SEXP zero_point_hh) {
     auto r_out = torch::quantized_gru_cell(*input, *hx, *w_ih, *w_hh, *b_ih, *b_hh, *packed_ih, *packed_hh, *col_offsets_ih, *col_offsets_hh, scalar_from_r_(scale_ih), scalar_from_r_(scale_hh), scalar_from_r_(zero_point_ih), scalar_from_r_(zero_point_hh));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_quantized_rnn_relu_cell_52998 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<torch::Tensor> w_ih, Rcpp::XPtr<torch::Tensor> w_hh, Rcpp::XPtr<torch::Tensor> b_ih, Rcpp::XPtr<torch::Tensor> b_hh, Rcpp::XPtr<torch::Tensor> packed_ih, Rcpp::XPtr<torch::Tensor> packed_hh, Rcpp::XPtr<torch::Tensor> col_offsets_ih, Rcpp::XPtr<torch::Tensor> col_offsets_hh, SEXP scale_ih, SEXP scale_hh, SEXP zero_point_ih, SEXP zero_point_hh) {
     auto r_out = torch::quantized_rnn_relu_cell(*input, *hx, *w_ih, *w_hh, *b_ih, *b_hh, *packed_ih, *packed_hh, *col_offsets_ih, *col_offsets_hh, scalar_from_r_(scale_ih), scalar_from_r_(scale_hh), scalar_from_r_(zero_point_ih), scalar_from_r_(zero_point_hh));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_quantized_rnn_tanh_cell_52998 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<torch::Tensor> w_ih, Rcpp::XPtr<torch::Tensor> w_hh, Rcpp::XPtr<torch::Tensor> b_ih, Rcpp::XPtr<torch::Tensor> b_hh, Rcpp::XPtr<torch::Tensor> packed_ih, Rcpp::XPtr<torch::Tensor> packed_hh, Rcpp::XPtr<torch::Tensor> col_offsets_ih, Rcpp::XPtr<torch::Tensor> col_offsets_hh, SEXP scale_ih, SEXP scale_hh, SEXP zero_point_ih, SEXP zero_point_hh) {
     auto r_out = torch::quantized_rnn_tanh_cell(*input, *hx, *w_ih, *w_hh, *b_ih, *b_hh, *packed_ih, *packed_hh, *col_offsets_ih, *col_offsets_hh, scalar_from_r_(scale_ih), scalar_from_r_(scale_hh), scalar_from_r_(zero_point_ih), scalar_from_r_(zero_point_hh));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch__pack_padded_sequence_76346 (Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> lengths, bool batch_first) {
     auto r_out = torch::_pack_padded_sequence(*input, *lengths, batch_first);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__pack_padded_sequence_backward_f0028 (Rcpp::XPtr<torch::Tensor> grad, std::vector<std::int64_t> input_size, Rcpp::XPtr<torch::Tensor> batch_sizes, bool batch_first) {
     auto r_out = torch::_pack_padded_sequence_backward(*grad, input_size, *batch_sizes, batch_first);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch__pad_packed_sequence_b9701 (Rcpp::XPtr<torch::Tensor> data, Rcpp::XPtr<torch::Tensor> batch_sizes, bool batch_first, SEXP padding_value, int64_t total_length) {
     auto r_out = torch::_pad_packed_sequence(*data, *batch_sizes, batch_first, scalar_from_r_(padding_value), total_length);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_masked_fill_41dc9 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, SEXP value) {
     auto r_out = torch::masked_fill(*self, *mask, scalar_from_r_(value));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_masked_fill_c4aae (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, Rcpp::XPtr<torch::Tensor> value) {
     auto r_out = torch::masked_fill(*self, *mask, *value);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_masked_scatter_1769c (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, Rcpp::XPtr<torch::Tensor> source) {
     auto r_out = torch::masked_scatter(*self, *mask, *source);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_index_add_073fd (Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source) {
     auto r_out = torch::index_add(*self, dim, *index, *source);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_index_add_4adc4 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source) {
     auto r_out = torch::index_add(*self, *dim, *index, *source);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_index_fill_6e723 (Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, SEXP value) {
     auto r_out = torch::index_fill(*self, dim, *index, scalar_from_r_(value));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_index_fill_d4b97 (Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> value) {
     auto r_out = torch::index_fill(*self, dim, *index, *value);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_index_fill_3f1f4 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, SEXP value) {
     auto r_out = torch::index_fill(*self, *dim, *index, scalar_from_r_(value));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_index_fill_88d1e (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> value) {
     auto r_out = torch::index_fill(*self, *dim, *index, *value);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_scatter_e1a84 (Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> src) {
     auto r_out = torch::scatter(*self, dim, *index, *src);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_scatter_6e723 (Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, SEXP value) {
     auto r_out = torch::scatter(*self, dim, *index, scalar_from_r_(value));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_scatter_17db5 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> src) {
     auto r_out = torch::scatter(*self, *dim, *index, *src);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_scatter_3f1f4 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, SEXP value) {
     auto r_out = torch::scatter(*self, *dim, *index, scalar_from_r_(value));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_scatter_add_e1a84 (Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> src) {
     auto r_out = torch::scatter_add(*self, dim, *index, *src);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_scatter_add_17db5 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> src) {
     auto r_out = torch::scatter_add(*self, *dim, *index, *src);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch___and___828c7 (Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::__and__(*self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch___and___7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::__and__(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch___or___828c7 (Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::__or__(*self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch___or___7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::__or__(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch___xor___828c7 (Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::__xor__(*self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch___xor___7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::__xor__(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch___lshift___828c7 (Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::__lshift__(*self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch___lshift___7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::__lshift__(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch___rshift___828c7 (Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::__rshift__(*self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch___rshift___7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::__rshift__(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_addbmm_out_b5181 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, SEXP beta, SEXP alpha) {
     auto r_out = torch::addbmm_out(*out, *self, *batch1, *batch2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_addbmm_f084a (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, SEXP beta, SEXP alpha) {
     auto r_out = torch::addbmm(*self, *batch1, *batch2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_diag_out_01c8a (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t diagonal) {
     auto r_out = torch::diag_out(*out, *self, diagonal);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_diag_3f182 (Rcpp::XPtr<torch::Tensor> self, int64_t diagonal) {
     auto r_out = torch::diag(*self, diagonal);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cross_out_db31f (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, Rcpp::Nullable<int64_t> dim) {
     auto r_out = torch::cross_out(*out, *self, *other, resolve_null_argument(dim));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cross_b8c42 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, Rcpp::Nullable<int64_t> dim) {
     auto r_out = torch::cross(*self, *other, resolve_null_argument(dim));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_triu_out_01c8a (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t diagonal) {
     auto r_out = torch::triu_out(*out, *self, diagonal);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_triu_3f182 (Rcpp::XPtr<torch::Tensor> self, int64_t diagonal) {
     auto r_out = torch::triu(*self, diagonal);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_tril_out_01c8a (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t diagonal) {
     auto r_out = torch::tril_out(*out, *self, diagonal);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_tril_3f182 (Rcpp::XPtr<torch::Tensor> self, int64_t diagonal) {
     auto r_out = torch::tril(*self, diagonal);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_tril_indices_578b8 (int64_t row, int64_t col, int64_t offset, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::tril_indices(row, col, offset, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_triu_indices_578b8 (int64_t row, int64_t col, int64_t offset, Rcpp::XPtr<torch::TensorOptions> options) {
     auto r_out = torch::triu_indices(row, col, offset, *options);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_trace_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::trace(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ne_out_a4fe6 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::ne_out(*out, *self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ne_828c7 (Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::ne(*self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ne_out_b81ca (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::ne_out(*out, *self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ne_7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::ne(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_eq_out_a4fe6 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::eq_out(*out, *self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_eq_828c7 (Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::eq(*self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_eq_out_b81ca (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::eq_out(*out, *self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_eq_7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::eq(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ge_out_a4fe6 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::ge_out(*out, *self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ge_828c7 (Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::ge(*self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ge_out_b81ca (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::ge_out(*out, *self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ge_7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::ge(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_le_out_a4fe6 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::le_out(*out, *self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_le_828c7 (Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::le(*self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_le_out_b81ca (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::le_out(*out, *self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_le_7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::le(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_gt_out_a4fe6 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::gt_out(*out, *self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_gt_828c7 (Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::gt(*self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_gt_out_b81ca (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::gt_out(*out, *self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_gt_7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::gt(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_lt_out_a4fe6 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::lt_out(*out, *self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_lt_828c7 (Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::lt(*self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_lt_out_b81ca (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::lt_out(*out, *self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_lt_7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::lt(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_take_out_14017 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> index) {
     auto r_out = torch::take_out(*out, *self, *index);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_take_318ca (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> index) {
     auto r_out = torch::take(*self, *index);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_index_select_out_66619 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index) {
     auto r_out = torch::index_select_out(*out, *self, dim, *index);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_index_select_bb12d (Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index) {
     auto r_out = torch::index_select(*self, dim, *index);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_index_select_out_a5a32 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index) {
     auto r_out = torch::index_select_out(*out, *self, *dim, *index);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_index_select_934d2 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index) {
     auto r_out = torch::index_select(*self, *dim, *index);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_masked_select_out_0cc0b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask) {
     auto r_out = torch::masked_select_out(*out, *self, *mask);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_masked_select_ed5bb (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask) {
     auto r_out = torch::masked_select(*self, *mask);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_nonzero_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::nonzero_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_nonzero_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::nonzero(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_nonzero_numpy_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::nonzero_numpy(*self);
 Rcpp::List v;

 for (int i = 0; i < r_out.size(); ++i) {
  v.push_back(make_tensor_ptr(r_out[i]));
 }

 return v;
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_gather_out_09215 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, bool sparse_grad) {
     auto r_out = torch::gather_out(*out, *self, dim, *index, sparse_grad);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_gather_15abb (Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, bool sparse_grad) {
     auto r_out = torch::gather(*self, dim, *index, sparse_grad);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_gather_out_8dd89 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, bool sparse_grad) {
     auto r_out = torch::gather_out(*out, *self, *dim, *index, sparse_grad);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_gather_3a469 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, bool sparse_grad) {
     auto r_out = torch::gather(*self, *dim, *index, sparse_grad);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__gather_sparse_backward_ff64e (Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> grad) {
     auto r_out = torch::_gather_sparse_backward(*self, dim, *index, *grad);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_addcmul_out_19de2 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, SEXP value) {
     auto r_out = torch::addcmul_out(*out, *self, *tensor1, *tensor2, scalar_from_r_(value));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_addcmul_60f23 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, SEXP value) {
     auto r_out = torch::addcmul(*self, *tensor1, *tensor2, scalar_from_r_(value));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_addcdiv_out_19de2 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, SEXP value) {
     auto r_out = torch::addcdiv_out(*out, *self, *tensor1, *tensor2, scalar_from_r_(value));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_addcdiv_60f23 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, SEXP value) {
     auto r_out = torch::addcdiv(*self, *tensor1, *tensor2, scalar_from_r_(value));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_lstsq_out_ac889 (Rcpp::XPtr<torch::Tensor> X, Rcpp::XPtr<torch::Tensor> qr, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A) {
     auto r_out = torch::lstsq_out(*X, *qr, *self, *A);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_lstsq_681b4 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A) {
     auto r_out = torch::lstsq(*self, *A);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_triangular_solve_out_8c443 (Rcpp::XPtr<torch::Tensor> X, Rcpp::XPtr<torch::Tensor> M, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A, bool upper, bool transpose, bool unitriangular) {
     auto r_out = torch::triangular_solve_out(*X, *M, *self, *A, upper, transpose, unitriangular);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_triangular_solve_95047 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A, bool upper, bool transpose, bool unitriangular) {
     auto r_out = torch::triangular_solve(*self, *A, upper, transpose, unitriangular);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__triangular_solve_helper_95047 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A, bool upper, bool transpose, bool unitriangular) {
     auto r_out = torch::_triangular_solve_helper(*self, *A, upper, transpose, unitriangular);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_symeig_out_3507f (Rcpp::XPtr<torch::Tensor> e, Rcpp::XPtr<torch::Tensor> V, Rcpp::XPtr<torch::Tensor> self, bool eigenvectors, bool upper) {
     auto r_out = torch::symeig_out(*e, *V, *self, eigenvectors, upper);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_symeig_91755 (Rcpp::XPtr<torch::Tensor> self, bool eigenvectors, bool upper) {
     auto r_out = torch::symeig(*self, eigenvectors, upper);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__symeig_helper_91755 (Rcpp::XPtr<torch::Tensor> self, bool eigenvectors, bool upper) {
     auto r_out = torch::_symeig_helper(*self, eigenvectors, upper);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_eig_out_b1470 (Rcpp::XPtr<torch::Tensor> e, Rcpp::XPtr<torch::Tensor> v, Rcpp::XPtr<torch::Tensor> self, bool eigenvectors) {
     auto r_out = torch::eig_out(*e, *v, *self, eigenvectors);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_eig_1d467 (Rcpp::XPtr<torch::Tensor> self, bool eigenvectors) {
     auto r_out = torch::eig(*self, eigenvectors);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_svd_out_81804 (Rcpp::XPtr<torch::Tensor> U, Rcpp::XPtr<torch::Tensor> S, Rcpp::XPtr<torch::Tensor> V, Rcpp::XPtr<torch::Tensor> self, bool some, bool compute_uv) {
     auto r_out = torch::svd_out(*U, *S, *V, *self, some, compute_uv);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_svd_2f217 (Rcpp::XPtr<torch::Tensor> self, bool some, bool compute_uv) {
     auto r_out = torch::svd(*self, some, compute_uv);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__svd_helper_2f217 (Rcpp::XPtr<torch::Tensor> self, bool some, bool compute_uv) {
     auto r_out = torch::_svd_helper(*self, some, compute_uv);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cholesky_out_6ca28 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, bool upper) {
     auto r_out = torch::cholesky_out(*out, *self, upper);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cholesky_5af1d (Rcpp::XPtr<torch::Tensor> self, bool upper) {
     auto r_out = torch::cholesky(*self, upper);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__cholesky_helper_5af1d (Rcpp::XPtr<torch::Tensor> self, bool upper) {
     auto r_out = torch::_cholesky_helper(*self, upper);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cholesky_solve_out_21ada (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input2, bool upper) {
     auto r_out = torch::cholesky_solve_out(*out, *self, *input2, upper);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cholesky_solve_025df (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input2, bool upper) {
     auto r_out = torch::cholesky_solve(*self, *input2, upper);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__cholesky_solve_helper_f8ad3 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A, bool upper) {
     auto r_out = torch::_cholesky_solve_helper(*self, *A, upper);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_solve_681b4 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A) {
     auto r_out = torch::solve(*self, *A);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_solve_out_e22fc (Rcpp::XPtr<torch::Tensor> solution, Rcpp::XPtr<torch::Tensor> lu, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A) {
     auto r_out = torch::solve_out(*solution, *lu, *self, *A);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__solve_helper_681b4 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A) {
     auto r_out = torch::_solve_helper(*self, *A);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cholesky_inverse_out_6ca28 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, bool upper) {
     auto r_out = torch::cholesky_inverse_out(*out, *self, upper);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_cholesky_inverse_5af1d (Rcpp::XPtr<torch::Tensor> self, bool upper) {
     auto r_out = torch::cholesky_inverse(*self, upper);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_qr_out_b44c1 (Rcpp::XPtr<torch::Tensor> Q, Rcpp::XPtr<torch::Tensor> R, Rcpp::XPtr<torch::Tensor> self, bool some) {
     auto r_out = torch::qr_out(*Q, *R, *self, some);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_qr_c6565 (Rcpp::XPtr<torch::Tensor> self, bool some) {
     auto r_out = torch::qr(*self, some);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__qr_helper_c6565 (Rcpp::XPtr<torch::Tensor> self, bool some) {
     auto r_out = torch::_qr_helper(*self, some);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_geqrf_out_1aa05 (Rcpp::XPtr<torch::Tensor> a, Rcpp::XPtr<torch::Tensor> tau, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::geqrf_out(*a, *tau, *self);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_geqrf_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::geqrf(*self);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_orgqr_out_bc675 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input2) {
     auto r_out = torch::orgqr_out(*out, *self, *input2);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_orgqr_ba407 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input2) {
     auto r_out = torch::orgqr(*self, *input2);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ormqr_out_d41b8 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input2, Rcpp::XPtr<torch::Tensor> input3, bool left, bool transpose) {
     auto r_out = torch::ormqr_out(*out, *self, *input2, *input3, left, transpose);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_ormqr_64c98 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input2, Rcpp::XPtr<torch::Tensor> input3, bool left, bool transpose) {
     auto r_out = torch::ormqr(*self, *input2, *input3, left, transpose);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch__lu_with_info_58382 (Rcpp::XPtr<torch::Tensor> self, bool pivot, bool check_errors) {
     auto r_out = torch::_lu_with_info(*self, pivot, check_errors);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_lu_solve_out_f3bbf (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> LU_data, Rcpp::XPtr<torch::Tensor> LU_pivots) {
     auto r_out = torch::lu_solve_out(*out, *self, *LU_data, *LU_pivots);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_lu_solve_1b393 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> LU_data, Rcpp::XPtr<torch::Tensor> LU_pivots) {
     auto r_out = torch::lu_solve(*self, *LU_data, *LU_pivots);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__lu_solve_helper_1b393 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> LU_data, Rcpp::XPtr<torch::Tensor> LU_pivots) {
     auto r_out = torch::_lu_solve_helper(*self, *LU_data, *LU_pivots);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_multinomial_out_1926b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t num_samples, bool replacement, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::multinomial_out(*out, *self, num_samples, replacement, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_multinomial_58a43 (Rcpp::XPtr<torch::Tensor> self, int64_t num_samples, bool replacement, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::multinomial(*self, num_samples, replacement, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch__multinomial_alias_setup_be54d (Rcpp::XPtr<torch::Tensor> probs) {
     auto r_out = torch::_multinomial_alias_setup(*probs);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__multinomial_alias_draw_7242e (Rcpp::XPtr<torch::Tensor> J, Rcpp::XPtr<torch::Tensor> q, int64_t num_samples, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::_multinomial_alias_draw(*J, *q, num_samples, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_lgamma_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::lgamma_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_lgamma_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::lgamma(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_digamma_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::digamma_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_digamma_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::digamma(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_polygamma_out_6ca57 (Rcpp::XPtr<torch::Tensor> out, int64_t n, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::polygamma_out(*out, n, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_polygamma_a2138 (int64_t n, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::polygamma(n, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_erfinv_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::erfinv(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_erfinv_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::erfinv_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sign_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::sign(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sign_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::sign_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_dist_d0359 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, SEXP p) {
     auto r_out = torch::dist(*self, *other, scalar_from_r_(p));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_atan2_out_b81ca (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::atan2_out(*out, *self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_atan2_7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::atan2(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_lerp_out_75d62 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> end, SEXP weight) {
     auto r_out = torch::lerp_out(*out, *self, *end, scalar_from_r_(weight));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_lerp_out_ae717 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> end, Rcpp::XPtr<torch::Tensor> weight) {
     auto r_out = torch::lerp_out(*out, *self, *end, *weight);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_lerp_52119 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> end, SEXP weight) {
     auto r_out = torch::lerp(*self, *end, scalar_from_r_(weight));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_lerp_07603 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> end, Rcpp::XPtr<torch::Tensor> weight) {
     auto r_out = torch::lerp(*self, *end, *weight);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_histc_out_32618 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t bins, SEXP min, SEXP max) {
     auto r_out = torch::histc_out(*out, *self, bins, scalar_from_r_(min), scalar_from_r_(max));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_histc_bff66 (Rcpp::XPtr<torch::Tensor> self, int64_t bins, SEXP min, SEXP max) {
     auto r_out = torch::histc(*self, bins, scalar_from_r_(min), scalar_from_r_(max));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fmod_out_a4fe6 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::fmod_out(*out, *self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fmod_828c7 (Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::fmod(*self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fmod_out_b81ca (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::fmod_out(*out, *self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fmod_7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::fmod(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_remainder_out_a4fe6 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::remainder_out(*out, *self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_remainder_828c7 (Rcpp::XPtr<torch::Tensor> self, SEXP other) {
     auto r_out = torch::remainder(*self, scalar_from_r_(other));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_remainder_out_b81ca (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::remainder_out(*out, *self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_remainder_7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::remainder(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_min_out_b81ca (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::min_out(*out, *self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_min_7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::min(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_min_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::min(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_out_b81ca (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::max_out(*out, *self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::max(*self, *other);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::max(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_median_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::median(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_sort_out_c1c65 (Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool descending) {
     auto r_out = torch::sort_out(*values, *indices, *self, dim, descending);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_sort_52a2a (Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool descending) {
     auto r_out = torch::sort(*self, dim, descending);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_sort_out_ae1a6 (Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool descending) {
     auto r_out = torch::sort_out(*values, *indices, *self, *dim, descending);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_sort_48a5c (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool descending) {
     auto r_out = torch::sort(*self, *dim, descending);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_argsort_52a2a (Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool descending) {
     auto r_out = torch::argsort(*self, dim, descending);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_argsort_48a5c (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool descending) {
     auto r_out = torch::argsort(*self, *dim, descending);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_topk_out_93aba (Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, int64_t k, int64_t dim, bool largest, bool sorted) {
     auto r_out = torch::topk_out(*values, *indices, *self, k, dim, largest, sorted);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_topk_92a7e (Rcpp::XPtr<torch::Tensor> self, int64_t k, int64_t dim, bool largest, bool sorted) {
     auto r_out = torch::topk(*self, k, dim, largest, sorted);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_all_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::all(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_any_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::any(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_renorm_out_a600b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP p, int64_t dim, SEXP maxnorm) {
     auto r_out = torch::renorm_out(*out, *self, scalar_from_r_(p), dim, scalar_from_r_(maxnorm));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_renorm_56a4a (Rcpp::XPtr<torch::Tensor> self, SEXP p, int64_t dim, SEXP maxnorm) {
     auto r_out = torch::renorm(*self, scalar_from_r_(p), dim, scalar_from_r_(maxnorm));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    bool tch_equal_7f12b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other) {
     auto r_out = torch::equal(*self, *other);
return r_out;
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_pow_out_d3a90 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> exponent) {
     auto r_out = torch::pow_out(*out, *self, *exponent);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_pow_b69e0 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> exponent) {
     auto r_out = torch::pow(*self, *exponent);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_pow_out_d1ab7 (Rcpp::XPtr<torch::Tensor> out, SEXP self, Rcpp::XPtr<torch::Tensor> exponent) {
     auto r_out = torch::pow_out(*out, scalar_from_r_(self), *exponent);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_pow_5ea06 (SEXP self, Rcpp::XPtr<torch::Tensor> exponent) {
     auto r_out = torch::pow(scalar_from_r_(self), *exponent);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_normal_out_4989d (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> mean, double std, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::normal_out(*out, *mean, std, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_normal_out_53b99 (Rcpp::XPtr<torch::Tensor> out, double mean, Rcpp::XPtr<torch::Tensor> std, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::normal_out(*out, mean, *std, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_normal_out_fc066 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> mean, Rcpp::XPtr<torch::Tensor> std, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::normal_out(*out, *mean, *std, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_normal_out_3f667 (Rcpp::XPtr<torch::Tensor> out, double mean, double std, std::vector<std::int64_t> size, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::normal_out(*out, mean, std, size, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_alias_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::alias(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__addr_ab5fb (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec1, Rcpp::XPtr<torch::Tensor> vec2, SEXP beta, SEXP alpha) {
     auto r_out = torch::_addr(*self, *vec1, *vec2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__addr__d04ad (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec1, Rcpp::XPtr<torch::Tensor> vec2, SEXP beta, SEXP alpha) {
     auto r_out = torch::_addr_(*self, *vec1, *vec2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__addr_out_7b100 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec1, Rcpp::XPtr<torch::Tensor> vec2, SEXP beta, SEXP alpha) {
     auto r_out = torch::_addr_out(*out, *self, *vec1, *vec2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__index_copy__0be46 (Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source) {
     auto r_out = torch::_index_copy_(*self, dim, *index, *source);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__cumsum_ec971 (Rcpp::XPtr<torch::Tensor> self, int64_t dim) {
     auto r_out = torch::_cumsum(*self, dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__cumsum_out_f78f0 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim) {
     auto r_out = torch::_cumsum_out(*out, *self, dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__cumprod_ec971 (Rcpp::XPtr<torch::Tensor> self, int64_t dim) {
     auto r_out = torch::_cumprod(*self, dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__cumprod_out_f78f0 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim) {
     auto r_out = torch::_cumprod_out(*out, *self, dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__var_26862 (Rcpp::XPtr<torch::Tensor> self, bool unbiased) {
     auto r_out = torch::_var(*self, unbiased);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__std_26862 (Rcpp::XPtr<torch::Tensor> self, bool unbiased) {
     auto r_out = torch::_std(*self, unbiased);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__cat_55ff1 (Rcpp::List tensors, int64_t dim) {
     auto r_out = torch::_cat(tensor_list_from_r_(tensors), dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__cat_out_52c09 (Rcpp::XPtr<torch::Tensor> out, Rcpp::List tensors, int64_t dim) {
     auto r_out = torch::_cat_out(*out, tensor_list_from_r_(tensors), dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch__mode_a00d6 (Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim) {
     auto r_out = torch::_mode(*self, dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__mode_out_3f290 (Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim) {
     auto r_out = torch::_mode_out(*values, *indices, *self, dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__max_a00d6 (Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim) {
     auto r_out = torch::_max(*self, dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__max_out_90de3 (Rcpp::XPtr<torch::Tensor> max, Rcpp::XPtr<torch::Tensor> max_indices, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim) {
     auto r_out = torch::_max_out(*max, *max_indices, *self, dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__min_a00d6 (Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim) {
     auto r_out = torch::_min(*self, dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch__min_out_94872 (Rcpp::XPtr<torch::Tensor> min, Rcpp::XPtr<torch::Tensor> min_indices, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim) {
     auto r_out = torch::_min_out(*min, *min_indices, *self, dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_binary_cross_entropy_out_0ca7e (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction) {
     auto r_out = torch::binary_cross_entropy_out(*out, *self, *target, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_binary_cross_entropy_bcb2b (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction) {
     auto r_out = torch::binary_cross_entropy(*self, *target, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_binary_cross_entropy_backward_out_59b56 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction) {
     auto r_out = torch::binary_cross_entropy_backward_out(*grad_input, *grad_output, *self, *target, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_binary_cross_entropy_backward_fc946 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction) {
     auto r_out = torch::binary_cross_entropy_backward(*grad_output, *self, *target, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mse_loss_out_07e2f (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::mse_loss_out(*out, *self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mse_loss_227af (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::mse_loss(*self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mse_loss_backward_out_4bd8d (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::mse_loss_backward_out(*grad_input, *grad_output, *self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mse_loss_backward_13cf8 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::mse_loss_backward(*grad_output, *self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_l1_loss_out_07e2f (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::l1_loss_out(*out, *self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_l1_loss_227af (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::l1_loss(*self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_l1_loss_backward_out_4bd8d (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::l1_loss_backward_out(*grad_input, *grad_output, *self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_l1_loss_backward_13cf8 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::l1_loss_backward(*grad_output, *self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_multi_margin_loss_out_fa5c0 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, SEXP p, SEXP margin, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction) {
     auto r_out = torch::multi_margin_loss_out(*out, *self, *target, scalar_from_r_(p), scalar_from_r_(margin), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_multi_margin_loss_c6a83 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, SEXP p, SEXP margin, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction) {
     auto r_out = torch::multi_margin_loss(*self, *target, scalar_from_r_(p), scalar_from_r_(margin), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_multi_margin_loss_backward_out_99cfe (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, SEXP p, SEXP margin, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction) {
     auto r_out = torch::multi_margin_loss_backward_out(*grad_input, *grad_output, *self, *target, scalar_from_r_(p), scalar_from_r_(margin), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_multi_margin_loss_backward_14b2c (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, SEXP p, SEXP margin, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction) {
     auto r_out = torch::multi_margin_loss_backward(*grad_output, *self, *target, scalar_from_r_(p), scalar_from_r_(margin), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_multilabel_margin_loss_out_07e2f (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::multilabel_margin_loss_out(*out, *self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_multilabel_margin_loss_227af (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::multilabel_margin_loss(*self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_multilabel_margin_loss_forward_out_b7be8 (Rcpp::XPtr<torch::Tensor> output, Rcpp::XPtr<torch::Tensor> is_target, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::multilabel_margin_loss_forward_out(*output, *is_target, *self, *target, reduction);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_multilabel_margin_loss_forward_227af (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::multilabel_margin_loss_forward(*self, *target, reduction);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_multilabel_margin_loss_backward_out_a404a (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction, Rcpp::XPtr<torch::Tensor> is_target) {
     auto r_out = torch::multilabel_margin_loss_backward_out(*grad_input, *grad_output, *self, *target, reduction, *is_target);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_multilabel_margin_loss_backward_68c61 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction, Rcpp::XPtr<torch::Tensor> is_target) {
     auto r_out = torch::multilabel_margin_loss_backward(*grad_output, *self, *target, reduction, *is_target);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_nll_loss_out_1e163 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction, int64_t ignore_index) {
     auto r_out = torch::nll_loss_out(*out, *self, *target, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction, ignore_index);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_nll_loss_45e2a (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction, int64_t ignore_index) {
     auto r_out = torch::nll_loss(*self, *target, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction, ignore_index);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_nll_loss_forward_out_3057a (Rcpp::XPtr<torch::Tensor> output, Rcpp::XPtr<torch::Tensor> total_weight, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction, int64_t ignore_index) {
     auto r_out = torch::nll_loss_forward_out(*output, *total_weight, *self, *target, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction, ignore_index);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_nll_loss_forward_45e2a (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction, int64_t ignore_index) {
     auto r_out = torch::nll_loss_forward(*self, *target, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction, ignore_index);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_nll_loss_backward_out_32f37 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction, int64_t ignore_index, Rcpp::XPtr<torch::Tensor> total_weight) {
     auto r_out = torch::nll_loss_backward_out(*grad_input, *grad_output, *self, *target, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction, ignore_index, *total_weight);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_nll_loss_backward_752ff (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction, int64_t ignore_index, Rcpp::XPtr<torch::Tensor> total_weight) {
     auto r_out = torch::nll_loss_backward(*grad_output, *self, *target, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction, ignore_index, *total_weight);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_nll_loss2d_out_1e163 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction, int64_t ignore_index) {
     auto r_out = torch::nll_loss2d_out(*out, *self, *target, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction, ignore_index);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_nll_loss2d_45e2a (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction, int64_t ignore_index) {
     auto r_out = torch::nll_loss2d(*self, *target, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction, ignore_index);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_nll_loss2d_forward_out_3057a (Rcpp::XPtr<torch::Tensor> output, Rcpp::XPtr<torch::Tensor> total_weight, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction, int64_t ignore_index) {
     auto r_out = torch::nll_loss2d_forward_out(*output, *total_weight, *self, *target, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction, ignore_index);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_nll_loss2d_forward_45e2a (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction, int64_t ignore_index) {
     auto r_out = torch::nll_loss2d_forward(*self, *target, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction, ignore_index);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_nll_loss2d_backward_out_32f37 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction, int64_t ignore_index, Rcpp::XPtr<torch::Tensor> total_weight) {
     auto r_out = torch::nll_loss2d_backward_out(*grad_input, *grad_output, *self, *target, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction, ignore_index, *total_weight);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_nll_loss2d_backward_752ff (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weight, int64_t reduction, int64_t ignore_index, Rcpp::XPtr<torch::Tensor> total_weight) {
     auto r_out = torch::nll_loss2d_backward(*grad_output, *self, *target, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weight), reduction, ignore_index, *total_weight);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_smooth_l1_loss_out_07e2f (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::smooth_l1_loss_out(*out, *self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_smooth_l1_loss_227af (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::smooth_l1_loss(*self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_smooth_l1_loss_backward_out_4bd8d (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::smooth_l1_loss_backward_out(*grad_input, *grad_output, *self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_smooth_l1_loss_backward_13cf8 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::smooth_l1_loss_backward(*grad_output, *self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_soft_margin_loss_out_07e2f (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::soft_margin_loss_out(*out, *self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_soft_margin_loss_227af (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::soft_margin_loss(*self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_soft_margin_loss_backward_out_4bd8d (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::soft_margin_loss_backward_out(*grad_input, *grad_output, *self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_soft_margin_loss_backward_13cf8 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction) {
     auto r_out = torch::soft_margin_loss_backward(*grad_output, *self, *target, reduction);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_elu_out_5031b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP alpha, SEXP scale, SEXP input_scale) {
     auto r_out = torch::elu_out(*out, *self, scalar_from_r_(alpha), scalar_from_r_(scale), scalar_from_r_(input_scale));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_elu_ea54b (Rcpp::XPtr<torch::Tensor> self, SEXP alpha, SEXP scale, SEXP input_scale) {
     auto r_out = torch::elu(*self, scalar_from_r_(alpha), scalar_from_r_(scale), scalar_from_r_(input_scale));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_elu_backward_out_ed16a (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, SEXP alpha, SEXP scale, SEXP input_scale, Rcpp::XPtr<torch::Tensor> output) {
     auto r_out = torch::elu_backward_out(*grad_input, *grad_output, scalar_from_r_(alpha), scalar_from_r_(scale), scalar_from_r_(input_scale), *output);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_elu_backward_d8675 (Rcpp::XPtr<torch::Tensor> grad_output, SEXP alpha, SEXP scale, SEXP input_scale, Rcpp::XPtr<torch::Tensor> output) {
     auto r_out = torch::elu_backward(*grad_output, scalar_from_r_(alpha), scalar_from_r_(scale), scalar_from_r_(input_scale), *output);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_elu__4637a (Rcpp::XPtr<torch::Tensor> self, SEXP alpha, SEXP scale, SEXP input_scale) {
     auto r_out = torch::elu_(*self, scalar_from_r_(alpha), scalar_from_r_(scale), scalar_from_r_(input_scale));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_glu_out_f78f0 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim) {
     auto r_out = torch::glu_out(*out, *self, dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_glu_ec971 (Rcpp::XPtr<torch::Tensor> self, int64_t dim) {
     auto r_out = torch::glu(*self, dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_glu_backward_out_7b716 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, int64_t dim) {
     auto r_out = torch::glu_backward_out(*grad_input, *grad_output, *self, dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_glu_backward_1b7fc (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, int64_t dim) {
     auto r_out = torch::glu_backward(*grad_output, *self, dim);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_hardtanh_out_91c21 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP min_val, SEXP max_val) {
     auto r_out = torch::hardtanh_out(*out, *self, scalar_from_r_(min_val), scalar_from_r_(max_val));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_hardtanh_3ce26 (Rcpp::XPtr<torch::Tensor> self, SEXP min_val, SEXP max_val) {
     auto r_out = torch::hardtanh(*self, scalar_from_r_(min_val), scalar_from_r_(max_val));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_hardtanh_backward_out_39caf (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, SEXP min_val, SEXP max_val) {
     auto r_out = torch::hardtanh_backward_out(*grad_input, *grad_output, *self, scalar_from_r_(min_val), scalar_from_r_(max_val));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_hardtanh_backward_35d89 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, SEXP min_val, SEXP max_val) {
     auto r_out = torch::hardtanh_backward(*grad_output, *self, scalar_from_r_(min_val), scalar_from_r_(max_val));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_hardtanh__6fcc3 (Rcpp::XPtr<torch::Tensor> self, SEXP min_val, SEXP max_val) {
     auto r_out = torch::hardtanh_(*self, scalar_from_r_(min_val), scalar_from_r_(max_val));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_leaky_relu_out_1c203 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP negative_slope) {
     auto r_out = torch::leaky_relu_out(*out, *self, scalar_from_r_(negative_slope));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_leaky_relu_04257 (Rcpp::XPtr<torch::Tensor> self, SEXP negative_slope) {
     auto r_out = torch::leaky_relu(*self, scalar_from_r_(negative_slope));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_leaky_relu_backward_out_6044d (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, SEXP negative_slope) {
     auto r_out = torch::leaky_relu_backward_out(*grad_input, *grad_output, *self, scalar_from_r_(negative_slope));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_leaky_relu_backward_16f1b (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, SEXP negative_slope) {
     auto r_out = torch::leaky_relu_backward(*grad_output, *self, scalar_from_r_(negative_slope));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_leaky_relu__cae58 (Rcpp::XPtr<torch::Tensor> self, SEXP negative_slope) {
     auto r_out = torch::leaky_relu_(*self, scalar_from_r_(negative_slope));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_log_sigmoid_out_a719b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::log_sigmoid_out(*out, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_log_sigmoid_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::log_sigmoid(*self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_log_sigmoid_forward_out_8338c (Rcpp::XPtr<torch::Tensor> output, Rcpp::XPtr<torch::Tensor> buffer, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::log_sigmoid_forward_out(*output, *buffer, *self);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_log_sigmoid_forward_68396 (Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::log_sigmoid_forward(*self);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_log_sigmoid_backward_out_cf65e (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> buffer) {
     auto r_out = torch::log_sigmoid_backward_out(*grad_input, *grad_output, *self, *buffer);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_log_sigmoid_backward_46e1f (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> buffer) {
     auto r_out = torch::log_sigmoid_backward(*grad_output, *self, *buffer);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rrelu_with_noise_out_b207a (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> noise, SEXP lower, SEXP upper, bool training, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::rrelu_with_noise_out(*out, *self, *noise, scalar_from_r_(lower), scalar_from_r_(upper), training, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rrelu_with_noise_39943 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> noise, SEXP lower, SEXP upper, bool training, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::rrelu_with_noise(*self, *noise, scalar_from_r_(lower), scalar_from_r_(upper), training, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rrelu_with_noise_backward_out_2af1e (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> noise, SEXP lower, SEXP upper, bool training) {
     auto r_out = torch::rrelu_with_noise_backward_out(*grad_input, *grad_output, *self, *noise, scalar_from_r_(lower), scalar_from_r_(upper), training);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rrelu_with_noise_backward_f3ffb (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> noise, SEXP lower, SEXP upper, bool training) {
     auto r_out = torch::rrelu_with_noise_backward(*grad_output, *self, *noise, scalar_from_r_(lower), scalar_from_r_(upper), training);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_rrelu_with_noise__7b3e9 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> noise, SEXP lower, SEXP upper, bool training, Rcpp::XPtr<torch::Generator *> generator) {
     auto r_out = torch::rrelu_with_noise_(*self, *noise, scalar_from_r_(lower), scalar_from_r_(upper), training, *generator);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_softplus_out_6d0a3 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP beta, SEXP threshold) {
     auto r_out = torch::softplus_out(*out, *self, scalar_from_r_(beta), scalar_from_r_(threshold));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_softplus_f036c (Rcpp::XPtr<torch::Tensor> self, SEXP beta, SEXP threshold) {
     auto r_out = torch::softplus(*self, scalar_from_r_(beta), scalar_from_r_(threshold));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_softplus_backward_out_1c265 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, SEXP beta, SEXP threshold, Rcpp::XPtr<torch::Tensor> output) {
     auto r_out = torch::softplus_backward_out(*grad_input, *grad_output, *self, scalar_from_r_(beta), scalar_from_r_(threshold), *output);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_softplus_backward_83bed (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, SEXP beta, SEXP threshold, Rcpp::XPtr<torch::Tensor> output) {
     auto r_out = torch::softplus_backward(*grad_output, *self, scalar_from_r_(beta), scalar_from_r_(threshold), *output);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_softshrink_out_eda0a (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, SEXP lambd) {
     auto r_out = torch::softshrink_out(*out, *self, scalar_from_r_(lambd));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_softshrink_899d6 (Rcpp::XPtr<torch::Tensor> self, SEXP lambd) {
     auto r_out = torch::softshrink(*self, scalar_from_r_(lambd));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_softshrink_backward_out_c43a7 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, SEXP lambd) {
     auto r_out = torch::softshrink_backward_out(*grad_input, *grad_output, *self, scalar_from_r_(lambd));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_softshrink_backward_bd49a (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, SEXP lambd) {
     auto r_out = torch::softshrink_backward(*grad_output, *self, scalar_from_r_(lambd));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_adaptive_avg_pool2d_out_0d3cb (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size) {
     auto r_out = torch::adaptive_avg_pool2d_out(*out, *self, output_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_adaptive_avg_pool2d_e0cae (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size) {
     auto r_out = torch::adaptive_avg_pool2d(*self, output_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_mkldnn_adaptive_avg_pool2d_e0cae (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size) {
     auto r_out = torch::mkldnn_adaptive_avg_pool2d(*self, output_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__adaptive_avg_pool2d_e0cae (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size) {
     auto r_out = torch::_adaptive_avg_pool2d(*self, output_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch__adaptive_avg_pool2d_backward_b9ba0 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::_adaptive_avg_pool2d_backward(*grad_output, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_adaptive_avg_pool3d_out_0d3cb (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size) {
     auto r_out = torch::adaptive_avg_pool3d_out(*out, *self, output_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_adaptive_avg_pool3d_e0cae (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size) {
     auto r_out = torch::adaptive_avg_pool3d(*self, output_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_adaptive_avg_pool3d_backward_out_646ea (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::adaptive_avg_pool3d_backward_out(*grad_input, *grad_output, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_adaptive_avg_pool3d_backward_b9ba0 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self) {
     auto r_out = torch::adaptive_avg_pool3d_backward(*grad_output, *self);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_adaptive_max_pool2d_out_7c356 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size) {
     auto r_out = torch::adaptive_max_pool2d_out(*out, *indices, *self, output_size);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_adaptive_max_pool2d_e0cae (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size) {
     auto r_out = torch::adaptive_max_pool2d(*self, output_size);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_adaptive_max_pool2d_backward_out_a69a1 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices) {
     auto r_out = torch::adaptive_max_pool2d_backward_out(*grad_input, *grad_output, *self, *indices);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_adaptive_max_pool2d_backward_28764 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices) {
     auto r_out = torch::adaptive_max_pool2d_backward(*grad_output, *self, *indices);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_adaptive_max_pool3d_out_7c356 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size) {
     auto r_out = torch::adaptive_max_pool3d_out(*out, *indices, *self, output_size);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_adaptive_max_pool3d_e0cae (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size) {
     auto r_out = torch::adaptive_max_pool3d(*self, output_size);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_adaptive_max_pool3d_backward_out_a69a1 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices) {
     auto r_out = torch::adaptive_max_pool3d_backward_out(*grad_input, *grad_output, *self, *indices);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_adaptive_max_pool3d_backward_28764 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices) {
     auto r_out = torch::adaptive_max_pool3d_backward(*grad_output, *self, *indices);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_avg_pool2d_out_51926 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, bool ceil_mode, bool count_include_pad, Rcpp::Nullable<int64_t> divisor_override) {
     auto r_out = torch::avg_pool2d_out(*out, *self, kernel_size, stride, padding, ceil_mode, count_include_pad, resolve_null_argument(divisor_override));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_avg_pool2d_f5e62 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, bool ceil_mode, bool count_include_pad, Rcpp::Nullable<int64_t> divisor_override) {
     auto r_out = torch::avg_pool2d(*self, kernel_size, stride, padding, ceil_mode, count_include_pad, resolve_null_argument(divisor_override));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_avg_pool2d_backward_out_bb7a0 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, bool ceil_mode, bool count_include_pad, Rcpp::Nullable<int64_t> divisor_override) {
     auto r_out = torch::avg_pool2d_backward_out(*grad_input, *grad_output, *self, kernel_size, stride, padding, ceil_mode, count_include_pad, resolve_null_argument(divisor_override));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_avg_pool2d_backward_38d2e (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, bool ceil_mode, bool count_include_pad, Rcpp::Nullable<int64_t> divisor_override) {
     auto r_out = torch::avg_pool2d_backward(*grad_output, *self, kernel_size, stride, padding, ceil_mode, count_include_pad, resolve_null_argument(divisor_override));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_avg_pool3d_out_51926 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, bool ceil_mode, bool count_include_pad, Rcpp::Nullable<int64_t> divisor_override) {
     auto r_out = torch::avg_pool3d_out(*out, *self, kernel_size, stride, padding, ceil_mode, count_include_pad, resolve_null_argument(divisor_override));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_avg_pool3d_f5e62 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, bool ceil_mode, bool count_include_pad, Rcpp::Nullable<int64_t> divisor_override) {
     auto r_out = torch::avg_pool3d(*self, kernel_size, stride, padding, ceil_mode, count_include_pad, resolve_null_argument(divisor_override));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_avg_pool3d_backward_out_bb7a0 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, bool ceil_mode, bool count_include_pad, Rcpp::Nullable<int64_t> divisor_override) {
     auto r_out = torch::avg_pool3d_backward_out(*grad_input, *grad_output, *self, kernel_size, stride, padding, ceil_mode, count_include_pad, resolve_null_argument(divisor_override));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_avg_pool3d_backward_38d2e (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, bool ceil_mode, bool count_include_pad, Rcpp::Nullable<int64_t> divisor_override) {
     auto r_out = torch::avg_pool3d_backward(*grad_output, *self, kernel_size, stride, padding, ceil_mode, count_include_pad, resolve_null_argument(divisor_override));
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_fractional_max_pool2d_out_e09c3 (Rcpp::XPtr<torch::Tensor> output, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> output_size, Rcpp::XPtr<torch::Tensor> random_samples) {
     auto r_out = torch::fractional_max_pool2d_out(*output, *indices, *self, kernel_size, output_size, *random_samples);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_fractional_max_pool2d_f0554 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> output_size, Rcpp::XPtr<torch::Tensor> random_samples) {
     auto r_out = torch::fractional_max_pool2d(*self, kernel_size, output_size, *random_samples);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fractional_max_pool2d_backward_out_6e9c8 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> output_size, Rcpp::XPtr<torch::Tensor> indices) {
     auto r_out = torch::fractional_max_pool2d_backward_out(*grad_input, *grad_output, *self, kernel_size, output_size, *indices);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fractional_max_pool2d_backward_c0509 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> output_size, Rcpp::XPtr<torch::Tensor> indices) {
     auto r_out = torch::fractional_max_pool2d_backward(*grad_output, *self, kernel_size, output_size, *indices);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_fractional_max_pool3d_out_e09c3 (Rcpp::XPtr<torch::Tensor> output, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> output_size, Rcpp::XPtr<torch::Tensor> random_samples) {
     auto r_out = torch::fractional_max_pool3d_out(*output, *indices, *self, kernel_size, output_size, *random_samples);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_fractional_max_pool3d_f0554 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> output_size, Rcpp::XPtr<torch::Tensor> random_samples) {
     auto r_out = torch::fractional_max_pool3d(*self, kernel_size, output_size, *random_samples);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fractional_max_pool3d_backward_out_6e9c8 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> output_size, Rcpp::XPtr<torch::Tensor> indices) {
     auto r_out = torch::fractional_max_pool3d_backward_out(*grad_input, *grad_output, *self, kernel_size, output_size, *indices);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_fractional_max_pool3d_backward_c0509 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> output_size, Rcpp::XPtr<torch::Tensor> indices) {
     auto r_out = torch::fractional_max_pool3d_backward(*grad_output, *self, kernel_size, output_size, *indices);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_max_pool2d_with_indices_out_f5fee (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool ceil_mode) {
     auto r_out = torch::max_pool2d_with_indices_out(*out, *indices, *self, kernel_size, stride, padding, dilation, ceil_mode);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_max_pool2d_with_indices_e506e (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool ceil_mode) {
     auto r_out = torch::max_pool2d_with_indices(*self, kernel_size, stride, padding, dilation, ceil_mode);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_pool2d_with_indices_backward_out_7e911 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool ceil_mode, Rcpp::XPtr<torch::Tensor> indices) {
     auto r_out = torch::max_pool2d_with_indices_backward_out(*grad_input, *grad_output, *self, kernel_size, stride, padding, dilation, ceil_mode, *indices);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_pool2d_with_indices_backward_aeb4d (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool ceil_mode, Rcpp::XPtr<torch::Tensor> indices) {
     auto r_out = torch::max_pool2d_with_indices_backward(*grad_output, *self, kernel_size, stride, padding, dilation, ceil_mode, *indices);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_max_pool3d_with_indices_out_f5fee (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool ceil_mode) {
     auto r_out = torch::max_pool3d_with_indices_out(*out, *indices, *self, kernel_size, stride, padding, dilation, ceil_mode);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_max_pool3d_with_indices_e506e (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool ceil_mode) {
     auto r_out = torch::max_pool3d_with_indices(*self, kernel_size, stride, padding, dilation, ceil_mode);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_pool3d_with_indices_backward_out_7e911 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool ceil_mode, Rcpp::XPtr<torch::Tensor> indices) {
     auto r_out = torch::max_pool3d_with_indices_backward_out(*grad_input, *grad_output, *self, kernel_size, stride, padding, dilation, ceil_mode, *indices);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_pool3d_with_indices_backward_aeb4d (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, bool ceil_mode, Rcpp::XPtr<torch::Tensor> indices) {
     auto r_out = torch::max_pool3d_with_indices_backward(*grad_output, *self, kernel_size, stride, padding, dilation, ceil_mode, *indices);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_unpool2d_out_0ddb6 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices, std::vector<std::int64_t> output_size) {
     auto r_out = torch::max_unpool2d_out(*out, *self, *indices, output_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_unpool2d_6618f (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices, std::vector<std::int64_t> output_size) {
     auto r_out = torch::max_unpool2d(*self, *indices, output_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_unpool2d_backward_out_8db9f (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices, std::vector<std::int64_t> output_size) {
     auto r_out = torch::max_unpool2d_backward_out(*grad_input, *grad_output, *self, *indices, output_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_unpool2d_backward_f2643 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices, std::vector<std::int64_t> output_size) {
     auto r_out = torch::max_unpool2d_backward(*grad_output, *self, *indices, output_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_unpool3d_out_7e7eb (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices, std::vector<std::int64_t> output_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding) {
     auto r_out = torch::max_unpool3d_out(*out, *self, *indices, output_size, stride, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_unpool3d_2a2ca (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices, std::vector<std::int64_t> output_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding) {
     auto r_out = torch::max_unpool3d(*self, *indices, output_size, stride, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_unpool3d_backward_out_7a39d (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices, std::vector<std::int64_t> output_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding) {
     auto r_out = torch::max_unpool3d_backward_out(*grad_input, *grad_output, *self, *indices, output_size, stride, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_max_unpool3d_backward_c5217 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices, std::vector<std::int64_t> output_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding) {
     auto r_out = torch::max_unpool3d_backward(*grad_output, *self, *indices, output_size, stride, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_reflection_pad1d_out_c329b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::reflection_pad1d_out(*out, *self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_reflection_pad1d_05634 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::reflection_pad1d(*self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_reflection_pad1d_backward_out_c8847 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::reflection_pad1d_backward_out(*grad_input, *grad_output, *self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_reflection_pad1d_backward_7503a (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::reflection_pad1d_backward(*grad_output, *self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_reflection_pad2d_out_c329b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::reflection_pad2d_out(*out, *self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_reflection_pad2d_05634 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::reflection_pad2d(*self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_reflection_pad2d_backward_out_c8847 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::reflection_pad2d_backward_out(*grad_input, *grad_output, *self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_reflection_pad2d_backward_7503a (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::reflection_pad2d_backward(*grad_output, *self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_replication_pad1d_out_c329b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::replication_pad1d_out(*out, *self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_replication_pad1d_05634 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::replication_pad1d(*self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_replication_pad1d_backward_out_c8847 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::replication_pad1d_backward_out(*grad_input, *grad_output, *self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_replication_pad1d_backward_7503a (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::replication_pad1d_backward(*grad_output, *self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_replication_pad2d_out_c329b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::replication_pad2d_out(*out, *self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_replication_pad2d_05634 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::replication_pad2d(*self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_replication_pad2d_backward_out_c8847 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::replication_pad2d_backward_out(*grad_input, *grad_output, *self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_replication_pad2d_backward_7503a (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::replication_pad2d_backward(*grad_output, *self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_replication_pad3d_out_c329b (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::replication_pad3d_out(*out, *self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_replication_pad3d_05634 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::replication_pad3d(*self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_replication_pad3d_backward_out_c8847 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::replication_pad3d_backward_out(*grad_input, *grad_output, *self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_replication_pad3d_backward_7503a (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> padding) {
     auto r_out = torch::replication_pad3d_backward(*grad_output, *self, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_linear1d_out_13bdb (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size, bool align_corners) {
     auto r_out = torch::upsample_linear1d_out(*out, *self, output_size, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_linear1d_cd6d4 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size, bool align_corners) {
     auto r_out = torch::upsample_linear1d(*self, output_size, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_linear1d_backward_out_57014 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<std::int64_t> output_size, std::vector<std::int64_t> input_size, bool align_corners) {
     auto r_out = torch::upsample_linear1d_backward_out(*grad_input, *grad_output, output_size, input_size, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_linear1d_backward_b373a (Rcpp::XPtr<torch::Tensor> grad_output, std::vector<std::int64_t> output_size, std::vector<std::int64_t> input_size, bool align_corners) {
     auto r_out = torch::upsample_linear1d_backward(*grad_output, output_size, input_size, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_bilinear2d_out_13bdb (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size, bool align_corners) {
     auto r_out = torch::upsample_bilinear2d_out(*out, *self, output_size, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_bilinear2d_cd6d4 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size, bool align_corners) {
     auto r_out = torch::upsample_bilinear2d(*self, output_size, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_bilinear2d_backward_out_57014 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<std::int64_t> output_size, std::vector<std::int64_t> input_size, bool align_corners) {
     auto r_out = torch::upsample_bilinear2d_backward_out(*grad_input, *grad_output, output_size, input_size, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_bilinear2d_backward_b373a (Rcpp::XPtr<torch::Tensor> grad_output, std::vector<std::int64_t> output_size, std::vector<std::int64_t> input_size, bool align_corners) {
     auto r_out = torch::upsample_bilinear2d_backward(*grad_output, output_size, input_size, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_bicubic2d_out_13bdb (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size, bool align_corners) {
     auto r_out = torch::upsample_bicubic2d_out(*out, *self, output_size, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_bicubic2d_cd6d4 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size, bool align_corners) {
     auto r_out = torch::upsample_bicubic2d(*self, output_size, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_bicubic2d_backward_out_57014 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<std::int64_t> output_size, std::vector<std::int64_t> input_size, bool align_corners) {
     auto r_out = torch::upsample_bicubic2d_backward_out(*grad_input, *grad_output, output_size, input_size, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_bicubic2d_backward_b373a (Rcpp::XPtr<torch::Tensor> grad_output, std::vector<std::int64_t> output_size, std::vector<std::int64_t> input_size, bool align_corners) {
     auto r_out = torch::upsample_bicubic2d_backward(*grad_output, output_size, input_size, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_trilinear3d_out_13bdb (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size, bool align_corners) {
     auto r_out = torch::upsample_trilinear3d_out(*out, *self, output_size, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_trilinear3d_cd6d4 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size, bool align_corners) {
     auto r_out = torch::upsample_trilinear3d(*self, output_size, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_trilinear3d_backward_out_57014 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<std::int64_t> output_size, std::vector<std::int64_t> input_size, bool align_corners) {
     auto r_out = torch::upsample_trilinear3d_backward_out(*grad_input, *grad_output, output_size, input_size, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_trilinear3d_backward_b373a (Rcpp::XPtr<torch::Tensor> grad_output, std::vector<std::int64_t> output_size, std::vector<std::int64_t> input_size, bool align_corners) {
     auto r_out = torch::upsample_trilinear3d_backward(*grad_output, output_size, input_size, align_corners);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_nearest1d_out_0d3cb (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size) {
     auto r_out = torch::upsample_nearest1d_out(*out, *self, output_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_nearest1d_e0cae (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size) {
     auto r_out = torch::upsample_nearest1d(*self, output_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_nearest1d_backward_out_e3fe9 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<std::int64_t> output_size, std::vector<std::int64_t> input_size) {
     auto r_out = torch::upsample_nearest1d_backward_out(*grad_input, *grad_output, output_size, input_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_nearest1d_backward_63711 (Rcpp::XPtr<torch::Tensor> grad_output, std::vector<std::int64_t> output_size, std::vector<std::int64_t> input_size) {
     auto r_out = torch::upsample_nearest1d_backward(*grad_output, output_size, input_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_nearest2d_out_0d3cb (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size) {
     auto r_out = torch::upsample_nearest2d_out(*out, *self, output_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_nearest2d_e0cae (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size) {
     auto r_out = torch::upsample_nearest2d(*self, output_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_nearest2d_backward_out_e3fe9 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<std::int64_t> output_size, std::vector<std::int64_t> input_size) {
     auto r_out = torch::upsample_nearest2d_backward_out(*grad_input, *grad_output, output_size, input_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_nearest2d_backward_63711 (Rcpp::XPtr<torch::Tensor> grad_output, std::vector<std::int64_t> output_size, std::vector<std::int64_t> input_size) {
     auto r_out = torch::upsample_nearest2d_backward(*grad_output, output_size, input_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_nearest3d_out_0d3cb (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size) {
     auto r_out = torch::upsample_nearest3d_out(*out, *self, output_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_nearest3d_e0cae (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size) {
     auto r_out = torch::upsample_nearest3d(*self, output_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_nearest3d_backward_out_e3fe9 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<std::int64_t> output_size, std::vector<std::int64_t> input_size) {
     auto r_out = torch::upsample_nearest3d_backward_out(*grad_input, *grad_output, output_size, input_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_upsample_nearest3d_backward_63711 (Rcpp::XPtr<torch::Tensor> grad_output, std::vector<std::int64_t> output_size, std::vector<std::int64_t> input_size) {
     auto r_out = torch::upsample_nearest3d_backward(*grad_output, output_size, input_size);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sigmoid_backward_out_09fe0 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> output) {
     auto r_out = torch::sigmoid_backward_out(*grad_input, *grad_output, *output);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_sigmoid_backward_741b7 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> output) {
     auto r_out = torch::sigmoid_backward(*grad_output, *output);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_tanh_backward_out_09fe0 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> output) {
     auto r_out = torch::tanh_backward_out(*grad_input, *grad_output, *output);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_tanh_backward_741b7 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> output) {
     auto r_out = torch::tanh_backward(*grad_output, *output);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_slow_conv_transpose2d_out_4b2d3 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> output_padding, std::vector<std::int64_t> dilation) {
     auto r_out = torch::slow_conv_transpose2d_out(*out, *self, *weight, kernel_size, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, output_padding, dilation);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_slow_conv_transpose2d_092c9 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> output_padding, std::vector<std::int64_t> dilation) {
     auto r_out = torch::slow_conv_transpose2d(*self, *weight, kernel_size, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, output_padding, dilation);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_slow_conv_transpose2d_backward_out_9a6c4 (Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_input, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_bias, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> output_padding, std::vector<std::int64_t> dilation, Rcpp::XPtr<torch::Tensor> columns, Rcpp::XPtr<torch::Tensor> ones) {
     auto r_out = torch::slow_conv_transpose2d_backward_out(*Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_input), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_weight), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_bias), *grad_output, *self, *weight, kernel_size, stride, padding, output_padding, dilation, *columns, *ones);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_slow_conv_transpose2d_backward_7dfb5 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> output_padding, std::vector<std::int64_t> dilation, Rcpp::XPtr<torch::Tensor> columns, Rcpp::XPtr<torch::Tensor> ones, std::vector<bool> output_mask) {
     auto r_out = torch::slow_conv_transpose2d_backward(*grad_output, *self, *weight, kernel_size, stride, padding, output_padding, dilation, *columns, *ones, vector_to_array_bool<3>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_slow_conv_transpose3d_out_4b2d3 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> output_padding, std::vector<std::int64_t> dilation) {
     auto r_out = torch::slow_conv_transpose3d_out(*out, *self, *weight, kernel_size, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, output_padding, dilation);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_slow_conv_transpose3d_092c9 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> output_padding, std::vector<std::int64_t> dilation) {
     auto r_out = torch::slow_conv_transpose3d(*self, *weight, kernel_size, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, output_padding, dilation);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_slow_conv_transpose3d_backward_out_750ee (Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_input, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_bias, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> output_padding, std::vector<std::int64_t> dilation, Rcpp::XPtr<torch::Tensor> finput, Rcpp::XPtr<torch::Tensor> fgrad_input) {
     auto r_out = torch::slow_conv_transpose3d_backward_out(*Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_input), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_weight), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_bias), *grad_output, *self, *weight, kernel_size, stride, padding, output_padding, dilation, *finput, *fgrad_input);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_slow_conv_transpose3d_backward_0d1b2 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> output_padding, std::vector<std::int64_t> dilation, Rcpp::XPtr<torch::Tensor> finput, Rcpp::XPtr<torch::Tensor> fgrad_input, std::vector<bool> output_mask) {
     auto r_out = torch::slow_conv_transpose3d_backward(*grad_output, *self, *weight, kernel_size, stride, padding, output_padding, dilation, *finput, *fgrad_input, vector_to_array_bool<3>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_thnn_conv2d_out_d7b88 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding) {
     auto r_out = torch::thnn_conv2d_out(*out, *self, *weight, kernel_size, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_thnn_conv2d_5f669 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding) {
     auto r_out = torch::thnn_conv2d(*self, *weight, kernel_size, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_thnn_conv2d_forward_out_94c14 (Rcpp::XPtr<torch::Tensor> output, Rcpp::XPtr<torch::Tensor> finput, Rcpp::XPtr<torch::Tensor> fgrad_input, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding) {
     auto r_out = torch::thnn_conv2d_forward_out(*output, *finput, *fgrad_input, *self, *weight, kernel_size, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_thnn_conv2d_forward_5f669 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding) {
     auto r_out = torch::thnn_conv2d_forward(*self, *weight, kernel_size, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_thnn_conv2d_backward_out_948aa (Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_input, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_bias, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, Rcpp::XPtr<torch::Tensor> finput, Rcpp::XPtr<torch::Tensor> fgrad_input) {
     auto r_out = torch::thnn_conv2d_backward_out(*Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_input), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_weight), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_bias), *grad_output, *self, *weight, kernel_size, stride, padding, *finput, *fgrad_input);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_thnn_conv2d_backward_6f6ec (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, Rcpp::XPtr<torch::Tensor> finput, Rcpp::XPtr<torch::Tensor> fgrad_input, std::vector<bool> output_mask) {
     auto r_out = torch::thnn_conv2d_backward(*grad_output, *self, *weight, kernel_size, stride, padding, *finput, *fgrad_input, vector_to_array_bool<3>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_thnn_conv_depthwise2d_out_073a5 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation) {
     auto r_out = torch::thnn_conv_depthwise2d_out(*out, *self, *weight, kernel_size, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, dilation);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_thnn_conv_depthwise2d_840bf (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation) {
     auto r_out = torch::thnn_conv_depthwise2d(*self, *weight, kernel_size, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, dilation);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_thnn_conv_depthwise2d_forward_out_073a5 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation) {
     auto r_out = torch::thnn_conv_depthwise2d_forward_out(*out, *self, *weight, kernel_size, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, dilation);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_thnn_conv_depthwise2d_forward_840bf (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation) {
     auto r_out = torch::thnn_conv_depthwise2d_forward(*self, *weight, kernel_size, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, dilation);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_thnn_conv_depthwise2d_backward_out_0aa6a (Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_input, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_weight, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation) {
     auto r_out = torch::thnn_conv_depthwise2d_backward_out(*Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_input), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_weight), *grad_output, *self, *weight, kernel_size, stride, padding, dilation);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_thnn_conv_depthwise2d_backward_27ad5 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, std::vector<bool> output_mask) {
     auto r_out = torch::thnn_conv_depthwise2d_backward(*grad_output, *self, *weight, kernel_size, stride, padding, dilation, vector_to_array_bool<2>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_thnn_conv3d_out_d7b88 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding) {
     auto r_out = torch::thnn_conv3d_out(*out, *self, *weight, kernel_size, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_thnn_conv3d_5f669 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding) {
     auto r_out = torch::thnn_conv3d(*self, *weight, kernel_size, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_thnn_conv3d_forward_out_94c14 (Rcpp::XPtr<torch::Tensor> output, Rcpp::XPtr<torch::Tensor> finput, Rcpp::XPtr<torch::Tensor> fgrad_input, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding) {
     auto r_out = torch::thnn_conv3d_forward_out(*output, *finput, *fgrad_input, *self, *weight, kernel_size, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_thnn_conv3d_forward_5f669 (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding) {
     auto r_out = torch::thnn_conv3d_forward(*self, *weight, kernel_size, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_thnn_conv3d_backward_out_948aa (Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_input, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_weight, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> grad_bias, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, Rcpp::XPtr<torch::Tensor> finput, Rcpp::XPtr<torch::Tensor> fgrad_input) {
     auto r_out = torch::thnn_conv3d_backward_out(*Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_input), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_weight), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(grad_bias), *grad_output, *self, *weight, kernel_size, stride, padding, *finput, *fgrad_input);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::List tch_thnn_conv3d_backward_6f6ec (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, Rcpp::XPtr<torch::Tensor> finput, Rcpp::XPtr<torch::Tensor> fgrad_input, std::vector<bool> output_mask) {
     auto r_out = torch::thnn_conv3d_backward(*grad_output, *self, *weight, kernel_size, stride, padding, *finput, *fgrad_input, vector_to_array_bool<3>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_slow_conv_dilated2d_840bf (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation) {
     auto r_out = torch::slow_conv_dilated2d(*self, *weight, kernel_size, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, dilation);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_slow_conv_dilated2d_backward_9d500 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, std::vector<bool> output_mask) {
     auto r_out = torch::slow_conv_dilated2d_backward(*grad_output, *self, *weight, kernel_size, stride, padding, dilation, vector_to_array_bool<3>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_slow_conv_dilated3d_840bf (Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> bias, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation) {
     auto r_out = torch::slow_conv_dilated3d(*self, *weight, kernel_size, *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(bias), stride, padding, dilation);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::List tch_slow_conv_dilated3d_backward_9d500 (Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> stride, std::vector<std::int64_t> padding, std::vector<std::int64_t> dilation, std::vector<bool> output_mask) {
     auto r_out = torch::slow_conv_dilated3d_backward(*grad_output, *self, *weight, kernel_size, stride, padding, dilation, vector_to_array_bool<3>(output_mask));
return Rcpp::List::create(make_tensor_ptr(std::get<0>(r_out)), make_tensor_ptr(std::get<1>(r_out)), make_tensor_ptr(std::get<2>(r_out)));
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_col2im_out_9bf5c (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> dilation, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride) {
     auto r_out = torch::col2im_out(*out, *self, output_size, kernel_size, dilation, padding, stride);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_col2im_8372b (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> output_size, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> dilation, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride) {
     auto r_out = torch::col2im(*self, output_size, kernel_size, dilation, padding, stride);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_col2im_backward_out_ab668 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> dilation, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride) {
     auto r_out = torch::col2im_backward_out(*grad_input, *grad_output, kernel_size, dilation, padding, stride);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_col2im_backward_63daa (Rcpp::XPtr<torch::Tensor> grad_output, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> dilation, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride) {
     auto r_out = torch::col2im_backward(*grad_output, kernel_size, dilation, padding, stride);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_im2col_out_c4aa1 (Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> dilation, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride) {
     auto r_out = torch::im2col_out(*out, *self, kernel_size, dilation, padding, stride);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_im2col_da8e0 (Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> dilation, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride) {
     auto r_out = torch::im2col(*self, kernel_size, dilation, padding, stride);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_im2col_backward_out_c6ff7 (Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<std::int64_t> input_size, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> dilation, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride) {
     auto r_out = torch::im2col_backward_out(*grad_input, *grad_output, input_size, kernel_size, dilation, padding, stride);
return make_tensor_ptr(r_out);
   };

// [[Rcpp::export]]
    Rcpp::XPtr<torch::Tensor> tch_im2col_backward_05c61 (Rcpp::XPtr<torch::Tensor> grad_output, std::vector<std::int64_t> input_size, std::vector<std::int64_t> kernel_size, std::vector<std::int64_t> dilation, std::vector<std::int64_t> padding, std::vector<std::int64_t> stride) {
     auto r_out = torch::im2col_backward(*grad_output, input_size, kernel_size, dilation, padding, stride);
return make_tensor_ptr(r_out);
   };
