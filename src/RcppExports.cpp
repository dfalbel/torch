// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "torch_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// tensor_
Rcpp::XPtr<torch::Tensor> tensor_(SEXP x, std::vector<int64_t> dim, bool clone);
RcppExport SEXP _torch_tensor_(SEXP xSEXP, SEXP dimSEXP, SEXP cloneSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type clone(cloneSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_(x, dim, clone));
    return rcpp_result_gen;
END_RCPP
}
// tensor_print_
void tensor_print_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_print_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    tensor_print_(x);
    return R_NilValue;
END_RCPP
}
// as_array_tensor_
Rcpp::List as_array_tensor_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_as_array_tensor_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(as_array_tensor_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_abs_
Rcpp::XPtr<torch::Tensor> tensor_abs_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_abs_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_abs_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_to_string_
std::string tensor_to_string_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_to_string_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_to_string_(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_torch_tensor_", (DL_FUNC) &_torch_tensor_, 3},
    {"_torch_tensor_print_", (DL_FUNC) &_torch_tensor_print_, 1},
    {"_torch_as_array_tensor_", (DL_FUNC) &_torch_as_array_tensor_, 1},
    {"_torch_tensor_abs_", (DL_FUNC) &_torch_tensor_abs_, 1},
    {"_torch_tensor_to_string_", (DL_FUNC) &_torch_tensor_to_string_, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_torch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
