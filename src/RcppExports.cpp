// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "torch_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// cuda_is_available_
bool cuda_is_available_();
RcppExport SEXP _torch_cuda_is_available_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cuda_is_available_());
    return rcpp_result_gen;
END_RCPP
}
// set_grad_mode
void set_grad_mode(bool enabled);
RcppExport SEXP _torch_set_grad_mode(SEXP enabledSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type enabled(enabledSEXP);
    set_grad_mode(enabled);
    return R_NilValue;
END_RCPP
}
// tensor_from_r_
Rcpp::XPtr<torch::Tensor> tensor_from_r_(SEXP x, std::vector<int64_t> dim, Rcpp::Nullable<std::string> dtype, Rcpp::Nullable<std::string> device, bool requires_grad);
RcppExport SEXP _torch_tensor_from_r_(SEXP xSEXP, SEXP dimSEXP, SEXP dtypeSEXP, SEXP deviceSEXP, SEXP requires_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< bool >::type requires_grad(requires_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_from_r_(x, dim, dtype, device, requires_grad));
    return rcpp_result_gen;
END_RCPP
}
// tensor_
Rcpp::XPtr<torch::Tensor> tensor_(Rcpp::XPtr<torch::Tensor> x, Rcpp::Nullable<std::string> dtype, Rcpp::Nullable<std::string> device, bool requires_grad);
RcppExport SEXP _torch_tensor_(SEXP xSEXP, SEXP dtypeSEXP, SEXP deviceSEXP, SEXP requires_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< bool >::type requires_grad(requires_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_(x, dtype, device, requires_grad));
    return rcpp_result_gen;
END_RCPP
}
// as_array_tensor_
Rcpp::List as_array_tensor_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_as_array_tensor_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(as_array_tensor_(x));
    return rcpp_result_gen;
END_RCPP
}
// torch_randn_
Rcpp::XPtr<torch::Tensor> torch_randn_(std::vector<std::int64_t> size, Rcpp::Nullable<std::string> dtype, Rcpp::Nullable<std::string> layout, Rcpp::Nullable<std::string> device, Rcpp::Nullable<bool> requires_grad);
RcppExport SEXP _torch_torch_randn_(SEXP sizeSEXP, SEXP dtypeSEXP, SEXP layoutSEXP, SEXP deviceSEXP, SEXP requires_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type layout(layoutSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type requires_grad(requires_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(torch_randn_(size, dtype, layout, device, requires_grad));
    return rcpp_result_gen;
END_RCPP
}
// torch_arange_
Rcpp::XPtr<torch::Tensor> torch_arange_(SEXP start, SEXP end, SEXP step, Rcpp::Nullable<std::string> dtype, Rcpp::Nullable<std::string> layout, Rcpp::Nullable<std::string> device, Rcpp::Nullable<bool> requires_grad);
RcppExport SEXP _torch_torch_arange_(SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP, SEXP dtypeSEXP, SEXP layoutSEXP, SEXP deviceSEXP, SEXP requires_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type start(startSEXP);
    Rcpp::traits::input_parameter< SEXP >::type end(endSEXP);
    Rcpp::traits::input_parameter< SEXP >::type step(stepSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type layout(layoutSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type requires_grad(requires_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(torch_arange_(start, end, step, dtype, layout, device, requires_grad));
    return rcpp_result_gen;
END_RCPP
}
// torch_empty_
Rcpp::XPtr<torch::Tensor> torch_empty_(std::vector<std::int64_t> size, Rcpp::Nullable<std::string> dtype, Rcpp::Nullable<std::string> layout, Rcpp::Nullable<std::string> device, Rcpp::Nullable<bool> requires_grad);
RcppExport SEXP _torch_torch_empty_(SEXP sizeSEXP, SEXP dtypeSEXP, SEXP layoutSEXP, SEXP deviceSEXP, SEXP requires_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type layout(layoutSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type requires_grad(requires_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(torch_empty_(size, dtype, layout, device, requires_grad));
    return rcpp_result_gen;
END_RCPP
}
// torch_eye_
Rcpp::XPtr<torch::Tensor> torch_eye_(std::int64_t n, std::int64_t m, Rcpp::Nullable<std::string> dtype, Rcpp::Nullable<std::string> layout, Rcpp::Nullable<std::string> device, Rcpp::Nullable<bool> requires_grad);
RcppExport SEXP _torch_torch_eye_(SEXP nSEXP, SEXP mSEXP, SEXP dtypeSEXP, SEXP layoutSEXP, SEXP deviceSEXP, SEXP requires_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type layout(layoutSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type requires_grad(requires_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(torch_eye_(n, m, dtype, layout, device, requires_grad));
    return rcpp_result_gen;
END_RCPP
}
// torch_full_
Rcpp::XPtr<torch::Tensor> torch_full_(std::vector<std::int64_t> size, SEXP fill_value, Rcpp::Nullable<std::string> dtype, Rcpp::Nullable<std::string> layout, Rcpp::Nullable<std::string> device, Rcpp::Nullable<bool> requires_grad);
RcppExport SEXP _torch_torch_full_(SEXP sizeSEXP, SEXP fill_valueSEXP, SEXP dtypeSEXP, SEXP layoutSEXP, SEXP deviceSEXP, SEXP requires_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type fill_value(fill_valueSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type layout(layoutSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type requires_grad(requires_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(torch_full_(size, fill_value, dtype, layout, device, requires_grad));
    return rcpp_result_gen;
END_RCPP
}
// torch_linspace_
Rcpp::XPtr<torch::Tensor> torch_linspace_(SEXP start, SEXP end, std::int64_t steps, Rcpp::Nullable<std::string> dtype, Rcpp::Nullable<std::string> layout, Rcpp::Nullable<std::string> device, Rcpp::Nullable<bool> requires_grad);
RcppExport SEXP _torch_torch_linspace_(SEXP startSEXP, SEXP endSEXP, SEXP stepsSEXP, SEXP dtypeSEXP, SEXP layoutSEXP, SEXP deviceSEXP, SEXP requires_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type start(startSEXP);
    Rcpp::traits::input_parameter< SEXP >::type end(endSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type layout(layoutSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type requires_grad(requires_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(torch_linspace_(start, end, steps, dtype, layout, device, requires_grad));
    return rcpp_result_gen;
END_RCPP
}
// torch_logspace_
Rcpp::XPtr<torch::Tensor> torch_logspace_(SEXP start, SEXP end, std::int64_t steps, Rcpp::Nullable<std::string> dtype, Rcpp::Nullable<std::string> layout, Rcpp::Nullable<std::string> device, Rcpp::Nullable<bool> requires_grad);
RcppExport SEXP _torch_torch_logspace_(SEXP startSEXP, SEXP endSEXP, SEXP stepsSEXP, SEXP dtypeSEXP, SEXP layoutSEXP, SEXP deviceSEXP, SEXP requires_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type start(startSEXP);
    Rcpp::traits::input_parameter< SEXP >::type end(endSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type layout(layoutSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type requires_grad(requires_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(torch_logspace_(start, end, steps, dtype, layout, device, requires_grad));
    return rcpp_result_gen;
END_RCPP
}
// torch_ones_
Rcpp::XPtr<torch::Tensor> torch_ones_(std::vector<std::int64_t> size, Rcpp::Nullable<std::string> dtype, Rcpp::Nullable<std::string> layout, Rcpp::Nullable<std::string> device, Rcpp::Nullable<bool> requires_grad);
RcppExport SEXP _torch_torch_ones_(SEXP sizeSEXP, SEXP dtypeSEXP, SEXP layoutSEXP, SEXP deviceSEXP, SEXP requires_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type layout(layoutSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type requires_grad(requires_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(torch_ones_(size, dtype, layout, device, requires_grad));
    return rcpp_result_gen;
END_RCPP
}
// torch_rand_
Rcpp::XPtr<torch::Tensor> torch_rand_(std::vector<std::int64_t> size, Rcpp::Nullable<std::string> dtype, Rcpp::Nullable<std::string> layout, Rcpp::Nullable<std::string> device, Rcpp::Nullable<bool> requires_grad);
RcppExport SEXP _torch_torch_rand_(SEXP sizeSEXP, SEXP dtypeSEXP, SEXP layoutSEXP, SEXP deviceSEXP, SEXP requires_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type layout(layoutSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type requires_grad(requires_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(torch_rand_(size, dtype, layout, device, requires_grad));
    return rcpp_result_gen;
END_RCPP
}
// torch_randint_
Rcpp::XPtr<torch::Tensor> torch_randint_(std::int64_t low, std::int64_t high, std::vector<std::int64_t> size, Rcpp::Nullable<std::string> dtype, Rcpp::Nullable<std::string> layout, Rcpp::Nullable<std::string> device, Rcpp::Nullable<bool> requires_grad);
RcppExport SEXP _torch_torch_randint_(SEXP lowSEXP, SEXP highSEXP, SEXP sizeSEXP, SEXP dtypeSEXP, SEXP layoutSEXP, SEXP deviceSEXP, SEXP requires_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::int64_t >::type low(lowSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< std::vector<std::int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type layout(layoutSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type requires_grad(requires_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(torch_randint_(low, high, size, dtype, layout, device, requires_grad));
    return rcpp_result_gen;
END_RCPP
}
// torch_randperm_
Rcpp::XPtr<torch::Tensor> torch_randperm_(std::int64_t n, Rcpp::Nullable<std::string> dtype, Rcpp::Nullable<std::string> layout, Rcpp::Nullable<std::string> device, Rcpp::Nullable<bool> requires_grad);
RcppExport SEXP _torch_torch_randperm_(SEXP nSEXP, SEXP dtypeSEXP, SEXP layoutSEXP, SEXP deviceSEXP, SEXP requires_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type layout(layoutSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type requires_grad(requires_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(torch_randperm_(n, dtype, layout, device, requires_grad));
    return rcpp_result_gen;
END_RCPP
}
// torch_zeros_
Rcpp::XPtr<torch::Tensor> torch_zeros_(std::vector<std::int64_t> size, Rcpp::Nullable<std::string> dtype, Rcpp::Nullable<std::string> layout, Rcpp::Nullable<std::string> device, Rcpp::Nullable<bool> requires_grad);
RcppExport SEXP _torch_torch_zeros_(SEXP sizeSEXP, SEXP dtypeSEXP, SEXP layoutSEXP, SEXP deviceSEXP, SEXP requires_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type layout(layoutSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type requires_grad(requires_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(torch_zeros_(size, dtype, layout, device, requires_grad));
    return rcpp_result_gen;
END_RCPP
}
// tensor_print_
void tensor_print_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_print_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    tensor_print_(x);
    return R_NilValue;
END_RCPP
}
// tensor_abs_
Rcpp::XPtr<torch::Tensor> tensor_abs_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_abs_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_abs_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_abs__
Rcpp::XPtr<torch::Tensor> tensor_abs__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_abs__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_abs__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_acos_
Rcpp::XPtr<torch::Tensor> tensor_acos_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_acos_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_acos_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_acos__
Rcpp::XPtr<torch::Tensor> tensor_acos__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_acos__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_acos__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_add_tensor_
Rcpp::XPtr<torch::Tensor> tensor_add_tensor_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> y);
RcppExport SEXP _torch_tensor_add_tensor_(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_add_tensor_(x, y));
    return rcpp_result_gen;
END_RCPP
}
// tensor_add_scalar_
Rcpp::XPtr<torch::Tensor> tensor_add_scalar_(Rcpp::XPtr<torch::Tensor> x, SEXP y);
RcppExport SEXP _torch_tensor_add_scalar_(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_add_scalar_(x, y));
    return rcpp_result_gen;
END_RCPP
}
// tensor_add_tensor__
Rcpp::XPtr<torch::Tensor> tensor_add_tensor__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> y);
RcppExport SEXP _torch_tensor_add_tensor__(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_add_tensor__(x, y));
    return rcpp_result_gen;
END_RCPP
}
// tensor_add_scalar__
Rcpp::XPtr<torch::Tensor> tensor_add_scalar__(Rcpp::XPtr<torch::Tensor> x, SEXP y);
RcppExport SEXP _torch_tensor_add_scalar__(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_add_scalar__(x, y));
    return rcpp_result_gen;
END_RCPP
}
// tensor_addbmm_
Rcpp::XPtr<torch::Tensor> tensor_addbmm_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, SEXP beta, SEXP alpha);
RcppExport SEXP _torch_tensor_addbmm_(SEXP xSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_addbmm_(x, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// tensor_addbmm__
Rcpp::XPtr<torch::Tensor> tensor_addbmm__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, SEXP beta, SEXP alpha);
RcppExport SEXP _torch_tensor_addbmm__(SEXP xSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_addbmm__(x, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// tensor_addcdiv_
Rcpp::XPtr<torch::Tensor> tensor_addcdiv_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, SEXP value);
RcppExport SEXP _torch_tensor_addcdiv_(SEXP xSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_addcdiv_(x, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// tensor_addcdiv__
Rcpp::XPtr<torch::Tensor> tensor_addcdiv__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, SEXP value);
RcppExport SEXP _torch_tensor_addcdiv__(SEXP xSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_addcdiv__(x, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// tensor_addcmul_
Rcpp::XPtr<torch::Tensor> tensor_addcmul_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, SEXP value);
RcppExport SEXP _torch_tensor_addcmul_(SEXP xSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_addcmul_(x, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// tensor_addcmul__
Rcpp::XPtr<torch::Tensor> tensor_addcmul__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, SEXP value);
RcppExport SEXP _torch_tensor_addcmul__(SEXP xSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_addcmul__(x, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// tensor_addmm_
Rcpp::XPtr<torch::Tensor> tensor_addmm_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2, SEXP beta, SEXP alpha);
RcppExport SEXP _torch_tensor_addmm_(SEXP xSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_addmm_(x, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// tensor_addmm__
Rcpp::XPtr<torch::Tensor> tensor_addmm__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2, SEXP beta, SEXP alpha);
RcppExport SEXP _torch_tensor_addmm__(SEXP xSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_addmm__(x, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// tensor_addmv_
Rcpp::XPtr<torch::Tensor> tensor_addmv_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> mat, Rcpp::XPtr<torch::Tensor> vec, SEXP beta, SEXP alpha);
RcppExport SEXP _torch_tensor_addmv_(SEXP xSEXP, SEXP matSEXP, SEXP vecSEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat(matSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_addmv_(x, mat, vec, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// tensor_addmv__
Rcpp::XPtr<torch::Tensor> tensor_addmv__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> mat, Rcpp::XPtr<torch::Tensor> vec, SEXP beta, SEXP alpha);
RcppExport SEXP _torch_tensor_addmv__(SEXP xSEXP, SEXP matSEXP, SEXP vecSEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat(matSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_addmv__(x, mat, vec, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// tensor_addr_
Rcpp::XPtr<torch::Tensor> tensor_addr_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> vec1, Rcpp::XPtr<torch::Tensor> vec2, SEXP beta, SEXP alpha);
RcppExport SEXP _torch_tensor_addr_(SEXP xSEXP, SEXP vec1SEXP, SEXP vec2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec2(vec2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_addr_(x, vec1, vec2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// tensor_addr__
Rcpp::XPtr<torch::Tensor> tensor_addr__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> vec1, Rcpp::XPtr<torch::Tensor> vec2, SEXP beta, SEXP alpha);
RcppExport SEXP _torch_tensor_addr__(SEXP xSEXP, SEXP vec1SEXP, SEXP vec2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec2(vec2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_addr__(x, vec1, vec2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// tensor_all_
Rcpp::XPtr<torch::Tensor> tensor_all_(Rcpp::XPtr<torch::Tensor> x, Rcpp::Nullable<std::int64_t> dim, bool keepdim);
RcppExport SEXP _torch_tensor_all_(SEXP xSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_all_(x, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_allclose_
bool tensor_allclose_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other, double rtol, double atol, bool equal_nan);
RcppExport SEXP _torch_tensor_allclose_(SEXP xSEXP, SEXP otherSEXP, SEXP rtolSEXP, SEXP atolSEXP, SEXP equal_nanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< double >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< double >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< bool >::type equal_nan(equal_nanSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_allclose_(x, other, rtol, atol, equal_nan));
    return rcpp_result_gen;
END_RCPP
}
// tensor_any_
Rcpp::XPtr<torch::Tensor> tensor_any_(Rcpp::XPtr<torch::Tensor> x, Rcpp::Nullable<int64_t> dim, bool keepdim);
RcppExport SEXP _torch_tensor_any_(SEXP xSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_any_(x, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_argmax_
Rcpp::XPtr<torch::Tensor> tensor_argmax_(Rcpp::XPtr<torch::Tensor> x, Rcpp::Nullable<std::int64_t> dim, bool keepdim);
RcppExport SEXP _torch_tensor_argmax_(SEXP xSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_argmax_(x, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_argmin_
Rcpp::XPtr<torch::Tensor> tensor_argmin_(Rcpp::XPtr<torch::Tensor> x, Rcpp::Nullable<std::int64_t> dim, bool keepdim);
RcppExport SEXP _torch_tensor_argmin_(SEXP xSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_argmin_(x, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_asin_
Rcpp::XPtr<torch::Tensor> tensor_asin_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_asin_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_asin_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_asin__
Rcpp::XPtr<torch::Tensor> tensor_asin__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_asin__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_asin__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_atan_
Rcpp::XPtr<torch::Tensor> tensor_atan_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_atan_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_atan_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_atan__
Rcpp::XPtr<torch::Tensor> tensor_atan__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_atan__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_atan__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_atan2_
Rcpp::XPtr<torch::Tensor> tensor_atan2_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_atan2_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_atan2_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_atan2__
Rcpp::XPtr<torch::Tensor> tensor_atan2__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_atan2__(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_atan2__(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_as_strided_
Rcpp::XPtr<torch::Tensor> tensor_as_strided_(Rcpp::XPtr<torch::Tensor> x, std::vector<int64_t> size, std::vector<int64_t> stride, Rcpp::Nullable<int64_t> storage_offset);
RcppExport SEXP _torch_tensor_as_strided_(SEXP xSEXP, SEXP sizeSEXP, SEXP strideSEXP, SEXP storage_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<int64_t> >::type storage_offset(storage_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_as_strided_(x, size, stride, storage_offset));
    return rcpp_result_gen;
END_RCPP
}
// tensor_to_string_
std::string tensor_to_string_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_to_string_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_to_string_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_sin_
Rcpp::XPtr<torch::Tensor> tensor_sin_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_sin_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_sin_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_sin__
Rcpp::XPtr<torch::Tensor> tensor_sin__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_sin__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_sin__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_sinh_
Rcpp::XPtr<torch::Tensor> tensor_sinh_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_sinh_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_sinh_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_sinh__
Rcpp::XPtr<torch::Tensor> tensor_sinh__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_sinh__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_sinh__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_tan_
Rcpp::XPtr<torch::Tensor> tensor_tan_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_tan_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_tan_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_tan__
Rcpp::XPtr<torch::Tensor> tensor_tan__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_tan__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_tan__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_tanh_
Rcpp::XPtr<torch::Tensor> tensor_tanh_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_tanh_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_tanh_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_tanh__
Rcpp::XPtr<torch::Tensor> tensor_tanh__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_tanh__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_tanh__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_trunc_
Rcpp::XPtr<torch::Tensor> tensor_trunc_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_trunc_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_trunc_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_trunc__
Rcpp::XPtr<torch::Tensor> tensor_trunc__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_trunc__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_trunc__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_backward_
void tensor_backward_(Rcpp::XPtr<torch::Tensor> x, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> gradient, bool keep_graph, bool create_graph);
RcppExport SEXP _torch_tensor_backward_(SEXP xSEXP, SEXP gradientSEXP, SEXP keep_graphSEXP, SEXP create_graphSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> >::type gradient(gradientSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_graph(keep_graphSEXP);
    Rcpp::traits::input_parameter< bool >::type create_graph(create_graphSEXP);
    tensor_backward_(x, gradient, keep_graph, create_graph);
    return R_NilValue;
END_RCPP
}
// tensor_baddbmm_
Rcpp::XPtr<torch::Tensor> tensor_baddbmm_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, SEXP beta, SEXP alpha);
RcppExport SEXP _torch_tensor_baddbmm_(SEXP xSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_baddbmm_(x, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// tensor_baddbmm__
Rcpp::XPtr<torch::Tensor> tensor_baddbmm__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, SEXP beta, SEXP alpha);
RcppExport SEXP _torch_tensor_baddbmm__(SEXP xSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_baddbmm__(x, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// tensor_bernoulli_
Rcpp::XPtr<torch::Tensor> tensor_bernoulli_(Rcpp::XPtr<torch::Tensor> x, Rcpp::Nullable<double> p);
RcppExport SEXP _torch_tensor_bernoulli_(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_bernoulli_(x, p));
    return rcpp_result_gen;
END_RCPP
}
// tensor_bernoulli_double__
Rcpp::XPtr<torch::Tensor> tensor_bernoulli_double__(Rcpp::XPtr<torch::Tensor> x, double p);
RcppExport SEXP _torch_tensor_bernoulli_double__(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_bernoulli_double__(x, p));
    return rcpp_result_gen;
END_RCPP
}
// tensor_bernoulli_tensor__
Rcpp::XPtr<torch::Tensor> tensor_bernoulli_tensor__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> p);
RcppExport SEXP _torch_tensor_bernoulli_tensor__(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_bernoulli_tensor__(x, p));
    return rcpp_result_gen;
END_RCPP
}
// tensor_bincount_
Rcpp::XPtr<torch::Tensor> tensor_bincount_(Rcpp::XPtr<torch::Tensor> x, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weights, std::int64_t minlength);
RcppExport SEXP _torch_tensor_bincount_(SEXP xSEXP, SEXP weightsSEXP, SEXP minlengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type minlength(minlengthSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_bincount_(x, weights, minlength));
    return rcpp_result_gen;
END_RCPP
}
// tensor_bmm_
Rcpp::XPtr<torch::Tensor> tensor_bmm_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> mat2);
RcppExport SEXP _torch_tensor_bmm_(SEXP xSEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_bmm_(x, mat2));
    return rcpp_result_gen;
END_RCPP
}
// tensor_btrifact_
Rcpp::List tensor_btrifact_(Rcpp::XPtr<torch::Tensor> x, bool pivot);
RcppExport SEXP _torch_tensor_btrifact_(SEXP xSEXP, SEXP pivotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type pivot(pivotSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_btrifact_(x, pivot));
    return rcpp_result_gen;
END_RCPP
}
// tensor_btrifact_with_info_
Rcpp::List tensor_btrifact_with_info_(Rcpp::XPtr<torch::Tensor> x, bool pivot);
RcppExport SEXP _torch_tensor_btrifact_with_info_(SEXP xSEXP, SEXP pivotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type pivot(pivotSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_btrifact_with_info_(x, pivot));
    return rcpp_result_gen;
END_RCPP
}
// tensor_byte_
Rcpp::XPtr<torch::Tensor> tensor_byte_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_byte_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_byte_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_btrisolve_
Rcpp::XPtr<torch::Tensor> tensor_btrisolve_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> LU_data, Rcpp::XPtr<torch::Tensor> LU_pivots);
RcppExport SEXP _torch_tensor_btrisolve_(SEXP xSEXP, SEXP LU_dataSEXP, SEXP LU_pivotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type LU_data(LU_dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type LU_pivots(LU_pivotsSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_btrisolve_(x, LU_data, LU_pivots));
    return rcpp_result_gen;
END_RCPP
}
// tensor_cauchy__
Rcpp::XPtr<torch::Tensor> tensor_cauchy__(Rcpp::XPtr<torch::Tensor> x, double median, double sigma);
RcppExport SEXP _torch_tensor_cauchy__(SEXP xSEXP, SEXP medianSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type median(medianSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_cauchy__(x, median, sigma));
    return rcpp_result_gen;
END_RCPP
}
// tensor_ceil_
Rcpp::XPtr<torch::Tensor> tensor_ceil_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_ceil_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_ceil_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_ceil__
Rcpp::XPtr<torch::Tensor> tensor_ceil__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_ceil__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_ceil__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_char_
Rcpp::XPtr<torch::Tensor> tensor_char_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_char_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_char_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_cholesky_
Rcpp::XPtr<torch::Tensor> tensor_cholesky_(Rcpp::XPtr<torch::Tensor> x, bool upper);
RcppExport SEXP _torch_tensor_cholesky_(SEXP xSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_cholesky_(x, upper));
    return rcpp_result_gen;
END_RCPP
}
// tensor_chunk_
Rcpp::List tensor_chunk_(Rcpp::XPtr<torch::Tensor> x, int64_t chunks, int64_t dim);
RcppExport SEXP _torch_tensor_chunk_(SEXP xSEXP, SEXP chunksSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< int64_t >::type chunks(chunksSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_chunk_(x, chunks, dim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_clamp_
Rcpp::XPtr<torch::Tensor> tensor_clamp_(Rcpp::XPtr<torch::Tensor> x, SEXP min, SEXP max);
RcppExport SEXP _torch_tensor_clamp_(SEXP xSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type min(minSEXP);
    Rcpp::traits::input_parameter< SEXP >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_clamp_(x, min, max));
    return rcpp_result_gen;
END_RCPP
}
// tensor_clamp__
Rcpp::XPtr<torch::Tensor> tensor_clamp__(Rcpp::XPtr<torch::Tensor> x, SEXP min, SEXP max);
RcppExport SEXP _torch_tensor_clamp__(SEXP xSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type min(minSEXP);
    Rcpp::traits::input_parameter< SEXP >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_clamp__(x, min, max));
    return rcpp_result_gen;
END_RCPP
}
// tensor_clamp_max_
Rcpp::XPtr<torch::Tensor> tensor_clamp_max_(Rcpp::XPtr<torch::Tensor> x, SEXP max);
RcppExport SEXP _torch_tensor_clamp_max_(SEXP xSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_clamp_max_(x, max));
    return rcpp_result_gen;
END_RCPP
}
// tensor_clamp_max__
Rcpp::XPtr<torch::Tensor> tensor_clamp_max__(Rcpp::XPtr<torch::Tensor> x, SEXP max);
RcppExport SEXP _torch_tensor_clamp_max__(SEXP xSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_clamp_max__(x, max));
    return rcpp_result_gen;
END_RCPP
}
// tensor_clamp_min_
Rcpp::XPtr<torch::Tensor> tensor_clamp_min_(Rcpp::XPtr<torch::Tensor> x, SEXP min);
RcppExport SEXP _torch_tensor_clamp_min_(SEXP xSEXP, SEXP minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type min(minSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_clamp_min_(x, min));
    return rcpp_result_gen;
END_RCPP
}
// tensor_clamp_min__
Rcpp::XPtr<torch::Tensor> tensor_clamp_min__(Rcpp::XPtr<torch::Tensor> x, SEXP min);
RcppExport SEXP _torch_tensor_clamp_min__(SEXP xSEXP, SEXP minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type min(minSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_clamp_min__(x, min));
    return rcpp_result_gen;
END_RCPP
}
// tensor_clone_
Rcpp::XPtr<torch::Tensor> tensor_clone_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_clone_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_clone_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_contiguous_
Rcpp::XPtr<torch::Tensor> tensor_contiguous_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_contiguous_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_contiguous_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_copy__
Rcpp::XPtr<torch::Tensor> tensor_copy__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> src, bool non_blocking);
RcppExport SEXP _torch_tensor_copy__(SEXP xSEXP, SEXP srcSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type src(srcSEXP);
    Rcpp::traits::input_parameter< bool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_copy__(x, src, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// tensor_cos_
Rcpp::XPtr<torch::Tensor> tensor_cos_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_cos_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_cos_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_cos__
Rcpp::XPtr<torch::Tensor> tensor_cos__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_cos__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_cos__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_cosh_
Rcpp::XPtr<torch::Tensor> tensor_cosh_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_cosh_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_cosh_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_cosh__
Rcpp::XPtr<torch::Tensor> tensor_cosh__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_cosh__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_cosh__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_cpu_
Rcpp::XPtr<torch::Tensor> tensor_cpu_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_cpu_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_cpu_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_cross_
Rcpp::XPtr<torch::Tensor> tensor_cross_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other, std::int64_t dim);
RcppExport SEXP _torch_tensor_cross_(SEXP xSEXP, SEXP otherSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_cross_(x, other, dim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_cuda_
Rcpp::XPtr<torch::Tensor> tensor_cuda_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_cuda_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_cuda_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_cumprod_
Rcpp::XPtr<torch::Tensor> tensor_cumprod_(Rcpp::XPtr<torch::Tensor> x, std::int64_t dim);
RcppExport SEXP _torch_tensor_cumprod_(SEXP xSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_cumprod_(x, dim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_cumsum_
Rcpp::XPtr<torch::Tensor> tensor_cumsum_(Rcpp::XPtr<torch::Tensor> x, std::int64_t dim);
RcppExport SEXP _torch_tensor_cumsum_(SEXP xSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_cumsum_(x, dim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_data_
Rcpp::XPtr<torch::Tensor> tensor_data_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_data_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_data_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_data_ptr_
std::string tensor_data_ptr_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_data_ptr_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_data_ptr_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_det_
Rcpp::XPtr<torch::Tensor> tensor_det_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_det_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_det_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_detach_
Rcpp::XPtr<torch::Tensor> tensor_detach_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_detach_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_detach_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_detach__
Rcpp::XPtr<torch::Tensor> tensor_detach__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_detach__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_detach__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_device_
std::string tensor_device_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_device_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_device_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_diag_
Rcpp::XPtr<torch::Tensor> tensor_diag_(Rcpp::XPtr<torch::Tensor> x, std::int64_t diagonal);
RcppExport SEXP _torch_tensor_diag_(SEXP xSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_diag_(x, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// tensor_diag_embed_
Rcpp::XPtr<torch::Tensor> tensor_diag_embed_(Rcpp::XPtr<torch::Tensor> x, std::int64_t offset, std::int64_t dim1, std::int64_t dim2);
RcppExport SEXP _torch_tensor_diag_embed_(SEXP xSEXP, SEXP offsetSEXP, SEXP dim1SEXP, SEXP dim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim2(dim2SEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_diag_embed_(x, offset, dim1, dim2));
    return rcpp_result_gen;
END_RCPP
}
// tensor_diagflat_
Rcpp::XPtr<torch::Tensor> tensor_diagflat_(Rcpp::XPtr<torch::Tensor> x, std::int64_t offset);
RcppExport SEXP _torch_tensor_diagflat_(SEXP xSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_diagflat_(x, offset));
    return rcpp_result_gen;
END_RCPP
}
// tensor_diagonal_
Rcpp::XPtr<torch::Tensor> tensor_diagonal_(Rcpp::XPtr<torch::Tensor> x, std::int64_t offset, std::int64_t dim1, std::int64_t dim2);
RcppExport SEXP _torch_tensor_diagonal_(SEXP xSEXP, SEXP offsetSEXP, SEXP dim1SEXP, SEXP dim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim2(dim2SEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_diagonal_(x, offset, dim1, dim2));
    return rcpp_result_gen;
END_RCPP
}
// tensor_digamma_
Rcpp::XPtr<torch::Tensor> tensor_digamma_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_digamma_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_digamma_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_digamma__
Rcpp::XPtr<torch::Tensor> tensor_digamma__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_digamma__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_digamma__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_dim_
std::int64_t tensor_dim_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_dim_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_dim_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_dist_
Rcpp::XPtr<torch::Tensor> tensor_dist_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other, SEXP p);
RcppExport SEXP _torch_tensor_dist_(SEXP xSEXP, SEXP otherSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_dist_(x, other, p));
    return rcpp_result_gen;
END_RCPP
}
// tensor_div_tensor_
Rcpp::XPtr<torch::Tensor> tensor_div_tensor_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_div_tensor_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_div_tensor_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_div_scalar_
Rcpp::XPtr<torch::Tensor> tensor_div_scalar_(Rcpp::XPtr<torch::Tensor> x, SEXP other);
RcppExport SEXP _torch_tensor_div_scalar_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_div_scalar_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_div_tensor__
Rcpp::XPtr<torch::Tensor> tensor_div_tensor__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_div_tensor__(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_div_tensor__(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_div_scalar__
Rcpp::XPtr<torch::Tensor> tensor_div_scalar__(Rcpp::XPtr<torch::Tensor> x, SEXP other);
RcppExport SEXP _torch_tensor_div_scalar__(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_div_scalar__(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_dot_
Rcpp::XPtr<torch::Tensor> tensor_dot_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> tensor);
RcppExport SEXP _torch_tensor_dot_(SEXP xSEXP, SEXP tensorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor(tensorSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_dot_(x, tensor));
    return rcpp_result_gen;
END_RCPP
}
// tensor_double_
Rcpp::XPtr<torch::Tensor> tensor_double_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_double_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_double_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_dtype_
std::string tensor_dtype_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_dtype_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_dtype_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_eig_
Rcpp::List tensor_eig_(Rcpp::XPtr<torch::Tensor> x, bool eigenvectors);
RcppExport SEXP _torch_tensor_eig_(SEXP xSEXP, SEXP eigenvectorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type eigenvectors(eigenvectorsSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_eig_(x, eigenvectors));
    return rcpp_result_gen;
END_RCPP
}
// tensor_element_size_
int tensor_element_size_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_element_size_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_element_size_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_eq_scalar_
Rcpp::XPtr<torch::Tensor> tensor_eq_scalar_(Rcpp::XPtr<torch::Tensor> x, SEXP other);
RcppExport SEXP _torch_tensor_eq_scalar_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_eq_scalar_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_eq_tensor_
Rcpp::XPtr<torch::Tensor> tensor_eq_tensor_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_eq_tensor_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_eq_tensor_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_equal_
bool tensor_equal_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_equal_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_equal_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_erf_
Rcpp::XPtr<torch::Tensor> tensor_erf_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_erf_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_erf_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_erf__
Rcpp::XPtr<torch::Tensor> tensor_erf__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_erf__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_erf__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_erfc_
Rcpp::XPtr<torch::Tensor> tensor_erfc_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_erfc_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_erfc_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_erfc__
Rcpp::XPtr<torch::Tensor> tensor_erfc__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_erfc__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_erfc__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_erfinv_
Rcpp::XPtr<torch::Tensor> tensor_erfinv_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_erfinv_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_erfinv_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_erfinv__
Rcpp::XPtr<torch::Tensor> tensor_erfinv__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_erfinv__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_erfinv__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_exp_
Rcpp::XPtr<torch::Tensor> tensor_exp_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_exp_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_exp_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_exp__
Rcpp::XPtr<torch::Tensor> tensor_exp__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_exp__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_exp__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_log_
Rcpp::XPtr<torch::Tensor> tensor_log_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_log_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_log_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_log__
Rcpp::XPtr<torch::Tensor> tensor_log__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_log__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_log__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_log2_
Rcpp::XPtr<torch::Tensor> tensor_log2_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_log2_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_log2_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_log2__
Rcpp::XPtr<torch::Tensor> tensor_log2__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_log2__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_log2__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_log10_
Rcpp::XPtr<torch::Tensor> tensor_log10_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_log10_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_log10_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_log10__
Rcpp::XPtr<torch::Tensor> tensor_log10__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_log10__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_log10__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_log1p_
Rcpp::XPtr<torch::Tensor> tensor_log1p_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_log1p_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_log1p_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_log1p__
Rcpp::XPtr<torch::Tensor> tensor_log1p__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_log1p__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_log1p__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_expand_
Rcpp::XPtr<torch::Tensor> tensor_expand_(Rcpp::XPtr<torch::Tensor> x, std::vector<std::int64_t> size, bool implicit);
RcppExport SEXP _torch_tensor_expand_(SEXP xSEXP, SEXP sizeSEXP, SEXP implicitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<std::int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type implicit(implicitSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_expand_(x, size, implicit));
    return rcpp_result_gen;
END_RCPP
}
// tensor_expand_as_
Rcpp::XPtr<torch::Tensor> tensor_expand_as_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_expand_as_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_expand_as_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_expm1_
Rcpp::XPtr<torch::Tensor> tensor_expm1_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_expm1_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_expm1_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_expm1__
Rcpp::XPtr<torch::Tensor> tensor_expm1__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_expm1__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_expm1__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_exponential__
Rcpp::XPtr<torch::Tensor> tensor_exponential__(Rcpp::XPtr<torch::Tensor> x, double lambd);
RcppExport SEXP _torch_tensor_exponential__(SEXP xSEXP, SEXP lambdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lambd(lambdSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_exponential__(x, lambd));
    return rcpp_result_gen;
END_RCPP
}
// tensor_fill_scalar__
Rcpp::XPtr<torch::Tensor> tensor_fill_scalar__(Rcpp::XPtr<torch::Tensor> x, SEXP value);
RcppExport SEXP _torch_tensor_fill_scalar__(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_fill_scalar__(x, value));
    return rcpp_result_gen;
END_RCPP
}
// tensor_fill_tensor__
Rcpp::XPtr<torch::Tensor> tensor_fill_tensor__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> value);
RcppExport SEXP _torch_tensor_fill_tensor__(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_fill_tensor__(x, value));
    return rcpp_result_gen;
END_RCPP
}
// tensor_flatten_
Rcpp::XPtr<torch::Tensor> tensor_flatten_(Rcpp::XPtr<torch::Tensor> x, int64_t start_dim, int64_t end_dim);
RcppExport SEXP _torch_tensor_flatten_(SEXP xSEXP, SEXP start_dimSEXP, SEXP end_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< int64_t >::type start_dim(start_dimSEXP);
    Rcpp::traits::input_parameter< int64_t >::type end_dim(end_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_flatten_(x, start_dim, end_dim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_flip_
Rcpp::XPtr<torch::Tensor> tensor_flip_(Rcpp::XPtr<torch::Tensor> x, std::vector<int64_t> dims);
RcppExport SEXP _torch_tensor_flip_(SEXP xSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_flip_(x, dims));
    return rcpp_result_gen;
END_RCPP
}
// tensor_float_
Rcpp::XPtr<torch::Tensor> tensor_float_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_float_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_float_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_floor_
Rcpp::XPtr<torch::Tensor> tensor_floor_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_floor_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_floor_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_floor__
Rcpp::XPtr<torch::Tensor> tensor_floor__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_floor__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_floor__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_fmod_scalar_
Rcpp::XPtr<torch::Tensor> tensor_fmod_scalar_(Rcpp::XPtr<torch::Tensor> x, SEXP other);
RcppExport SEXP _torch_tensor_fmod_scalar_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_fmod_scalar_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_fmod_tensor_
Rcpp::XPtr<torch::Tensor> tensor_fmod_tensor_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_fmod_tensor_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_fmod_tensor_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_fmod_scalar__
Rcpp::XPtr<torch::Tensor> tensor_fmod_scalar__(Rcpp::XPtr<torch::Tensor> x, SEXP other);
RcppExport SEXP _torch_tensor_fmod_scalar__(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_fmod_scalar__(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_fmod_tensor__
Rcpp::XPtr<torch::Tensor> tensor_fmod_tensor__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_fmod_tensor__(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_fmod_tensor__(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_frac_
Rcpp::XPtr<torch::Tensor> tensor_frac_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_frac_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_frac_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_frac__
Rcpp::XPtr<torch::Tensor> tensor_frac__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_frac__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_frac__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_lerp_
Rcpp::XPtr<torch::Tensor> tensor_lerp_(Rcpp::XPtr<torch::Tensor> start, Rcpp::XPtr<torch::Tensor> end, SEXP weight);
RcppExport SEXP _torch_tensor_lerp_(SEXP startSEXP, SEXP endSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type start(startSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type end(endSEXP);
    Rcpp::traits::input_parameter< SEXP >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_lerp_(start, end, weight));
    return rcpp_result_gen;
END_RCPP
}
// tensor_lerp__
Rcpp::XPtr<torch::Tensor> tensor_lerp__(Rcpp::XPtr<torch::Tensor> start, Rcpp::XPtr<torch::Tensor> end, SEXP weight);
RcppExport SEXP _torch_tensor_lerp__(SEXP startSEXP, SEXP endSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type start(startSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type end(endSEXP);
    Rcpp::traits::input_parameter< SEXP >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_lerp__(start, end, weight));
    return rcpp_result_gen;
END_RCPP
}
// tensor_gather_
Rcpp::XPtr<torch::Tensor> tensor_gather_(Rcpp::XPtr<torch::Tensor> x, int64_t dim, Rcpp::XPtr<torch::Tensor> index);
RcppExport SEXP _torch_tensor_gather_(SEXP xSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_gather_(x, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// tensor_ge_tensor_
Rcpp::XPtr<torch::Tensor> tensor_ge_tensor_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_ge_tensor_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_ge_tensor_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_ge_scalar_
Rcpp::XPtr<torch::Tensor> tensor_ge_scalar_(Rcpp::XPtr<torch::Tensor> x, SEXP other);
RcppExport SEXP _torch_tensor_ge_scalar_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_ge_scalar_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_ge_tensor__
Rcpp::XPtr<torch::Tensor> tensor_ge_tensor__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_ge_tensor__(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_ge_tensor__(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_ge_scalar__
Rcpp::XPtr<torch::Tensor> tensor_ge_scalar__(Rcpp::XPtr<torch::Tensor> x, SEXP other);
RcppExport SEXP _torch_tensor_ge_scalar__(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_ge_scalar__(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_gels_
Rcpp::List tensor_gels_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> A);
RcppExport SEXP _torch_tensor_gels_(SEXP xSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_gels_(x, A));
    return rcpp_result_gen;
END_RCPP
}
// tensor_grad_
Rcpp::XPtr<torch::Tensor> tensor_grad_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_grad_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_grad_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_geometric__
Rcpp::XPtr<torch::Tensor> tensor_geometric__(Rcpp::XPtr<torch::Tensor> x, double p);
RcppExport SEXP _torch_tensor_geometric__(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_geometric__(x, p));
    return rcpp_result_gen;
END_RCPP
}
// tensor_geqrf_
Rcpp::List tensor_geqrf_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_geqrf_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_geqrf_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_ger_
Rcpp::XPtr<torch::Tensor> tensor_ger_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> vec2);
RcppExport SEXP _torch_tensor_ger_(SEXP xSEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_ger_(x, vec2));
    return rcpp_result_gen;
END_RCPP
}
// tensor_gesv_
Rcpp::List tensor_gesv_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> A);
RcppExport SEXP _torch_tensor_gesv_(SEXP xSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_gesv_(x, A));
    return rcpp_result_gen;
END_RCPP
}
// tensor_get_device_
std::int64_t tensor_get_device_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_get_device_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_get_device_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_lt_tensor_
Rcpp::XPtr<torch::Tensor> tensor_lt_tensor_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_lt_tensor_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_lt_tensor_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_lt_scalar_
Rcpp::XPtr<torch::Tensor> tensor_lt_scalar_(Rcpp::XPtr<torch::Tensor> x, SEXP other);
RcppExport SEXP _torch_tensor_lt_scalar_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_lt_scalar_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_lt_tensor__
Rcpp::XPtr<torch::Tensor> tensor_lt_tensor__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_lt_tensor__(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_lt_tensor__(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_lt_scalar__
Rcpp::XPtr<torch::Tensor> tensor_lt_scalar__(Rcpp::XPtr<torch::Tensor> x, SEXP other);
RcppExport SEXP _torch_tensor_lt_scalar__(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_lt_scalar__(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_gt_tensor_
Rcpp::XPtr<torch::Tensor> tensor_gt_tensor_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_gt_tensor_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_gt_tensor_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_gt_scalar_
Rcpp::XPtr<torch::Tensor> tensor_gt_scalar_(Rcpp::XPtr<torch::Tensor> x, SEXP other);
RcppExport SEXP _torch_tensor_gt_scalar_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_gt_scalar_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_gt_tensor__
Rcpp::XPtr<torch::Tensor> tensor_gt_tensor__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_gt_tensor__(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_gt_tensor__(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_gt_scalar__
Rcpp::XPtr<torch::Tensor> tensor_gt_scalar__(Rcpp::XPtr<torch::Tensor> x, SEXP other);
RcppExport SEXP _torch_tensor_gt_scalar__(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_gt_scalar__(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_half_
Rcpp::XPtr<torch::Tensor> tensor_half_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_half_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_half_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_histc_
Rcpp::XPtr<torch::Tensor> tensor_histc_(Rcpp::XPtr<torch::Tensor> x, std::int64_t bins, SEXP min, SEXP max);
RcppExport SEXP _torch_tensor_histc_(SEXP xSEXP, SEXP binsSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type min(minSEXP);
    Rcpp::traits::input_parameter< SEXP >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_histc_(x, bins, min, max));
    return rcpp_result_gen;
END_RCPP
}
// tensor_index_add__
Rcpp::XPtr<torch::Tensor> tensor_index_add__(Rcpp::XPtr<torch::Tensor> x, std::int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source);
RcppExport SEXP _torch_tensor_index_add__(SEXP xSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_index_add__(x, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// tensor_index_copy__
Rcpp::XPtr<torch::Tensor> tensor_index_copy__(Rcpp::XPtr<torch::Tensor> x, std::int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source);
RcppExport SEXP _torch_tensor_index_copy__(SEXP xSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_index_copy__(x, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// tensor_index_fill__
Rcpp::XPtr<torch::Tensor> tensor_index_fill__(Rcpp::XPtr<torch::Tensor> x, std::int64_t dim, Rcpp::XPtr<torch::Tensor> index, SEXP value);
RcppExport SEXP _torch_tensor_index_fill__(SEXP xSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_index_fill__(x, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// tensor_index_put__
Rcpp::XPtr<torch::Tensor> tensor_index_put__(Rcpp::XPtr<torch::Tensor> x, Rcpp::List indices, Rcpp::XPtr<torch::Tensor> values, bool accumulate);
RcppExport SEXP _torch_tensor_index_put__(SEXP xSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP accumulateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< bool >::type accumulate(accumulateSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_index_put__(x, indices, values, accumulate));
    return rcpp_result_gen;
END_RCPP
}
// tensor_index_select_
Rcpp::XPtr<torch::Tensor> tensor_index_select_(Rcpp::XPtr<torch::Tensor> x, std::int64_t dim, Rcpp::XPtr<torch::Tensor> index);
RcppExport SEXP _torch_tensor_index_select_(SEXP xSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_index_select_(x, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// tensor_int_
Rcpp::XPtr<torch::Tensor> tensor_int_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_int_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_int_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_inverse_
Rcpp::XPtr<torch::Tensor> tensor_inverse_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_inverse_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_inverse_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_is_contiguous_
bool tensor_is_contiguous_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_is_contiguous_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_is_contiguous_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_is_cuda_
bool tensor_is_cuda_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_is_cuda_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_is_cuda_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_is_set_to_
bool tensor_is_set_to_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> tensor);
RcppExport SEXP _torch_tensor_is_set_to_(SEXP xSEXP, SEXP tensorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor(tensorSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_is_set_to_(x, tensor));
    return rcpp_result_gen;
END_RCPP
}
// tensor_is_signed_
bool tensor_is_signed_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_is_signed_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_is_signed_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_kthvalue_
Rcpp::List tensor_kthvalue_(Rcpp::XPtr<torch::Tensor> x, int64_t k, int64_t dim, bool keepdim);
RcppExport SEXP _torch_tensor_kthvalue_(SEXP xSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< int64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_kthvalue_(x, k, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_le_tensor_
Rcpp::XPtr<torch::Tensor> tensor_le_tensor_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_le_tensor_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_le_tensor_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_le_scalar_
Rcpp::XPtr<torch::Tensor> tensor_le_scalar_(Rcpp::XPtr<torch::Tensor> x, SEXP other);
RcppExport SEXP _torch_tensor_le_scalar_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_le_scalar_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_le_tensor__
Rcpp::XPtr<torch::Tensor> tensor_le_tensor__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_le_tensor__(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_le_tensor__(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_le_scalar__
Rcpp::XPtr<torch::Tensor> tensor_le_scalar__(Rcpp::XPtr<torch::Tensor> x, SEXP other);
RcppExport SEXP _torch_tensor_le_scalar__(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_le_scalar__(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_mean_
Rcpp::XPtr<torch::Tensor> tensor_mean_(Rcpp::XPtr<torch::Tensor> x, Rcpp::Nullable<std::vector<std::int64_t>> dim, bool keepdim);
RcppExport SEXP _torch_tensor_mean_(SEXP xSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::vector<std::int64_t>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_mean_(x, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_var_
Rcpp::XPtr<torch::Tensor> tensor_var_(Rcpp::XPtr<torch::Tensor> x, bool unbiased, Rcpp::Nullable<std::int64_t> dim, bool keepdim);
RcppExport SEXP _torch_tensor_var_(SEXP xSEXP, SEXP unbiasedSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_var_(x, unbiased, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_std_
Rcpp::XPtr<torch::Tensor> tensor_std_(Rcpp::XPtr<torch::Tensor> x, bool unbiased, Rcpp::Nullable<std::int64_t> dim, bool keepdim);
RcppExport SEXP _torch_tensor_std_(SEXP xSEXP, SEXP unbiasedSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_std_(x, unbiased, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_min_
Rcpp::XPtr<torch::Tensor> tensor_min_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_min_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_min_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_min_dim_
Rcpp::List tensor_min_dim_(Rcpp::XPtr<torch::Tensor> x, std::int64_t dim, bool keepdim);
RcppExport SEXP _torch_tensor_min_dim_(SEXP xSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_min_dim_(x, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_min_tensor_
Rcpp::XPtr<torch::Tensor> tensor_min_tensor_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_min_tensor_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_min_tensor_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_max_
Rcpp::XPtr<torch::Tensor> tensor_max_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_max_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_max_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_max_dim_
Rcpp::List tensor_max_dim_(Rcpp::XPtr<torch::Tensor> x, std::int64_t dim, bool keepdim);
RcppExport SEXP _torch_tensor_max_dim_(SEXP xSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_max_dim_(x, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_max_tensor_
Rcpp::XPtr<torch::Tensor> tensor_max_tensor_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_max_tensor_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_max_tensor_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_prod_
Rcpp::XPtr<torch::Tensor> tensor_prod_(Rcpp::XPtr<torch::Tensor> x, Rcpp::Nullable<std::int64_t> dim, Rcpp::Nullable<bool> keepdim, Rcpp::Nullable<std::string> dtype);
RcppExport SEXP _torch_tensor_prod_(SEXP xSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_prod_(x, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// tensor_median_dim_
Rcpp::List tensor_median_dim_(Rcpp::XPtr<torch::Tensor> x, std::int64_t dim, bool keepdim);
RcppExport SEXP _torch_tensor_median_dim_(SEXP xSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_median_dim_(x, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_median_
Rcpp::XPtr<torch::Tensor> tensor_median_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_median_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_median_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_mode_
Rcpp::List tensor_mode_(Rcpp::XPtr<torch::Tensor> x, std::int64_t dim, bool keepdim);
RcppExport SEXP _torch_tensor_mode_(SEXP xSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_mode_(x, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_logsumexp_
Rcpp::XPtr<torch::Tensor> tensor_logsumexp_(Rcpp::XPtr<torch::Tensor> x, std::int64_t dim, bool keepdim);
RcppExport SEXP _torch_tensor_logsumexp_(SEXP xSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_logsumexp_(x, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_masked_scatter__
Rcpp::XPtr<torch::Tensor> tensor_masked_scatter__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> mask, Rcpp::XPtr<torch::Tensor> source);
RcppExport SEXP _torch_tensor_masked_scatter__(SEXP xSEXP, SEXP maskSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_masked_scatter__(x, mask, source));
    return rcpp_result_gen;
END_RCPP
}
// tensor_masked_fill__
Rcpp::XPtr<torch::Tensor> tensor_masked_fill__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> mask, SEXP value);
RcppExport SEXP _torch_tensor_masked_fill__(SEXP xSEXP, SEXP maskSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_masked_fill__(x, mask, value));
    return rcpp_result_gen;
END_RCPP
}
// tensor_masked_select_
Rcpp::XPtr<torch::Tensor> tensor_masked_select_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> mask);
RcppExport SEXP _torch_tensor_masked_select_(SEXP xSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_masked_select_(x, mask));
    return rcpp_result_gen;
END_RCPP
}
// tensor_mm_
Rcpp::XPtr<torch::Tensor> tensor_mm_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> mat2);
RcppExport SEXP _torch_tensor_mm_(SEXP xSEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_mm_(x, mat2));
    return rcpp_result_gen;
END_RCPP
}
// tensor_mul_tensor_
Rcpp::XPtr<torch::Tensor> tensor_mul_tensor_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_tensor_mul_tensor_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_mul_tensor_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_mul_scalar_
Rcpp::XPtr<torch::Tensor> tensor_mul_scalar_(Rcpp::XPtr<torch::Tensor> x, SEXP other);
RcppExport SEXP _torch_tensor_mul_scalar_(SEXP xSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_mul_scalar_(x, other));
    return rcpp_result_gen;
END_RCPP
}
// tensor_permute_
Rcpp::XPtr<torch::Tensor> tensor_permute_(Rcpp::XPtr<torch::Tensor> x, std::vector<std::int64_t> dims);
RcppExport SEXP _torch_tensor_permute_(SEXP xSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<std::int64_t> >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_permute_(x, dims));
    return rcpp_result_gen;
END_RCPP
}
// tensor_pow_tensor_
Rcpp::XPtr<torch::Tensor> tensor_pow_tensor_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> exponent);
RcppExport SEXP _torch_tensor_pow_tensor_(SEXP xSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_pow_tensor_(x, exponent));
    return rcpp_result_gen;
END_RCPP
}
// tensor_pow_scalar_
Rcpp::XPtr<torch::Tensor> tensor_pow_scalar_(Rcpp::XPtr<torch::Tensor> x, SEXP exponent);
RcppExport SEXP _torch_tensor_pow_scalar_(SEXP xSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_pow_scalar_(x, exponent));
    return rcpp_result_gen;
END_RCPP
}
// tensor_qr_
Rcpp::List tensor_qr_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_qr_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_qr_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_repeat_
Rcpp::XPtr<torch::Tensor> tensor_repeat_(Rcpp::XPtr<torch::Tensor> x, std::vector<std::int64_t> sizes);
RcppExport SEXP _torch_tensor_repeat_(SEXP xSEXP, SEXP sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<std::int64_t> >::type sizes(sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_repeat_(x, sizes));
    return rcpp_result_gen;
END_RCPP
}
// tensor_reciprocal_
Rcpp::XPtr<torch::Tensor> tensor_reciprocal_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_reciprocal_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_reciprocal_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_reciprocal__
Rcpp::XPtr<torch::Tensor> tensor_reciprocal__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_reciprocal__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_reciprocal__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_renorm_
Rcpp::XPtr<torch::Tensor> tensor_renorm_(Rcpp::XPtr<torch::Tensor> x, SEXP p, std::int64_t dim, SEXP maxnorm);
RcppExport SEXP _torch_tensor_renorm_(SEXP xSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP maxnormSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< SEXP >::type maxnorm(maxnormSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_renorm_(x, p, dim, maxnorm));
    return rcpp_result_gen;
END_RCPP
}
// tensor_renorm__
Rcpp::XPtr<torch::Tensor> tensor_renorm__(Rcpp::XPtr<torch::Tensor> x, SEXP p, std::int64_t dim, SEXP maxnorm);
RcppExport SEXP _torch_tensor_renorm__(SEXP xSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP maxnormSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< SEXP >::type maxnorm(maxnormSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_renorm__(x, p, dim, maxnorm));
    return rcpp_result_gen;
END_RCPP
}
// tensor_resize__
Rcpp::XPtr<torch::Tensor> tensor_resize__(Rcpp::XPtr<torch::Tensor> x, std::vector<int64_t> sizes);
RcppExport SEXP _torch_tensor_resize__(SEXP xSEXP, SEXP sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type sizes(sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_resize__(x, sizes));
    return rcpp_result_gen;
END_RCPP
}
// tensor_round_
Rcpp::XPtr<torch::Tensor> tensor_round_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_round_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_round_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_round__
Rcpp::XPtr<torch::Tensor> tensor_round__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_round__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_round__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_rsqrt_
Rcpp::XPtr<torch::Tensor> tensor_rsqrt_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_rsqrt_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_rsqrt_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_rsqrt__
Rcpp::XPtr<torch::Tensor> tensor_rsqrt__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_rsqrt__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_rsqrt__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_sigmoid_
Rcpp::XPtr<torch::Tensor> tensor_sigmoid_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_sigmoid_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_sigmoid_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_sigmoid__
Rcpp::XPtr<torch::Tensor> tensor_sigmoid__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_sigmoid__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_sigmoid__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_sign_
Rcpp::XPtr<torch::Tensor> tensor_sign_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_sign_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_sign_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_sort_
Rcpp::List tensor_sort_(Rcpp::XPtr<torch::Tensor> x, Rcpp::Nullable<std::int64_t> dim, bool descending);
RcppExport SEXP _torch_tensor_sort_(SEXP xSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_sort_(x, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// tensor_sqrt_
Rcpp::XPtr<torch::Tensor> tensor_sqrt_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_sqrt_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_sqrt_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_sqrt__
Rcpp::XPtr<torch::Tensor> tensor_sqrt__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_sqrt__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_sqrt__(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_sub_tensor_
Rcpp::XPtr<torch::Tensor> tensor_sub_tensor_(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other, SEXP alpha);
RcppExport SEXP _torch_tensor_sub_tensor_(SEXP xSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_sub_tensor_(x, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// tensor_sub_scalar_
Rcpp::XPtr<torch::Tensor> tensor_sub_scalar_(Rcpp::XPtr<torch::Tensor> x, SEXP other, SEXP alpha);
RcppExport SEXP _torch_tensor_sub_scalar_(SEXP xSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type other(otherSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_sub_scalar_(x, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// tensor_sub_tensor__
Rcpp::XPtr<torch::Tensor> tensor_sub_tensor__(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> other, SEXP alpha);
RcppExport SEXP _torch_tensor_sub_tensor__(SEXP xSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_sub_tensor__(x, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// tensor_sub_scalar__
Rcpp::XPtr<torch::Tensor> tensor_sub_scalar__(Rcpp::XPtr<torch::Tensor> x, SEXP other, SEXP alpha);
RcppExport SEXP _torch_tensor_sub_scalar__(SEXP xSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type other(otherSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_sub_scalar__(x, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// tensor_sum_
Rcpp::XPtr<torch::Tensor> tensor_sum_(Rcpp::XPtr<torch::Tensor> x, Rcpp::Nullable<std::vector<std::int64_t>> dim, bool keepdim);
RcppExport SEXP _torch_tensor_sum_(SEXP xSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::vector<std::int64_t>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_sum_(x, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_transpose_
Rcpp::XPtr<torch::Tensor> tensor_transpose_(Rcpp::XPtr<torch::Tensor> x, std::int64_t dim0, std::int64_t dim1);
RcppExport SEXP _torch_tensor_transpose_(SEXP xSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_transpose_(x, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// tensor_transpose__
Rcpp::XPtr<torch::Tensor> tensor_transpose__(Rcpp::XPtr<torch::Tensor> x, std::int64_t dim0, std::int64_t dim1);
RcppExport SEXP _torch_tensor_transpose__(SEXP xSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_transpose__(x, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// tensor_t_
Rcpp::XPtr<torch::Tensor> tensor_t_(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_t_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_t_(x));
    return rcpp_result_gen;
END_RCPP
}
// tensor_tril_
Rcpp::XPtr<torch::Tensor> tensor_tril_(Rcpp::XPtr<torch::Tensor> x, std::int64_t diagonal);
RcppExport SEXP _torch_tensor_tril_(SEXP xSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_tril_(x, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// tensor_triu_
Rcpp::XPtr<torch::Tensor> tensor_triu_(Rcpp::XPtr<torch::Tensor> x, std::int64_t diagonal);
RcppExport SEXP _torch_tensor_triu_(SEXP xSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_triu_(x, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// tensor_topk_
Rcpp::List tensor_topk_(Rcpp::XPtr<torch::Tensor> x, std::int64_t k, Rcpp::Nullable<std::int64_t> dim, bool largest, bool sorted);
RcppExport SEXP _torch_tensor_topk_(SEXP xSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP largestSEXP, SEXP sortedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type largest(largestSEXP);
    Rcpp::traits::input_parameter< bool >::type sorted(sortedSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_topk_(x, k, dim, largest, sorted));
    return rcpp_result_gen;
END_RCPP
}
// tensor_to_
Rcpp::XPtr<torch::Tensor> tensor_to_(Rcpp::XPtr<torch::Tensor> x, Rcpp::Nullable<std::string> dtype, Rcpp::Nullable<std::string> device, bool requires_grad);
RcppExport SEXP _torch_tensor_to_(SEXP xSEXP, SEXP dtypeSEXP, SEXP deviceSEXP, SEXP requires_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< bool >::type requires_grad(requires_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_to_(x, dtype, device, requires_grad));
    return rcpp_result_gen;
END_RCPP
}
// tensor_unfold_
Rcpp::XPtr<torch::Tensor> tensor_unfold_(Rcpp::XPtr<torch::Tensor> x, std::int64_t dim, std::int64_t size, std::int64_t step);
RcppExport SEXP _torch_tensor_unfold_(SEXP xSEXP, SEXP dimSEXP, SEXP sizeSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_unfold_(x, dim, size, step));
    return rcpp_result_gen;
END_RCPP
}
// tensor_unique_return_inverse_
Rcpp::List tensor_unique_return_inverse_(Rcpp::XPtr<torch::Tensor> x, bool sorted, Rcpp::Nullable<std::int64_t> dim);
RcppExport SEXP _torch_tensor_unique_return_inverse_(SEXP xSEXP, SEXP sortedSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type sorted(sortedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::int64_t> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_unique_return_inverse_(x, sorted, dim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_unique_
Rcpp::XPtr<torch::Tensor> tensor_unique_(Rcpp::XPtr<torch::Tensor> x, bool sorted, Rcpp::Nullable<std::int64_t> dim);
RcppExport SEXP _torch_tensor_unique_(SEXP xSEXP, SEXP sortedSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type sorted(sortedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::int64_t> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_unique_(x, sorted, dim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_unsqueeze_
Rcpp::XPtr<torch::Tensor> tensor_unsqueeze_(Rcpp::XPtr<torch::Tensor> x, std::int64_t dim);
RcppExport SEXP _torch_tensor_unsqueeze_(SEXP xSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_unsqueeze_(x, dim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_unsqueeze__
Rcpp::XPtr<torch::Tensor> tensor_unsqueeze__(Rcpp::XPtr<torch::Tensor> x, std::int64_t dim);
RcppExport SEXP _torch_tensor_unsqueeze__(SEXP xSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_unsqueeze__(x, dim));
    return rcpp_result_gen;
END_RCPP
}
// tensor_zero__
Rcpp::XPtr<torch::Tensor> tensor_zero__(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_tensor_zero__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_zero__(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_torch_cuda_is_available_", (DL_FUNC) &_torch_cuda_is_available_, 0},
    {"_torch_set_grad_mode", (DL_FUNC) &_torch_set_grad_mode, 1},
    {"_torch_tensor_from_r_", (DL_FUNC) &_torch_tensor_from_r_, 5},
    {"_torch_tensor_", (DL_FUNC) &_torch_tensor_, 4},
    {"_torch_as_array_tensor_", (DL_FUNC) &_torch_as_array_tensor_, 1},
    {"_torch_torch_randn_", (DL_FUNC) &_torch_torch_randn_, 5},
    {"_torch_torch_arange_", (DL_FUNC) &_torch_torch_arange_, 7},
    {"_torch_torch_empty_", (DL_FUNC) &_torch_torch_empty_, 5},
    {"_torch_torch_eye_", (DL_FUNC) &_torch_torch_eye_, 6},
    {"_torch_torch_full_", (DL_FUNC) &_torch_torch_full_, 6},
    {"_torch_torch_linspace_", (DL_FUNC) &_torch_torch_linspace_, 7},
    {"_torch_torch_logspace_", (DL_FUNC) &_torch_torch_logspace_, 7},
    {"_torch_torch_ones_", (DL_FUNC) &_torch_torch_ones_, 5},
    {"_torch_torch_rand_", (DL_FUNC) &_torch_torch_rand_, 5},
    {"_torch_torch_randint_", (DL_FUNC) &_torch_torch_randint_, 7},
    {"_torch_torch_randperm_", (DL_FUNC) &_torch_torch_randperm_, 5},
    {"_torch_torch_zeros_", (DL_FUNC) &_torch_torch_zeros_, 5},
    {"_torch_tensor_print_", (DL_FUNC) &_torch_tensor_print_, 1},
    {"_torch_tensor_abs_", (DL_FUNC) &_torch_tensor_abs_, 1},
    {"_torch_tensor_abs__", (DL_FUNC) &_torch_tensor_abs__, 1},
    {"_torch_tensor_acos_", (DL_FUNC) &_torch_tensor_acos_, 1},
    {"_torch_tensor_acos__", (DL_FUNC) &_torch_tensor_acos__, 1},
    {"_torch_tensor_add_tensor_", (DL_FUNC) &_torch_tensor_add_tensor_, 2},
    {"_torch_tensor_add_scalar_", (DL_FUNC) &_torch_tensor_add_scalar_, 2},
    {"_torch_tensor_add_tensor__", (DL_FUNC) &_torch_tensor_add_tensor__, 2},
    {"_torch_tensor_add_scalar__", (DL_FUNC) &_torch_tensor_add_scalar__, 2},
    {"_torch_tensor_addbmm_", (DL_FUNC) &_torch_tensor_addbmm_, 5},
    {"_torch_tensor_addbmm__", (DL_FUNC) &_torch_tensor_addbmm__, 5},
    {"_torch_tensor_addcdiv_", (DL_FUNC) &_torch_tensor_addcdiv_, 4},
    {"_torch_tensor_addcdiv__", (DL_FUNC) &_torch_tensor_addcdiv__, 4},
    {"_torch_tensor_addcmul_", (DL_FUNC) &_torch_tensor_addcmul_, 4},
    {"_torch_tensor_addcmul__", (DL_FUNC) &_torch_tensor_addcmul__, 4},
    {"_torch_tensor_addmm_", (DL_FUNC) &_torch_tensor_addmm_, 5},
    {"_torch_tensor_addmm__", (DL_FUNC) &_torch_tensor_addmm__, 5},
    {"_torch_tensor_addmv_", (DL_FUNC) &_torch_tensor_addmv_, 5},
    {"_torch_tensor_addmv__", (DL_FUNC) &_torch_tensor_addmv__, 5},
    {"_torch_tensor_addr_", (DL_FUNC) &_torch_tensor_addr_, 5},
    {"_torch_tensor_addr__", (DL_FUNC) &_torch_tensor_addr__, 5},
    {"_torch_tensor_all_", (DL_FUNC) &_torch_tensor_all_, 3},
    {"_torch_tensor_allclose_", (DL_FUNC) &_torch_tensor_allclose_, 5},
    {"_torch_tensor_any_", (DL_FUNC) &_torch_tensor_any_, 3},
    {"_torch_tensor_argmax_", (DL_FUNC) &_torch_tensor_argmax_, 3},
    {"_torch_tensor_argmin_", (DL_FUNC) &_torch_tensor_argmin_, 3},
    {"_torch_tensor_asin_", (DL_FUNC) &_torch_tensor_asin_, 1},
    {"_torch_tensor_asin__", (DL_FUNC) &_torch_tensor_asin__, 1},
    {"_torch_tensor_atan_", (DL_FUNC) &_torch_tensor_atan_, 1},
    {"_torch_tensor_atan__", (DL_FUNC) &_torch_tensor_atan__, 1},
    {"_torch_tensor_atan2_", (DL_FUNC) &_torch_tensor_atan2_, 2},
    {"_torch_tensor_atan2__", (DL_FUNC) &_torch_tensor_atan2__, 2},
    {"_torch_tensor_as_strided_", (DL_FUNC) &_torch_tensor_as_strided_, 4},
    {"_torch_tensor_to_string_", (DL_FUNC) &_torch_tensor_to_string_, 1},
    {"_torch_tensor_sin_", (DL_FUNC) &_torch_tensor_sin_, 1},
    {"_torch_tensor_sin__", (DL_FUNC) &_torch_tensor_sin__, 1},
    {"_torch_tensor_sinh_", (DL_FUNC) &_torch_tensor_sinh_, 1},
    {"_torch_tensor_sinh__", (DL_FUNC) &_torch_tensor_sinh__, 1},
    {"_torch_tensor_tan_", (DL_FUNC) &_torch_tensor_tan_, 1},
    {"_torch_tensor_tan__", (DL_FUNC) &_torch_tensor_tan__, 1},
    {"_torch_tensor_tanh_", (DL_FUNC) &_torch_tensor_tanh_, 1},
    {"_torch_tensor_tanh__", (DL_FUNC) &_torch_tensor_tanh__, 1},
    {"_torch_tensor_trunc_", (DL_FUNC) &_torch_tensor_trunc_, 1},
    {"_torch_tensor_trunc__", (DL_FUNC) &_torch_tensor_trunc__, 1},
    {"_torch_tensor_backward_", (DL_FUNC) &_torch_tensor_backward_, 4},
    {"_torch_tensor_baddbmm_", (DL_FUNC) &_torch_tensor_baddbmm_, 5},
    {"_torch_tensor_baddbmm__", (DL_FUNC) &_torch_tensor_baddbmm__, 5},
    {"_torch_tensor_bernoulli_", (DL_FUNC) &_torch_tensor_bernoulli_, 2},
    {"_torch_tensor_bernoulli_double__", (DL_FUNC) &_torch_tensor_bernoulli_double__, 2},
    {"_torch_tensor_bernoulli_tensor__", (DL_FUNC) &_torch_tensor_bernoulli_tensor__, 2},
    {"_torch_tensor_bincount_", (DL_FUNC) &_torch_tensor_bincount_, 3},
    {"_torch_tensor_bmm_", (DL_FUNC) &_torch_tensor_bmm_, 2},
    {"_torch_tensor_btrifact_", (DL_FUNC) &_torch_tensor_btrifact_, 2},
    {"_torch_tensor_btrifact_with_info_", (DL_FUNC) &_torch_tensor_btrifact_with_info_, 2},
    {"_torch_tensor_byte_", (DL_FUNC) &_torch_tensor_byte_, 1},
    {"_torch_tensor_btrisolve_", (DL_FUNC) &_torch_tensor_btrisolve_, 3},
    {"_torch_tensor_cauchy__", (DL_FUNC) &_torch_tensor_cauchy__, 3},
    {"_torch_tensor_ceil_", (DL_FUNC) &_torch_tensor_ceil_, 1},
    {"_torch_tensor_ceil__", (DL_FUNC) &_torch_tensor_ceil__, 1},
    {"_torch_tensor_char_", (DL_FUNC) &_torch_tensor_char_, 1},
    {"_torch_tensor_cholesky_", (DL_FUNC) &_torch_tensor_cholesky_, 2},
    {"_torch_tensor_chunk_", (DL_FUNC) &_torch_tensor_chunk_, 3},
    {"_torch_tensor_clamp_", (DL_FUNC) &_torch_tensor_clamp_, 3},
    {"_torch_tensor_clamp__", (DL_FUNC) &_torch_tensor_clamp__, 3},
    {"_torch_tensor_clamp_max_", (DL_FUNC) &_torch_tensor_clamp_max_, 2},
    {"_torch_tensor_clamp_max__", (DL_FUNC) &_torch_tensor_clamp_max__, 2},
    {"_torch_tensor_clamp_min_", (DL_FUNC) &_torch_tensor_clamp_min_, 2},
    {"_torch_tensor_clamp_min__", (DL_FUNC) &_torch_tensor_clamp_min__, 2},
    {"_torch_tensor_clone_", (DL_FUNC) &_torch_tensor_clone_, 1},
    {"_torch_tensor_contiguous_", (DL_FUNC) &_torch_tensor_contiguous_, 1},
    {"_torch_tensor_copy__", (DL_FUNC) &_torch_tensor_copy__, 3},
    {"_torch_tensor_cos_", (DL_FUNC) &_torch_tensor_cos_, 1},
    {"_torch_tensor_cos__", (DL_FUNC) &_torch_tensor_cos__, 1},
    {"_torch_tensor_cosh_", (DL_FUNC) &_torch_tensor_cosh_, 1},
    {"_torch_tensor_cosh__", (DL_FUNC) &_torch_tensor_cosh__, 1},
    {"_torch_tensor_cpu_", (DL_FUNC) &_torch_tensor_cpu_, 1},
    {"_torch_tensor_cross_", (DL_FUNC) &_torch_tensor_cross_, 3},
    {"_torch_tensor_cuda_", (DL_FUNC) &_torch_tensor_cuda_, 1},
    {"_torch_tensor_cumprod_", (DL_FUNC) &_torch_tensor_cumprod_, 2},
    {"_torch_tensor_cumsum_", (DL_FUNC) &_torch_tensor_cumsum_, 2},
    {"_torch_tensor_data_", (DL_FUNC) &_torch_tensor_data_, 1},
    {"_torch_tensor_data_ptr_", (DL_FUNC) &_torch_tensor_data_ptr_, 1},
    {"_torch_tensor_det_", (DL_FUNC) &_torch_tensor_det_, 1},
    {"_torch_tensor_detach_", (DL_FUNC) &_torch_tensor_detach_, 1},
    {"_torch_tensor_detach__", (DL_FUNC) &_torch_tensor_detach__, 1},
    {"_torch_tensor_device_", (DL_FUNC) &_torch_tensor_device_, 1},
    {"_torch_tensor_diag_", (DL_FUNC) &_torch_tensor_diag_, 2},
    {"_torch_tensor_diag_embed_", (DL_FUNC) &_torch_tensor_diag_embed_, 4},
    {"_torch_tensor_diagflat_", (DL_FUNC) &_torch_tensor_diagflat_, 2},
    {"_torch_tensor_diagonal_", (DL_FUNC) &_torch_tensor_diagonal_, 4},
    {"_torch_tensor_digamma_", (DL_FUNC) &_torch_tensor_digamma_, 1},
    {"_torch_tensor_digamma__", (DL_FUNC) &_torch_tensor_digamma__, 1},
    {"_torch_tensor_dim_", (DL_FUNC) &_torch_tensor_dim_, 1},
    {"_torch_tensor_dist_", (DL_FUNC) &_torch_tensor_dist_, 3},
    {"_torch_tensor_div_tensor_", (DL_FUNC) &_torch_tensor_div_tensor_, 2},
    {"_torch_tensor_div_scalar_", (DL_FUNC) &_torch_tensor_div_scalar_, 2},
    {"_torch_tensor_div_tensor__", (DL_FUNC) &_torch_tensor_div_tensor__, 2},
    {"_torch_tensor_div_scalar__", (DL_FUNC) &_torch_tensor_div_scalar__, 2},
    {"_torch_tensor_dot_", (DL_FUNC) &_torch_tensor_dot_, 2},
    {"_torch_tensor_double_", (DL_FUNC) &_torch_tensor_double_, 1},
    {"_torch_tensor_dtype_", (DL_FUNC) &_torch_tensor_dtype_, 1},
    {"_torch_tensor_eig_", (DL_FUNC) &_torch_tensor_eig_, 2},
    {"_torch_tensor_element_size_", (DL_FUNC) &_torch_tensor_element_size_, 1},
    {"_torch_tensor_eq_scalar_", (DL_FUNC) &_torch_tensor_eq_scalar_, 2},
    {"_torch_tensor_eq_tensor_", (DL_FUNC) &_torch_tensor_eq_tensor_, 2},
    {"_torch_tensor_equal_", (DL_FUNC) &_torch_tensor_equal_, 2},
    {"_torch_tensor_erf_", (DL_FUNC) &_torch_tensor_erf_, 1},
    {"_torch_tensor_erf__", (DL_FUNC) &_torch_tensor_erf__, 1},
    {"_torch_tensor_erfc_", (DL_FUNC) &_torch_tensor_erfc_, 1},
    {"_torch_tensor_erfc__", (DL_FUNC) &_torch_tensor_erfc__, 1},
    {"_torch_tensor_erfinv_", (DL_FUNC) &_torch_tensor_erfinv_, 1},
    {"_torch_tensor_erfinv__", (DL_FUNC) &_torch_tensor_erfinv__, 1},
    {"_torch_tensor_exp_", (DL_FUNC) &_torch_tensor_exp_, 1},
    {"_torch_tensor_exp__", (DL_FUNC) &_torch_tensor_exp__, 1},
    {"_torch_tensor_log_", (DL_FUNC) &_torch_tensor_log_, 1},
    {"_torch_tensor_log__", (DL_FUNC) &_torch_tensor_log__, 1},
    {"_torch_tensor_log2_", (DL_FUNC) &_torch_tensor_log2_, 1},
    {"_torch_tensor_log2__", (DL_FUNC) &_torch_tensor_log2__, 1},
    {"_torch_tensor_log10_", (DL_FUNC) &_torch_tensor_log10_, 1},
    {"_torch_tensor_log10__", (DL_FUNC) &_torch_tensor_log10__, 1},
    {"_torch_tensor_log1p_", (DL_FUNC) &_torch_tensor_log1p_, 1},
    {"_torch_tensor_log1p__", (DL_FUNC) &_torch_tensor_log1p__, 1},
    {"_torch_tensor_expand_", (DL_FUNC) &_torch_tensor_expand_, 3},
    {"_torch_tensor_expand_as_", (DL_FUNC) &_torch_tensor_expand_as_, 2},
    {"_torch_tensor_expm1_", (DL_FUNC) &_torch_tensor_expm1_, 1},
    {"_torch_tensor_expm1__", (DL_FUNC) &_torch_tensor_expm1__, 1},
    {"_torch_tensor_exponential__", (DL_FUNC) &_torch_tensor_exponential__, 2},
    {"_torch_tensor_fill_scalar__", (DL_FUNC) &_torch_tensor_fill_scalar__, 2},
    {"_torch_tensor_fill_tensor__", (DL_FUNC) &_torch_tensor_fill_tensor__, 2},
    {"_torch_tensor_flatten_", (DL_FUNC) &_torch_tensor_flatten_, 3},
    {"_torch_tensor_flip_", (DL_FUNC) &_torch_tensor_flip_, 2},
    {"_torch_tensor_float_", (DL_FUNC) &_torch_tensor_float_, 1},
    {"_torch_tensor_floor_", (DL_FUNC) &_torch_tensor_floor_, 1},
    {"_torch_tensor_floor__", (DL_FUNC) &_torch_tensor_floor__, 1},
    {"_torch_tensor_fmod_scalar_", (DL_FUNC) &_torch_tensor_fmod_scalar_, 2},
    {"_torch_tensor_fmod_tensor_", (DL_FUNC) &_torch_tensor_fmod_tensor_, 2},
    {"_torch_tensor_fmod_scalar__", (DL_FUNC) &_torch_tensor_fmod_scalar__, 2},
    {"_torch_tensor_fmod_tensor__", (DL_FUNC) &_torch_tensor_fmod_tensor__, 2},
    {"_torch_tensor_frac_", (DL_FUNC) &_torch_tensor_frac_, 1},
    {"_torch_tensor_frac__", (DL_FUNC) &_torch_tensor_frac__, 1},
    {"_torch_tensor_lerp_", (DL_FUNC) &_torch_tensor_lerp_, 3},
    {"_torch_tensor_lerp__", (DL_FUNC) &_torch_tensor_lerp__, 3},
    {"_torch_tensor_gather_", (DL_FUNC) &_torch_tensor_gather_, 3},
    {"_torch_tensor_ge_tensor_", (DL_FUNC) &_torch_tensor_ge_tensor_, 2},
    {"_torch_tensor_ge_scalar_", (DL_FUNC) &_torch_tensor_ge_scalar_, 2},
    {"_torch_tensor_ge_tensor__", (DL_FUNC) &_torch_tensor_ge_tensor__, 2},
    {"_torch_tensor_ge_scalar__", (DL_FUNC) &_torch_tensor_ge_scalar__, 2},
    {"_torch_tensor_gels_", (DL_FUNC) &_torch_tensor_gels_, 2},
    {"_torch_tensor_grad_", (DL_FUNC) &_torch_tensor_grad_, 1},
    {"_torch_tensor_geometric__", (DL_FUNC) &_torch_tensor_geometric__, 2},
    {"_torch_tensor_geqrf_", (DL_FUNC) &_torch_tensor_geqrf_, 1},
    {"_torch_tensor_ger_", (DL_FUNC) &_torch_tensor_ger_, 2},
    {"_torch_tensor_gesv_", (DL_FUNC) &_torch_tensor_gesv_, 2},
    {"_torch_tensor_get_device_", (DL_FUNC) &_torch_tensor_get_device_, 1},
    {"_torch_tensor_lt_tensor_", (DL_FUNC) &_torch_tensor_lt_tensor_, 2},
    {"_torch_tensor_lt_scalar_", (DL_FUNC) &_torch_tensor_lt_scalar_, 2},
    {"_torch_tensor_lt_tensor__", (DL_FUNC) &_torch_tensor_lt_tensor__, 2},
    {"_torch_tensor_lt_scalar__", (DL_FUNC) &_torch_tensor_lt_scalar__, 2},
    {"_torch_tensor_gt_tensor_", (DL_FUNC) &_torch_tensor_gt_tensor_, 2},
    {"_torch_tensor_gt_scalar_", (DL_FUNC) &_torch_tensor_gt_scalar_, 2},
    {"_torch_tensor_gt_tensor__", (DL_FUNC) &_torch_tensor_gt_tensor__, 2},
    {"_torch_tensor_gt_scalar__", (DL_FUNC) &_torch_tensor_gt_scalar__, 2},
    {"_torch_tensor_half_", (DL_FUNC) &_torch_tensor_half_, 1},
    {"_torch_tensor_histc_", (DL_FUNC) &_torch_tensor_histc_, 4},
    {"_torch_tensor_index_add__", (DL_FUNC) &_torch_tensor_index_add__, 4},
    {"_torch_tensor_index_copy__", (DL_FUNC) &_torch_tensor_index_copy__, 4},
    {"_torch_tensor_index_fill__", (DL_FUNC) &_torch_tensor_index_fill__, 4},
    {"_torch_tensor_index_put__", (DL_FUNC) &_torch_tensor_index_put__, 4},
    {"_torch_tensor_index_select_", (DL_FUNC) &_torch_tensor_index_select_, 3},
    {"_torch_tensor_int_", (DL_FUNC) &_torch_tensor_int_, 1},
    {"_torch_tensor_inverse_", (DL_FUNC) &_torch_tensor_inverse_, 1},
    {"_torch_tensor_is_contiguous_", (DL_FUNC) &_torch_tensor_is_contiguous_, 1},
    {"_torch_tensor_is_cuda_", (DL_FUNC) &_torch_tensor_is_cuda_, 1},
    {"_torch_tensor_is_set_to_", (DL_FUNC) &_torch_tensor_is_set_to_, 2},
    {"_torch_tensor_is_signed_", (DL_FUNC) &_torch_tensor_is_signed_, 1},
    {"_torch_tensor_kthvalue_", (DL_FUNC) &_torch_tensor_kthvalue_, 4},
    {"_torch_tensor_le_tensor_", (DL_FUNC) &_torch_tensor_le_tensor_, 2},
    {"_torch_tensor_le_scalar_", (DL_FUNC) &_torch_tensor_le_scalar_, 2},
    {"_torch_tensor_le_tensor__", (DL_FUNC) &_torch_tensor_le_tensor__, 2},
    {"_torch_tensor_le_scalar__", (DL_FUNC) &_torch_tensor_le_scalar__, 2},
    {"_torch_tensor_mean_", (DL_FUNC) &_torch_tensor_mean_, 3},
    {"_torch_tensor_var_", (DL_FUNC) &_torch_tensor_var_, 4},
    {"_torch_tensor_std_", (DL_FUNC) &_torch_tensor_std_, 4},
    {"_torch_tensor_min_", (DL_FUNC) &_torch_tensor_min_, 1},
    {"_torch_tensor_min_dim_", (DL_FUNC) &_torch_tensor_min_dim_, 3},
    {"_torch_tensor_min_tensor_", (DL_FUNC) &_torch_tensor_min_tensor_, 2},
    {"_torch_tensor_max_", (DL_FUNC) &_torch_tensor_max_, 1},
    {"_torch_tensor_max_dim_", (DL_FUNC) &_torch_tensor_max_dim_, 3},
    {"_torch_tensor_max_tensor_", (DL_FUNC) &_torch_tensor_max_tensor_, 2},
    {"_torch_tensor_prod_", (DL_FUNC) &_torch_tensor_prod_, 4},
    {"_torch_tensor_median_dim_", (DL_FUNC) &_torch_tensor_median_dim_, 3},
    {"_torch_tensor_median_", (DL_FUNC) &_torch_tensor_median_, 1},
    {"_torch_tensor_mode_", (DL_FUNC) &_torch_tensor_mode_, 3},
    {"_torch_tensor_logsumexp_", (DL_FUNC) &_torch_tensor_logsumexp_, 3},
    {"_torch_tensor_masked_scatter__", (DL_FUNC) &_torch_tensor_masked_scatter__, 3},
    {"_torch_tensor_masked_fill__", (DL_FUNC) &_torch_tensor_masked_fill__, 3},
    {"_torch_tensor_masked_select_", (DL_FUNC) &_torch_tensor_masked_select_, 2},
    {"_torch_tensor_mm_", (DL_FUNC) &_torch_tensor_mm_, 2},
    {"_torch_tensor_mul_tensor_", (DL_FUNC) &_torch_tensor_mul_tensor_, 2},
    {"_torch_tensor_mul_scalar_", (DL_FUNC) &_torch_tensor_mul_scalar_, 2},
    {"_torch_tensor_permute_", (DL_FUNC) &_torch_tensor_permute_, 2},
    {"_torch_tensor_pow_tensor_", (DL_FUNC) &_torch_tensor_pow_tensor_, 2},
    {"_torch_tensor_pow_scalar_", (DL_FUNC) &_torch_tensor_pow_scalar_, 2},
    {"_torch_tensor_qr_", (DL_FUNC) &_torch_tensor_qr_, 1},
    {"_torch_tensor_repeat_", (DL_FUNC) &_torch_tensor_repeat_, 2},
    {"_torch_tensor_reciprocal_", (DL_FUNC) &_torch_tensor_reciprocal_, 1},
    {"_torch_tensor_reciprocal__", (DL_FUNC) &_torch_tensor_reciprocal__, 1},
    {"_torch_tensor_renorm_", (DL_FUNC) &_torch_tensor_renorm_, 4},
    {"_torch_tensor_renorm__", (DL_FUNC) &_torch_tensor_renorm__, 4},
    {"_torch_tensor_resize__", (DL_FUNC) &_torch_tensor_resize__, 2},
    {"_torch_tensor_round_", (DL_FUNC) &_torch_tensor_round_, 1},
    {"_torch_tensor_round__", (DL_FUNC) &_torch_tensor_round__, 1},
    {"_torch_tensor_rsqrt_", (DL_FUNC) &_torch_tensor_rsqrt_, 1},
    {"_torch_tensor_rsqrt__", (DL_FUNC) &_torch_tensor_rsqrt__, 1},
    {"_torch_tensor_sigmoid_", (DL_FUNC) &_torch_tensor_sigmoid_, 1},
    {"_torch_tensor_sigmoid__", (DL_FUNC) &_torch_tensor_sigmoid__, 1},
    {"_torch_tensor_sign_", (DL_FUNC) &_torch_tensor_sign_, 1},
    {"_torch_tensor_sort_", (DL_FUNC) &_torch_tensor_sort_, 3},
    {"_torch_tensor_sqrt_", (DL_FUNC) &_torch_tensor_sqrt_, 1},
    {"_torch_tensor_sqrt__", (DL_FUNC) &_torch_tensor_sqrt__, 1},
    {"_torch_tensor_sub_tensor_", (DL_FUNC) &_torch_tensor_sub_tensor_, 3},
    {"_torch_tensor_sub_scalar_", (DL_FUNC) &_torch_tensor_sub_scalar_, 3},
    {"_torch_tensor_sub_tensor__", (DL_FUNC) &_torch_tensor_sub_tensor__, 3},
    {"_torch_tensor_sub_scalar__", (DL_FUNC) &_torch_tensor_sub_scalar__, 3},
    {"_torch_tensor_sum_", (DL_FUNC) &_torch_tensor_sum_, 3},
    {"_torch_tensor_transpose_", (DL_FUNC) &_torch_tensor_transpose_, 3},
    {"_torch_tensor_transpose__", (DL_FUNC) &_torch_tensor_transpose__, 3},
    {"_torch_tensor_t_", (DL_FUNC) &_torch_tensor_t_, 1},
    {"_torch_tensor_tril_", (DL_FUNC) &_torch_tensor_tril_, 2},
    {"_torch_tensor_triu_", (DL_FUNC) &_torch_tensor_triu_, 2},
    {"_torch_tensor_topk_", (DL_FUNC) &_torch_tensor_topk_, 5},
    {"_torch_tensor_to_", (DL_FUNC) &_torch_tensor_to_, 4},
    {"_torch_tensor_unfold_", (DL_FUNC) &_torch_tensor_unfold_, 4},
    {"_torch_tensor_unique_return_inverse_", (DL_FUNC) &_torch_tensor_unique_return_inverse_, 3},
    {"_torch_tensor_unique_", (DL_FUNC) &_torch_tensor_unique_, 3},
    {"_torch_tensor_unsqueeze_", (DL_FUNC) &_torch_tensor_unsqueeze_, 2},
    {"_torch_tensor_unsqueeze__", (DL_FUNC) &_torch_tensor_unsqueeze__, 2},
    {"_torch_tensor_zero__", (DL_FUNC) &_torch_tensor_zero__, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_torch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
