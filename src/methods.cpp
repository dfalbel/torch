// Dont modify!
// This file is auto generated by tools/gen.R.
#include "torch_types.h"
#include "utils.hpp"
#include "scalar.hpp"
#include "device.hpp"


// [[Rcpp::export]]
void torch_backward_0427181972d30e1747ec208d30a7470a (
Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> gradient, bool keep_graph, bool create_graph
) {
  self->backward(*Rcpp::as<Rcpp::XPtr<torch::Tensor>>(gradient), keep_graph, create_graph);
};

// [[Rcpp::export]]
void torch_set_data_89728a9882441111256f356aa2c7bd2d (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> new_data
) {
  self->set_data(*new_data);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_abs_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->abs();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_abs__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->abs_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_acos_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->acos();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_acos__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->acos_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_add_02bec2e8e54b6237090a5042dd1e991c (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, SEXP alpha
) {
  auto out = self->add(*other, scalar_from_r_(alpha));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_add__6b3a76c4ed9f62ef65e1cec9d661dfa5 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, SEXP alpha
) {
  auto out = self->add_(*other, scalar_from_r_(alpha));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_add_783c8a98771291069457898dc444b949 (
Rcpp::XPtr<torch::Tensor> self, SEXP other, SEXP alpha
) {
  auto out = self->add(scalar_from_r_(other), scalar_from_r_(alpha));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_add__407c973b091671443effd1a0b4dfe28f (
Rcpp::XPtr<torch::Tensor> self, SEXP other, SEXP alpha
) {
  auto out = self->add_(scalar_from_r_(other), scalar_from_r_(alpha));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_addmv_1072d7a4d7a0dab6482cb299987e26ff (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat, Rcpp::XPtr<torch::Tensor> vec, SEXP beta, SEXP alpha
) {
  auto out = self->addmv(*mat, *vec, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_addmv__4820c49a5d1d67877f59e1d57a262a9d (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat, Rcpp::XPtr<torch::Tensor> vec, SEXP beta, SEXP alpha
) {
  auto out = self->addmv_(*mat, *vec, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_addr_ab5fbf3dbf88b209e751ed0770b30e5c (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec1, Rcpp::XPtr<torch::Tensor> vec2, SEXP beta, SEXP alpha
) {
  auto out = self->addr(*vec1, *vec2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_addr__d04ad2d4b220f065f90babfb039cafc0 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec1, Rcpp::XPtr<torch::Tensor> vec2, SEXP beta, SEXP alpha
) {
  auto out = self->addr_(*vec1, *vec2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_all_a00d65de0c17931eb6106e885279f146 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim
) {
  auto out = self->all(dim, keepdim);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
bool torch_allclose_68991204bc2d1d5ac874203da18b195a (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, double rtol, double atol, bool equal_nan
) {
  auto out = self->allclose(*other, rtol, atol, equal_nan);
return out;
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_any_a00d65de0c17931eb6106e885279f146 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim
) {
  auto out = self->any(dim, keepdim);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_argmax_49e69c8c7172be362fffe33e9ea73ccb (
Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<int64_t> dim, bool keepdim
) {
  auto out = self->argmax(resolve_null_argument(dim), keepdim);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_argmin_49e69c8c7172be362fffe33e9ea73ccb (
Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<int64_t> dim, bool keepdim
) {
  auto out = self->argmin(resolve_null_argument(dim), keepdim);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_as_strided_48a5ca9ebdf2e93013f04622e447af23 (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> size, std::vector<std::int64_t> stride, Rcpp::Nullable<int64_t> storage_offset
) {
  auto out = self->as_strided(size, stride, resolve_null_argument(storage_offset));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_as_strided__854a1e8405883f30f2ac785b62b9df35 (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> size, std::vector<std::int64_t> stride, Rcpp::Nullable<int64_t> storage_offset
) {
  auto out = self->as_strided_(size, stride, resolve_null_argument(storage_offset));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_asin_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->asin();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_asin__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->asin_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_atan_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->atan();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_atan__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->atan_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_baddbmm_f084ab37fd7cee9fb89f911187c51117 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, SEXP beta, SEXP alpha
) {
  auto out = self->baddbmm(*batch1, *batch2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_baddbmm__e39679a201c809cf04d4768abd5f9472 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, SEXP beta, SEXP alpha
) {
  auto out = self->baddbmm_(*batch1, *batch2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_bernoulli_172e9e81db927896b92b352cb077113b (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->bernoulli();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_bernoulli__a2c4898743bb0b00055eccf935534a10 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> p
) {
  auto out = self->bernoulli_(*p);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_bernoulli__c0d7479cf591e60afc5ecc0adace5091 (
Rcpp::XPtr<torch::Tensor> self, double p
) {
  auto out = self->bernoulli_(p);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_bernoulli_7c6a3063d6c9160addd43f700047fc1d (
Rcpp::XPtr<torch::Tensor> self, double p
) {
  auto out = self->bernoulli(p);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_bincount_f4aaee0119fb1bbeda5d6924832e6ccd (
Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> weights, int64_t minlength
) {
  auto out = self->bincount(*Rcpp::as<Rcpp::XPtr<torch::Tensor>>(weights), minlength);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_bitwise_not_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->bitwise_not();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_bitwise_not__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->bitwise_not_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_bmm_4179872982cdd9692065c1d0412bcd54 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat2
) {
  auto out = self->bmm(*mat2);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_ceil_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->ceil();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_ceil__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->ceil_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::List torch_chunk_d1ba7cb9ab45bed064482d6655a047ba (
Rcpp::XPtr<torch::Tensor> self, int64_t chunks, int64_t dim
) {
  auto out = self->chunk(chunks, dim);
  Rcpp::List v;

  for (int i = 0; i < out.size(); ++i) {
    v.push_back(make_tensor_ptr(out[i]));
  }

  return v;
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_clamp_70f48b9c0a72bac849220903ec22a50a (
Rcpp::XPtr<torch::Tensor> self, SEXP min, SEXP max
) {
  auto out = self->clamp(resolve_null_scalar(min), resolve_null_scalar(max));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_clamp__de153b8f9dac7cff075500db6ee1f472 (
Rcpp::XPtr<torch::Tensor> self, SEXP min, SEXP max
) {
  auto out = self->clamp_(resolve_null_scalar(min), resolve_null_scalar(max));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_clamp_max_632290f0e396f400e950acd849169431 (
Rcpp::XPtr<torch::Tensor> self, SEXP max
) {
  auto out = self->clamp_max(scalar_from_r_(max));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_clamp_max__1319c907c5eeba718b7832b2e9395f61 (
Rcpp::XPtr<torch::Tensor> self, SEXP max
) {
  auto out = self->clamp_max_(scalar_from_r_(max));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_clamp_min_96a46b6306a546d929ea4f53bd544b90 (
Rcpp::XPtr<torch::Tensor> self, SEXP min
) {
  auto out = self->clamp_min(scalar_from_r_(min));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_clamp_min__a683f5abd859c5ad58289c38de974579 (
Rcpp::XPtr<torch::Tensor> self, SEXP min
) {
  auto out = self->clamp_min_(scalar_from_r_(min));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_contiguous_d11f20d0c3dedbed7060d922567eeb82 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->contiguous();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_copy__1ccfd2368a7db3f7bcf684e5471b9cbe (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> src, bool non_blocking
) {
  auto out = self->copy_(*src, non_blocking);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_cos_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->cos();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_cos__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->cos_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_cosh_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->cosh();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_cosh__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->cosh_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_cumsum_497aca3433c567f5542cfedd28714419 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::Nullable<std::string> dtype
) {
  auto out = self->cumsum(dim, scalar_type_from_string(dtype));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_cumprod_497aca3433c567f5542cfedd28714419 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::Nullable<std::string> dtype
) {
  auto out = self->cumprod(dim, scalar_type_from_string(dtype));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_det_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->det();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_diag_embed_83af1f3094a6ddea435a5fde5762756f (
Rcpp::XPtr<torch::Tensor> self, int64_t offset, int64_t dim1, int64_t dim2
) {
  auto out = self->diag_embed(offset, dim1, dim2);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_diagflat_c2bc38d3bfe8c6855ff8eac707000e71 (
Rcpp::XPtr<torch::Tensor> self, int64_t offset
) {
  auto out = self->diagflat(offset);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_diagonal_83af1f3094a6ddea435a5fde5762756f (
Rcpp::XPtr<torch::Tensor> self, int64_t offset, int64_t dim1, int64_t dim2
) {
  auto out = self->diagonal(offset, dim1, dim2);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_fill_diagonal__afd80df47ca4531a8d0038af1e0e0e29 (
Rcpp::XPtr<torch::Tensor> self, SEXP fill_value, bool wrap
) {
  auto out = self->fill_diagonal_(scalar_from_r_(fill_value), wrap);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_div_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->div(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_div__5d476fcad960178d18feddbe371c5675 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->div_(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_div_828c724a305e4a254aee6141456d6fb1 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->div(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_div__7c9cc0828e809b4568149a32df76fd63 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->div_(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_dot_20e8a5d03011737e0a350fd8208fc32a (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor
) {
  auto out = self->dot(*tensor);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_resize__b5c406f407e1edb269082d30571274a2 (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> size
) {
  auto out = self->resize_(size);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_erf_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->erf();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_erf__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->erf_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_erfc_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->erfc();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_erfc__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->erfc_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_exp_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->exp();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_exp__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->exp_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_expm1_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->expm1();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_expm1__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->expm1_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_expand_8fb715dc6dd8860dc19da19157c6a569 (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> size, bool implicit
) {
  auto out = self->expand(size, implicit);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_expand_as_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->expand_as(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_flatten_81cfa679173f7cf487978866e858e0d7 (
Rcpp::XPtr<torch::Tensor> self, int64_t start_dim, int64_t end_dim
) {
  auto out = self->flatten(start_dim, end_dim);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_fill__07130a53d127abf9a9f43e9ab5623ac4 (
Rcpp::XPtr<torch::Tensor> self, SEXP value
) {
  auto out = self->fill_(scalar_from_r_(value));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_fill__e477b33acb65374ba9ec28a77721a45e (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> value
) {
  auto out = self->fill_(*value);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_floor_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->floor();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_floor__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->floor_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_frac_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->frac();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_frac__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->frac_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_ger_5c12932d2aad63902edd715966d08934 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec2
) {
  auto out = self->ger(*vec2);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_fft_b40ab26de564940dc199a685b56a303c (
Rcpp::XPtr<torch::Tensor> self, int64_t signal_ndim, bool normalized
) {
  auto out = self->fft(signal_ndim, normalized);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_ifft_b40ab26de564940dc199a685b56a303c (
Rcpp::XPtr<torch::Tensor> self, int64_t signal_ndim, bool normalized
) {
  auto out = self->ifft(signal_ndim, normalized);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_rfft_952cd2ec36e935286dd362c64eddbc76 (
Rcpp::XPtr<torch::Tensor> self, int64_t signal_ndim, bool normalized, bool onesided
) {
  auto out = self->rfft(signal_ndim, normalized, onesided);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_irfft_8dbe0873d7287e95651dac3536aaaab4 (
Rcpp::XPtr<torch::Tensor> self, int64_t signal_ndim, bool normalized, bool onesided, std::vector<std::int64_t> signal_sizes
) {
  auto out = self->irfft(signal_ndim, normalized, onesided, signal_sizes);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_index_814b37e08ed831a0d37f0f073ffe1b56 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<Rcpp::List> indices
) {
  auto out = self->index(tensor_list_from_r_(indices));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_index_copy__0be4630fe46f5a3434059ed7debb5603 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source
) {
  auto out = self->index_copy_(dim, *index, *source);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_index_copy_073fd53276f8ca2975951ef418c77979 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source
) {
  auto out = self->index_copy(dim, *index, *source);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_index_put__59690c3dcdbff4a75d67259ec5ecedd7 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<Rcpp::List> indices, Rcpp::XPtr<torch::Tensor> values, bool accumulate
) {
  auto out = self->index_put_(tensor_list_from_r_(indices), *values, accumulate);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_index_put_17d445458eace87a93650394814e7abd (
Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<Rcpp::List> indices, Rcpp::XPtr<torch::Tensor> values, bool accumulate
) {
  auto out = self->index_put(tensor_list_from_r_(indices), *values, accumulate);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_inverse_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->inverse();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_isclose_68991204bc2d1d5ac874203da18b195a (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, double rtol, double atol, bool equal_nan
) {
  auto out = self->isclose(*other, rtol, atol, equal_nan);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
bool torch_is_distributed_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->is_distributed();
return out;
};

// [[Rcpp::export]]
bool torch_is_floating_point_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->is_floating_point();
return out;
};

// [[Rcpp::export]]
bool torch_is_complex_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->is_complex();
return out;
};

// [[Rcpp::export]]
bool torch_is_nonzero_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->is_nonzero();
return out;
};

// [[Rcpp::export]]
bool torch_is_same_size_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->is_same_size(*other);
return out;
};

// [[Rcpp::export]]
bool torch_is_signed_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->is_signed();
return out;
};

// [[Rcpp::export]]
Rcpp::List torch_kthvalue_552a2f1f5a868450b9902d289f1bc34a (
Rcpp::XPtr<torch::Tensor> self, int64_t k, int64_t dim, bool keepdim
) {
  auto out = self->kthvalue(k, dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(out)),make_tensor_ptr(std::get<1>(out)) );
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_log_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->log();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_log__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->log_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_log10_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->log10();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_log10__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->log10_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_log1p_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->log1p();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_log1p__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->log1p_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_log2_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->log2();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_log2__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->log2_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_logdet_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->logdet();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_log_softmax_497aca3433c567f5542cfedd28714419 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::Nullable<std::string> dtype
) {
  auto out = self->log_softmax(dim, scalar_type_from_string(dtype));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_logsumexp_3d8e8f11c9689ef6a75a9c7ca8d6b7b6 (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool keepdim
) {
  auto out = self->logsumexp(dim, keepdim);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_matmul_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->matmul(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_matrix_power_fbba1f43b92fd902db09be10350c6bdf (
Rcpp::XPtr<torch::Tensor> self, int64_t n
) {
  auto out = self->matrix_power(n);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::List torch_max_a00d65de0c17931eb6106e885279f146 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim
) {
  auto out = self->max(dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(out)),make_tensor_ptr(std::get<1>(out)) );
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_max_values_3d8e8f11c9689ef6a75a9c7ca8d6b7b6 (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool keepdim
) {
  auto out = self->max_values(dim, keepdim);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_mean_e9eab74b972ba6cab392179a4f0a1630 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<std::string> dtype
) {
  auto out = self->mean(scalar_type_from_string(dtype));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_mean_b75b9fc8150d6ec976bec5e79e01d1d3 (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool keepdim, Rcpp::Nullable<std::string> dtype
) {
  auto out = self->mean(dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::List torch_median_a00d65de0c17931eb6106e885279f146 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim
) {
  auto out = self->median(dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(out)),make_tensor_ptr(std::get<1>(out)) );
};

// [[Rcpp::export]]
Rcpp::List torch_min_a00d65de0c17931eb6106e885279f146 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim
) {
  auto out = self->min(dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(out)),make_tensor_ptr(std::get<1>(out)) );
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_min_values_3d8e8f11c9689ef6a75a9c7ca8d6b7b6 (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool keepdim
) {
  auto out = self->min_values(dim, keepdim);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_mm_4179872982cdd9692065c1d0412bcd54 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat2
) {
  auto out = self->mm(*mat2);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::List torch_mode_a00d65de0c17931eb6106e885279f146 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim
) {
  auto out = self->mode(dim, keepdim);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(out)),make_tensor_ptr(std::get<1>(out)) );
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_mul_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->mul(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_mul__5d476fcad960178d18feddbe371c5675 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->mul_(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_mul_828c724a305e4a254aee6141456d6fb1 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->mul(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_mul__7c9cc0828e809b4568149a32df76fd63 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->mul_(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_mv_98e027563655aaef18dcf0fdd62aa4e7 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec
) {
  auto out = self->mv(*vec);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_mvlgamma_9a31517035e3d70163aa3a03599742d1 (
Rcpp::XPtr<torch::Tensor> self, int64_t p
) {
  auto out = self->mvlgamma(p);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_mvlgamma__0c99e2d4b756f575ccf8a595a519a030 (
Rcpp::XPtr<torch::Tensor> self, int64_t p
) {
  auto out = self->mvlgamma_(p);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_narrow_copy_d65beda5fa619a4b42b0a4f5423ae7af (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, int64_t start, int64_t length
) {
  auto out = self->narrow_copy(dim, start, length);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_narrow_d65beda5fa619a4b42b0a4f5423ae7af (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, int64_t start, int64_t length
) {
  auto out = self->narrow(dim, start, length);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_permute_58ccf3f283122d340a673beb6bd417b2 (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dims
) {
  auto out = self->permute(dims);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_numpy_T_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->numpy_T();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_pin_memory_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->pin_memory();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_pinverse_9451f1dc9df4ad12effb96865b7d5cc1 (
Rcpp::XPtr<torch::Tensor> self, double rcond
) {
  auto out = self->pinverse(rcond);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_reciprocal_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->reciprocal();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_reciprocal__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->reciprocal_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_neg_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->neg();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_neg__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->neg_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_repeat_eefba09ed344a4842dade390b5fd0e82 (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> repeats
) {
  auto out = self->repeat(repeats);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_repeat_interleave_df8da4cd3c0efd9bcbd034f12cd6938f (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> repeats, Rcpp::Nullable<int64_t> dim
) {
  auto out = self->repeat_interleave(*repeats, resolve_null_argument(dim));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_repeat_interleave_f4cdbd612fc56bd598939b1ed8c2ac87 (
Rcpp::XPtr<torch::Tensor> self, int64_t repeats, Rcpp::Nullable<int64_t> dim
) {
  auto out = self->repeat_interleave(repeats, resolve_null_argument(dim));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_reshape_00ebe0c7086ba70f14f870d6a23ec6dd (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> shape
) {
  auto out = self->reshape(shape);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_reshape_as_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->reshape_as(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_round_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->round();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_round__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->round_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_relu_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->relu();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_relu__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->relu_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_prelu_74aa237ed2400169d048df729a1d6f92 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight
) {
  auto out = self->prelu(*weight);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::List torch_prelu_backward_fdadff1d8b3c27a6244816a269247822 (
Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight
) {
  auto out = self->prelu_backward(*self, *weight);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(out)),make_tensor_ptr(std::get<1>(out)) );
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_hardshrink_899d60f0bf515c42a60b3525f217fd29 (
Rcpp::XPtr<torch::Tensor> self, SEXP lambd
) {
  auto out = self->hardshrink(scalar_from_r_(lambd));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_hardshrink_backward_ae549be1d694fc273fb6a873601ddca5 (
Rcpp::XPtr<torch::Tensor> grad_out, Rcpp::XPtr<torch::Tensor> self, SEXP lambd
) {
  auto out = self->hardshrink_backward(*self, scalar_from_r_(lambd));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_rsqrt_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->rsqrt();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_rsqrt__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->rsqrt_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_select_b059a0edb6085ce5612a62f96a05b06f (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, int64_t index
) {
  auto out = self->select(dim, index);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sigmoid_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->sigmoid();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sigmoid__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->sigmoid_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sin_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->sin();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sin__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->sin_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sinh_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->sinh();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sinh__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->sinh_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_detach_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->detach();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_detach__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->detach_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
int64_t torch_size_ec971b768b5201c8c4ad6177a2be95ab (
Rcpp::XPtr<torch::Tensor> self, int64_t dim
) {
  auto out = self->size(dim);
return out;
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_slice_43b6737dc8edf11756418078b04e3d84 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, int64_t start, int64_t end, int64_t step
) {
  auto out = self->slice(dim, start, end, step);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::List torch_slogdet_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->slogdet();
return Rcpp::List::create(make_tensor_ptr(std::get<0>(out)),make_tensor_ptr(std::get<1>(out)) );
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_smm_4179872982cdd9692065c1d0412bcd54 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat2
) {
  auto out = self->smm(*mat2);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_softmax_497aca3433c567f5542cfedd28714419 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::Nullable<std::string> dtype
) {
  auto out = self->softmax(dim, scalar_type_from_string(dtype));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::List torch_split_899f07e47445429ec4e214929e1deb92 (
Rcpp::XPtr<torch::Tensor> self, int64_t split_size, int64_t dim
) {
  auto out = self->split(split_size, dim);
  Rcpp::List v;

  for (int i = 0; i < out.size(); ++i) {
    v.push_back(make_tensor_ptr(out[i]));
  }

  return v;
};

// [[Rcpp::export]]
Rcpp::List torch_split_with_sizes_6a9223a9c3eb63442d2bc65531b2f0cf (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> split_sizes, int64_t dim
) {
  auto out = self->split_with_sizes(split_sizes, dim);
  Rcpp::List v;

  for (int i = 0; i < out.size(); ++i) {
    v.push_back(make_tensor_ptr(out[i]));
  }

  return v;
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_squeeze_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->squeeze();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_squeeze_ec971b768b5201c8c4ad6177a2be95ab (
Rcpp::XPtr<torch::Tensor> self, int64_t dim
) {
  auto out = self->squeeze(dim);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_squeeze__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->squeeze_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_squeeze__db1e43f53c3b816eb931c1c0de0f3b94 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim
) {
  auto out = self->squeeze_(dim);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sspaddmm_593f90a5e31a632afec95421dabb830b (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2, SEXP beta, SEXP alpha
) {
  auto out = self->sspaddmm(*mat1, *mat2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_stft_c07c54f0f0d63b84174cb8de9bcc4ff5 (
Rcpp::XPtr<torch::Tensor> self, int64_t n_fft, Rcpp::Nullable<int64_t> hop_length, Rcpp::Nullable<int64_t> win_length, Rcpp::Nullable<Rcpp::XPtr<torch::Tensor>> window, bool normalized, bool onesided
) {
  auto out = self->stft(n_fft, resolve_null_argument(hop_length), resolve_null_argument(win_length), *Rcpp::as<Rcpp::XPtr<torch::Tensor>>(window), normalized, onesided);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
int64_t torch_stride_ec971b768b5201c8c4ad6177a2be95ab (
Rcpp::XPtr<torch::Tensor> self, int64_t dim
) {
  auto out = self->stride(dim);
return out;
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sum_e9eab74b972ba6cab392179a4f0a1630 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<std::string> dtype
) {
  auto out = self->sum(scalar_type_from_string(dtype));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sum_b75b9fc8150d6ec976bec5e79e01d1d3 (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool keepdim, Rcpp::Nullable<std::string> dtype
) {
  auto out = self->sum(dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sum_to_size_6bf55218cd71b219c054293f38520051 (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> size
) {
  auto out = self->sum_to_size(size);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sqrt_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->sqrt();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sqrt__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->sqrt_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_std_268623e9239aead566394fd32dccb710 (
Rcpp::XPtr<torch::Tensor> self, bool unbiased
) {
  auto out = self->std(unbiased);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_std_e89c4c516b68404e86cc256eb5434c02 (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool unbiased, bool keepdim
) {
  auto out = self->std(dim, unbiased, keepdim);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_prod_e9eab74b972ba6cab392179a4f0a1630 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::Nullable<std::string> dtype
) {
  auto out = self->prod(scalar_type_from_string(dtype));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_prod_23927ad81b9cf9f7d2632329a9328fb7 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim, Rcpp::Nullable<std::string> dtype
) {
  auto out = self->prod(dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_t_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->t();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_t__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->t_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_tan_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->tan();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_tan__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->tan_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_tanh_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->tanh();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_tanh__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->tanh_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_transpose_79f15b60fe51bb82eeccf0ccc4b72c75 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim0, int64_t dim1
) {
  auto out = self->transpose(dim0, dim1);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_transpose__9862ce3a20e47cba29727a33f2297bdc (
Rcpp::XPtr<torch::Tensor> self, int64_t dim0, int64_t dim1
) {
  auto out = self->transpose_(dim0, dim1);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_flip_58ccf3f283122d340a673beb6bd417b2 (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dims
) {
  auto out = self->flip(dims);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_roll_7d21b5356c80bf75ee8b086dbd93db76 (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> shifts, std::vector<std::int64_t> dims
) {
  auto out = self->roll(shifts, dims);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_rot90_ba5ca2b0453143490cbeb12ac67a58eb (
Rcpp::XPtr<torch::Tensor> self, int64_t k, std::vector<std::int64_t> dims
) {
  auto out = self->rot90(k, dims);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_trunc_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->trunc();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_trunc__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->trunc_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_type_as_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->type_as(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_unsqueeze_ec971b768b5201c8c4ad6177a2be95ab (
Rcpp::XPtr<torch::Tensor> self, int64_t dim
) {
  auto out = self->unsqueeze(dim);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_unsqueeze__db1e43f53c3b816eb931c1c0de0f3b94 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim
) {
  auto out = self->unsqueeze_(dim);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_var_268623e9239aead566394fd32dccb710 (
Rcpp::XPtr<torch::Tensor> self, bool unbiased
) {
  auto out = self->var(unbiased);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_var_e89c4c516b68404e86cc256eb5434c02 (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> dim, bool unbiased, bool keepdim
) {
  auto out = self->var(dim, unbiased, keepdim);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_view_as_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->view_as(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_where_659bd988fbd40cad9b2bc717050fdaa2 (
Rcpp::XPtr<torch::Tensor> condition, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->where(*self, *other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_norm_030beec94146c3ad558fea0a5a1156c6 (
Rcpp::XPtr<torch::Tensor> self, SEXP p, std::string dtype
) {
  auto out = self->norm(resolve_null_scalar(p), scalar_type_from_string(dtype));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_norm_04a03af9c23e2262c0c6aca290ab7d4d (
Rcpp::XPtr<torch::Tensor> self, SEXP p
) {
  auto out = self->norm(scalar_from_r_(p));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_norm_2dfa12771319ec3116f4da72cb12b3d0 (
Rcpp::XPtr<torch::Tensor> self, SEXP p, std::vector<std::int64_t> dim, bool keepdim, std::string dtype
) {
  auto out = self->norm(resolve_null_scalar(p), dim, keepdim, scalar_type_from_string(dtype));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_norm_6d38f8cf7270821224b49b321718823e (
Rcpp::XPtr<torch::Tensor> self, SEXP p, std::vector<std::int64_t> dim, bool keepdim
) {
  auto out = self->norm(resolve_null_scalar(p), dim, keepdim);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_clone_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->clone();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_resize_as__1e3e95d16da5686b2ed8669167e56ef0 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> the_template
) {
  auto out = self->resize_as_(*the_template);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_pow_a504ebb51e840281521576607ce458c3 (
Rcpp::XPtr<torch::Tensor> self, SEXP exponent
) {
  auto out = self->pow(scalar_from_r_(exponent));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_zero__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->zero_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sub_02bec2e8e54b6237090a5042dd1e991c (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, SEXP alpha
) {
  auto out = self->sub(*other, scalar_from_r_(alpha));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sub__6b3a76c4ed9f62ef65e1cec9d661dfa5 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, SEXP alpha
) {
  auto out = self->sub_(*other, scalar_from_r_(alpha));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sub_783c8a98771291069457898dc444b949 (
Rcpp::XPtr<torch::Tensor> self, SEXP other, SEXP alpha
) {
  auto out = self->sub(scalar_from_r_(other), scalar_from_r_(alpha));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sub__407c973b091671443effd1a0b4dfe28f (
Rcpp::XPtr<torch::Tensor> self, SEXP other, SEXP alpha
) {
  auto out = self->sub_(scalar_from_r_(other), scalar_from_r_(alpha));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_addmm_593f90a5e31a632afec95421dabb830b (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2, SEXP beta, SEXP alpha
) {
  auto out = self->addmm(*mat1, *mat2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_addmm__e6db0e26c4b875bde9c015e72499386d (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2, SEXP beta, SEXP alpha
) {
  auto out = self->addmm_(*mat1, *mat2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sparse_resize__f9b8d88bc0baafd239d11f2fcea30be5 (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> size, int64_t sparse_dim, int64_t dense_dim
) {
  auto out = self->sparse_resize_(size, sparse_dim, dense_dim);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sparse_resize_and_clear__f9b8d88bc0baafd239d11f2fcea30be5 (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> size, int64_t sparse_dim, int64_t dense_dim
) {
  auto out = self->sparse_resize_and_clear_(size, sparse_dim, dense_dim);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sparse_mask_ed5bb55732ad3303430891d7fa131c57 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask
) {
  auto out = self->sparse_mask(*mask);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_to_dense_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->to_dense();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
int64_t torch_sparse_dim_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->sparse_dim();
return out;
};

// [[Rcpp::export]]
int64_t torch__dimI_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->_dimI();
return out;
};

// [[Rcpp::export]]
int64_t torch_dense_dim_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->dense_dim();
return out;
};

// [[Rcpp::export]]
int64_t torch__dimV_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->_dimV();
return out;
};

// [[Rcpp::export]]
int64_t torch__nnz_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->_nnz();
return out;
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_coalesce_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->coalesce();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
bool torch_is_coalesced_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->is_coalesced();
return out;
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch__indices_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->_indices();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch__values_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->_values();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch__coalesced__2e9d8c347852e3f5e8b16b391c580e28 (
Rcpp::XPtr<torch::Tensor> self, bool coalesced
) {
  auto out = self->_coalesced_(coalesced);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_indices_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->indices();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_values_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->values();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
int64_t torch_numel_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->numel();
return out;
};

// [[Rcpp::export]]
Rcpp::List torch_unbind_ec971b768b5201c8c4ad6177a2be95ab (
Rcpp::XPtr<torch::Tensor> self, int64_t dim
) {
  auto out = self->unbind(dim);
  Rcpp::List v;

  for (int i = 0; i < out.size(); ++i) {
    v.push_back(make_tensor_ptr(out[i]));
  }

  return v;
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_to_sparse_b5eacf9bcb3f916a2b3b392bf8d0a876 (
Rcpp::XPtr<torch::Tensor> self, int64_t sparse_dim
) {
  auto out = self->to_sparse(sparse_dim);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_to_sparse_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->to_sparse();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_to_mkldnn_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->to_mkldnn();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_dequantize_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->dequantize();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
double torch_q_scale_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->q_scale();
return out;
};

// [[Rcpp::export]]
int64_t torch_q_zero_point_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->q_zero_point();
return out;
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_int_repr_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->int_repr();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_to_07fb7170362aa19d60b3bf80c613368b (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::TensorOptions> options, bool non_blocking, bool copy
) {
  auto out = self->to(*options, non_blocking, copy);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_to_90fe1befd83abd3f419da588b609ef89 (
Rcpp::XPtr<torch::Tensor> self, std::string device, std::string dtype, bool non_blocking, bool copy
) {
  auto out = self->to(device_from_string(device), scalar_type_from_string(dtype), non_blocking, copy);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_to_07b825f644ba168638538066d47424f6 (
Rcpp::XPtr<torch::Tensor> self, std::string dtype, bool non_blocking, bool copy
) {
  auto out = self->to(scalar_type_from_string(dtype), non_blocking, copy);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_to_4969670e973cd8d7b281281a8640d811 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, bool non_blocking, bool copy
) {
  auto out = self->to(*other, non_blocking, copy);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_set__3ed615ba1a472df076a4d9909a0cd30c (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Storage> source
) {
  auto out = self->set_(*source);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_set__312dcae7f64e37bf3048b57f6468d8a1 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Storage> source, int64_t storage_offset, std::vector<std::int64_t> size, std::vector<std::int64_t> stride
) {
  auto out = self->set_(*source, storage_offset, size, stride);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_set__aa628b77987871d31027b827e168238a (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> source
) {
  auto out = self->set_(*source);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_set__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->set_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
bool torch_is_set_to_20e8a5d03011737e0a350fd8208fc32a (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor
) {
  auto out = self->is_set_to(*tensor);
return out;
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_masked_fill__3508ed7ed0d2c5cae6d9c0ce9b2fb2d4 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, SEXP value
) {
  auto out = self->masked_fill_(*mask, scalar_from_r_(value));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_masked_fill_41dc98a2ba7f8ad88de78079444f4bd8 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, SEXP value
) {
  auto out = self->masked_fill(*mask, scalar_from_r_(value));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_masked_fill__1af341297b28a33caffc2c17b883ba7b (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, Rcpp::XPtr<torch::Tensor> value
) {
  auto out = self->masked_fill_(*mask, *value);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_masked_fill_c4aae6cc2bd91e62fd5f083b1e8505a0 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, Rcpp::XPtr<torch::Tensor> value
) {
  auto out = self->masked_fill(*mask, *value);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_masked_scatter__8ecd133c55daf83edc61e4d6de3d48a0 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, Rcpp::XPtr<torch::Tensor> source
) {
  auto out = self->masked_scatter_(*mask, *source);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_masked_scatter_1769cd65a7836e60ad7642093f55a5d3 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, Rcpp::XPtr<torch::Tensor> source
) {
  auto out = self->masked_scatter(*mask, *source);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_view_6bf55218cd71b219c054293f38520051 (
Rcpp::XPtr<torch::Tensor> self, std::vector<std::int64_t> size
) {
  auto out = self->view(size);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_put__2b379e8493dddd64d5fcb57dfe46ab83 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source, bool accumulate
) {
  auto out = self->put_(*index, *source, accumulate);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_index_add__0be4630fe46f5a3434059ed7debb5603 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source
) {
  auto out = self->index_add_(dim, *index, *source);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_index_add_073fd53276f8ca2975951ef418c77979 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source
) {
  auto out = self->index_add(dim, *index, *source);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_index_fill__68bd4880045aa107467ff3395ce09125 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, SEXP value
) {
  auto out = self->index_fill_(dim, *index, scalar_from_r_(value));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_index_fill_6e7231b016b494e8f6fd347382bbf9dd (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, SEXP value
) {
  auto out = self->index_fill(dim, *index, scalar_from_r_(value));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_index_fill__928bbdb3d40ef89a9adaf7db52e85076 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> value
) {
  auto out = self->index_fill_(dim, *index, *value);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_index_fill_d4b972e4d9c5472fc93caa76b85586c3 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> value
) {
  auto out = self->index_fill(dim, *index, *value);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_scatter__a1889213e4ed60a091ae363b720154e4 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> src
) {
  auto out = self->scatter_(dim, *index, *src);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_scatter_e1a8464ba19859b83be2b154413d58e4 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> src
) {
  auto out = self->scatter(dim, *index, *src);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_scatter__68bd4880045aa107467ff3395ce09125 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, SEXP value
) {
  auto out = self->scatter_(dim, *index, scalar_from_r_(value));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_scatter_6e7231b016b494e8f6fd347382bbf9dd (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, SEXP value
) {
  auto out = self->scatter(dim, *index, scalar_from_r_(value));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_scatter_add__a1889213e4ed60a091ae363b720154e4 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> src
) {
  auto out = self->scatter_add_(dim, *index, *src);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_scatter_add_e1a8464ba19859b83be2b154413d58e4 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> src
) {
  auto out = self->scatter_add(dim, *index, *src);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_lt__7c9cc0828e809b4568149a32df76fd63 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->lt_(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_lt__5d476fcad960178d18feddbe371c5675 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->lt_(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_gt__7c9cc0828e809b4568149a32df76fd63 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->gt_(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_gt__5d476fcad960178d18feddbe371c5675 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->gt_(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_le__7c9cc0828e809b4568149a32df76fd63 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->le_(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_le__5d476fcad960178d18feddbe371c5675 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->le_(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_ge__7c9cc0828e809b4568149a32df76fd63 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->ge_(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_ge__5d476fcad960178d18feddbe371c5675 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->ge_(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_eq__7c9cc0828e809b4568149a32df76fd63 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->eq_(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_eq__5d476fcad960178d18feddbe371c5675 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->eq_(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_ne__7c9cc0828e809b4568149a32df76fd63 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->ne_(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_ne__5d476fcad960178d18feddbe371c5675 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->ne_(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___and___828c724a305e4a254aee6141456d6fb1 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->__and__(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___and___7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->__and__(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___iand___7c9cc0828e809b4568149a32df76fd63 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->__iand__(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___iand___5d476fcad960178d18feddbe371c5675 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->__iand__(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___or___828c724a305e4a254aee6141456d6fb1 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->__or__(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___or___7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->__or__(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___ior___7c9cc0828e809b4568149a32df76fd63 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->__ior__(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___ior___5d476fcad960178d18feddbe371c5675 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->__ior__(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___xor___828c724a305e4a254aee6141456d6fb1 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->__xor__(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___xor___7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->__xor__(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___ixor___7c9cc0828e809b4568149a32df76fd63 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->__ixor__(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___ixor___5d476fcad960178d18feddbe371c5675 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->__ixor__(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___lshift___828c724a305e4a254aee6141456d6fb1 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->__lshift__(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___lshift___7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->__lshift__(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___ilshift___7c9cc0828e809b4568149a32df76fd63 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->__ilshift__(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___ilshift___5d476fcad960178d18feddbe371c5675 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->__ilshift__(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___rshift___828c724a305e4a254aee6141456d6fb1 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->__rshift__(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___rshift___7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->__rshift__(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___irshift___7c9cc0828e809b4568149a32df76fd63 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->__irshift__(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch___irshift___5d476fcad960178d18feddbe371c5675 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->__irshift__(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_lgamma__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->lgamma_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_atan2__5d476fcad960178d18feddbe371c5675 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->atan2_(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_tril__5f49350cc06804354c82470a879c6411 (
Rcpp::XPtr<torch::Tensor> self, int64_t diagonal
) {
  auto out = self->tril_(diagonal);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_triu__5f49350cc06804354c82470a879c6411 (
Rcpp::XPtr<torch::Tensor> self, int64_t diagonal
) {
  auto out = self->triu_(diagonal);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_digamma__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->digamma_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_polygamma__5c9841a86a1bb2ecd6617444d7a089d2 (
Rcpp::XPtr<torch::Tensor> self, int64_t n
) {
  auto out = self->polygamma_(n);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_erfinv__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->erfinv_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_renorm__9fae5d6a810b9bad032cf57f062d624f (
Rcpp::XPtr<torch::Tensor> self, SEXP p, int64_t dim, SEXP maxnorm
) {
  auto out = self->renorm_(scalar_from_r_(p), dim, scalar_from_r_(maxnorm));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_pow__008abcd26c8445cd2a3cb5bcf2d286c7 (
Rcpp::XPtr<torch::Tensor> self, SEXP exponent
) {
  auto out = self->pow_(scalar_from_r_(exponent));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_pow__54cfc151844ae49e1de12914d9e69402 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> exponent
) {
  auto out = self->pow_(*exponent);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_lerp__24fc485413ad759980bbfddb3e995e6f (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> end, SEXP weight
) {
  auto out = self->lerp_(*end, scalar_from_r_(weight));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_lerp__f181da1a42d520a9a601e4f92273989b (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> end, Rcpp::XPtr<torch::Tensor> weight
) {
  auto out = self->lerp_(*end, *weight);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sign__77059e51c0f0414f12e11876ea1d8896 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->sign_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_fmod__7c9cc0828e809b4568149a32df76fd63 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->fmod_(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_fmod__5d476fcad960178d18feddbe371c5675 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->fmod_(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_remainder__7c9cc0828e809b4568149a32df76fd63 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->remainder_(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_remainder__5d476fcad960178d18feddbe371c5675 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->remainder_(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_addbmm__e39679a201c809cf04d4768abd5f9472 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, SEXP beta, SEXP alpha
) {
  auto out = self->addbmm_(*batch1, *batch2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_addbmm_f084ab37fd7cee9fb89f911187c51117 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, SEXP beta, SEXP alpha
) {
  auto out = self->addbmm(*batch1, *batch2, scalar_from_r_(beta), scalar_from_r_(alpha));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_addcmul__742865468d3d173af66a42cccde8e326 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, SEXP value
) {
  auto out = self->addcmul_(*tensor1, *tensor2, scalar_from_r_(value));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_addcdiv__742865468d3d173af66a42cccde8e326 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, SEXP value
) {
  auto out = self->addcdiv_(*tensor1, *tensor2, scalar_from_r_(value));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_random__417777d0710e439fb989bef3f7645771 (
Rcpp::XPtr<torch::Tensor> self, int64_t from, int64_t to
) {
  auto out = self->random_(from, to);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_random__47742b4a683bcc7b28c10bc2cd1d8536 (
Rcpp::XPtr<torch::Tensor> self, int64_t to
) {
  auto out = self->random_(to);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_random__4b76c0c01f02f75afc4f28e9c7848255 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->random_();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_uniform__2f75be8f7c2310093195fe413f0445f8 (
Rcpp::XPtr<torch::Tensor> self, double from, double to
) {
  auto out = self->uniform_(from, to);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_normal__56ea22ea9dddaf694df74da6a28fa826 (
Rcpp::XPtr<torch::Tensor> self, double mean, double std
) {
  auto out = self->normal_(mean, std);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_cauchy__b607d43d206e68155367f854664713bf (
Rcpp::XPtr<torch::Tensor> self, double median, double sigma
) {
  auto out = self->cauchy_(median, sigma);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_log_normal__56ea22ea9dddaf694df74da6a28fa826 (
Rcpp::XPtr<torch::Tensor> self, double mean, double std
) {
  auto out = self->log_normal_(mean, std);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_exponential__31e1c44de524960515a69c0dfbb817e2 (
Rcpp::XPtr<torch::Tensor> self, double lambd
) {
  auto out = self->exponential_(lambd);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_geometric__c0d7479cf591e60afc5ecc0adace5091 (
Rcpp::XPtr<torch::Tensor> self, double p
) {
  auto out = self->geometric_(p);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_diag_3f1827a9d61846f9cc7b955f989a7c45 (
Rcpp::XPtr<torch::Tensor> self, int64_t diagonal
) {
  auto out = self->diag(diagonal);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_cross_b8c427b31176d369b82935f8db13cb80 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, Rcpp::Nullable<int64_t> dim
) {
  auto out = self->cross(*other, resolve_null_argument(dim));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_triu_3f1827a9d61846f9cc7b955f989a7c45 (
Rcpp::XPtr<torch::Tensor> self, int64_t diagonal
) {
  auto out = self->triu(diagonal);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_tril_3f1827a9d61846f9cc7b955f989a7c45 (
Rcpp::XPtr<torch::Tensor> self, int64_t diagonal
) {
  auto out = self->tril(diagonal);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_trace_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->trace();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_ne_828c724a305e4a254aee6141456d6fb1 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->ne(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_ne_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->ne(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_eq_828c724a305e4a254aee6141456d6fb1 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->eq(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_eq_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->eq(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_ge_828c724a305e4a254aee6141456d6fb1 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->ge(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_ge_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->ge(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_le_828c724a305e4a254aee6141456d6fb1 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->le(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_le_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->le(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_gt_828c724a305e4a254aee6141456d6fb1 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->gt(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_gt_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->gt(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_lt_828c724a305e4a254aee6141456d6fb1 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->lt(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_lt_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->lt(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_take_318ca949fbc9a40bb8a8115c70d08f69 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> index
) {
  auto out = self->take(*index);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_index_select_bb12de05582fff1d692ada6cd217b5d6 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index
) {
  auto out = self->index_select(dim, *index);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_masked_select_ed5bb55732ad3303430891d7fa131c57 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask
) {
  auto out = self->masked_select(*mask);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_nonzero_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->nonzero();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::List torch_nonzero_numpy_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->nonzero_numpy();
  Rcpp::List v;

  for (int i = 0; i < out.size(); ++i) {
    v.push_back(make_tensor_ptr(out[i]));
  }

  return v;
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_gather_15abb7a6bd37d5a662e3afe129f5739f (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, bool sparse_grad
) {
  auto out = self->gather(dim, *index, sparse_grad);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_addcmul_60f230cf6615609d73b7013860ad4ace (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, SEXP value
) {
  auto out = self->addcmul(*tensor1, *tensor2, scalar_from_r_(value));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_addcdiv_60f230cf6615609d73b7013860ad4ace (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, SEXP value
) {
  auto out = self->addcdiv(*tensor1, *tensor2, scalar_from_r_(value));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::List torch_lstsq_681b45f775987a9d4337e64ebe35838b (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A
) {
  auto out = self->lstsq(*A);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(out)),make_tensor_ptr(std::get<1>(out)) );
};

// [[Rcpp::export]]
Rcpp::List torch_triangular_solve_95047a6e651f1e1397e30787e0de642e (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A, bool upper, bool transpose, bool unitriangular
) {
  auto out = self->triangular_solve(*A, upper, transpose, unitriangular);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(out)),make_tensor_ptr(std::get<1>(out)) );
};

// [[Rcpp::export]]
Rcpp::List torch_symeig_917559e15993671449d66ba1008f876c (
Rcpp::XPtr<torch::Tensor> self, bool eigenvectors, bool upper
) {
  auto out = self->symeig(eigenvectors, upper);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(out)),make_tensor_ptr(std::get<1>(out)) );
};

// [[Rcpp::export]]
Rcpp::List torch_eig_1d467c833632d77e9e55713ef8c8b122 (
Rcpp::XPtr<torch::Tensor> self, bool eigenvectors
) {
  auto out = self->eig(eigenvectors);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(out)),make_tensor_ptr(std::get<1>(out)) );
};

// [[Rcpp::export]]
Rcpp::List torch_svd_2f217fcd9735b4f379dafcca6bdbb29e (
Rcpp::XPtr<torch::Tensor> self, bool some, bool compute_uv
) {
  auto out = self->svd(some, compute_uv);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(out)),make_tensor_ptr(std::get<1>(out)),make_tensor_ptr(std::get<2>(out)) );
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_cholesky_5af1d4d3ba3c95c341f2b7646d03f369 (
Rcpp::XPtr<torch::Tensor> self, bool upper
) {
  auto out = self->cholesky(upper);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_cholesky_solve_025dfe9f0799032ef64ce3e4b4433d33 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input2, bool upper
) {
  auto out = self->cholesky_solve(*input2, upper);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::List torch_solve_681b45f775987a9d4337e64ebe35838b (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A
) {
  auto out = self->solve(*A);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(out)),make_tensor_ptr(std::get<1>(out)) );
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_cholesky_inverse_5af1d4d3ba3c95c341f2b7646d03f369 (
Rcpp::XPtr<torch::Tensor> self, bool upper
) {
  auto out = self->cholesky_inverse(upper);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::List torch_qr_c656560b1e291e8f59e4c2f770446c1b (
Rcpp::XPtr<torch::Tensor> self, bool some
) {
  auto out = self->qr(some);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(out)),make_tensor_ptr(std::get<1>(out)) );
};

// [[Rcpp::export]]
Rcpp::List torch_geqrf_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->geqrf();
return Rcpp::List::create(make_tensor_ptr(std::get<0>(out)),make_tensor_ptr(std::get<1>(out)) );
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_orgqr_ba4070bcaff2334005f02fd1ac15e6f7 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input2
) {
  auto out = self->orgqr(*input2);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_ormqr_64c989218d6cdfc844b6d04abb9daab6 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input2, Rcpp::XPtr<torch::Tensor> input3, bool left, bool transpose
) {
  auto out = self->ormqr(*input2, *input3, left, transpose);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_lu_solve_1b393e546fa15a4c4a3ff1ea45878c92 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> LU_data, Rcpp::XPtr<torch::Tensor> LU_pivots
) {
  auto out = self->lu_solve(*LU_data, *LU_pivots);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_multinomial_58a43e013b869e223f72c31d9ed9864e (
Rcpp::XPtr<torch::Tensor> self, int64_t num_samples, bool replacement
) {
  auto out = self->multinomial(num_samples, replacement);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_lgamma_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->lgamma();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_digamma_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->digamma();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_erfinv_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->erfinv();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_dist_d0359fe95f05d18211bbcc94128382d4 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, SEXP p
) {
  auto out = self->dist(*other, scalar_from_r_(p));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_atan2_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->atan2(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_lerp_52119028f62f451b2f5688ea3610e128 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> end, SEXP weight
) {
  auto out = self->lerp(*end, scalar_from_r_(weight));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_lerp_07603fb9e50ba263b5b23e7bb81db638 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> end, Rcpp::XPtr<torch::Tensor> weight
) {
  auto out = self->lerp(*end, *weight);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_histc_bff667a73f52909f033d8c9de0081a1d (
Rcpp::XPtr<torch::Tensor> self, int64_t bins, SEXP min, SEXP max
) {
  auto out = self->histc(bins, scalar_from_r_(min), scalar_from_r_(max));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_sign_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->sign();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_fmod_828c724a305e4a254aee6141456d6fb1 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->fmod(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_fmod_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->fmod(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_remainder_828c724a305e4a254aee6141456d6fb1 (
Rcpp::XPtr<torch::Tensor> self, SEXP other
) {
  auto out = self->remainder(scalar_from_r_(other));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_remainder_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->remainder(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_min_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->min(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_min_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->min();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_max_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->max(*other);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_max_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->max();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_median_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->median();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::List torch_sort_52a2acee48fe0d5321c4ec19c38c32d6 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool descending
) {
  auto out = self->sort(dim, descending);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(out)),make_tensor_ptr(std::get<1>(out)) );
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_argsort_52a2acee48fe0d5321c4ec19c38c32d6 (
Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool descending
) {
  auto out = self->argsort(dim, descending);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::List torch_topk_92a7e3ac7fad4d88b3448c70a70c3f8a (
Rcpp::XPtr<torch::Tensor> self, int64_t k, int64_t dim, bool largest, bool sorted
) {
  auto out = self->topk(k, dim, largest, sorted);
return Rcpp::List::create(make_tensor_ptr(std::get<0>(out)),make_tensor_ptr(std::get<1>(out)) );
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_all_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->all();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_any_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->any();
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_renorm_56a4ac7915d3aee407c8286c79a259ff (
Rcpp::XPtr<torch::Tensor> self, SEXP p, int64_t dim, SEXP maxnorm
) {
  auto out = self->renorm(scalar_from_r_(p), dim, scalar_from_r_(maxnorm));
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_unfold_020977f59530963a27cd1039400e50c9 (
Rcpp::XPtr<torch::Tensor> self, int64_t dimension, int64_t size, int64_t step
) {
  auto out = self->unfold(dimension, size, step);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
bool torch_equal_7f12b0bdc5e3c8186277ce82f15149b2 (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other
) {
  auto out = self->equal(*other);
return out;
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_pow_b69e041157596e34bdef3154d84f2d1e (
Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> exponent
) {
  auto out = self->pow(*exponent);
return make_tensor_ptr(out);
};

// [[Rcpp::export]]
Rcpp::XPtr<torch::Tensor> torch_alias_68396f1df3a98eb80570d6202c3c8b18 (
Rcpp::XPtr<torch::Tensor> self
) {
  auto out = self->alias();
return make_tensor_ptr(out);
};
