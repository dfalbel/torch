#!/bin/bash
# Shell config script
echo "----------------------------------------------------------------"
if test -z $TORCH_BINARIES
then
  # figure out binaries url based on OS
  if [[ "$OSTYPE" == "linux-gnu" ]]
  then
    if [[ "$TORCH_BACKEND" == "CUDA" ]]
    then
      # GPU
      TORCH_BINARIES='https://download.pytorch.org/libtorch/cu90/libtorch-shared-with-deps-latest.zip'
    else
      # CPU
      TORCH_BINARIES='https://download.pytorch.org/libtorch/cpu/libtorch-shared-with-deps-latest.zip'
    fi
  elif [[ "$OSTYPE" == "darwin"* ]]
  then
    # for OS X only CPU backend
    TORCH_BINARIES='https://download.pytorch.org/libtorch/cpu/libtorch-macos-latest.zip'
    TORCH_MKL_BINARIES='https://github.com/intel/mkl-dnn/releases/download/v0.17.2/mklml_mac_2019.0.1.20180928.tgz'
  else
    echo "OS is not supported"
    exit 1
  fi # TORCH_BACKEND
else
  echo "usin user-supplied URL for TORCH_BINARIES"
fi # TORCH_BINARIES

#---------------------------------------------------------
if test -z $TORCH_HOME
then
  TORCH_HOME="$HOME/libtorch"
  echo "TORCH_HOME env var is not set - setting it to: $TORCH_HOME"
else
  echo "TORCH_HOME env var is set - using it: $TORCH_HOME"
fi

#---------------------------------------------------------
if [ -d "$TORCH_HOME" ]
then
  echo "TORCH_HOME directory exists - assuming library already installed"
else
  echo "$TORCH_HOME does not exist - downloading libtorch"
  mkdir -p $TORCH_HOME
  wget -nv $TORCH_BINARIES -P ~ -O $TORCH_HOME/libtorch.zip
  echo "unzipping libtorch to $TORCH_HOME"
  unzip $TORCH_HOME/libtorch.zip -d `dirname $TORCH_HOME`
  
  if [[ "$OSTYPE" == "darwin"* ]]
  then
    echo "downloading mkl lib"
    wget -nv $TORCH_MKL_BINARIES -P ~ -O $TORCH_HOME/mkl.tgz
    echo "unzipping mkl library"
    gunzip -c $TORCH_HOME/mkl.tgz | tar xopf - --directory $TORCH_HOME/lib --strip-components=2 *.dylib
  fi

fi
TORCH_HOME="$TORCH_HOME"
#---------------------------------------------------------

PKG_CFLAGS="-I$TORCH_HOME/include -I$TORCH_HOME/include/torch/csrc/api/include"
PKG_LIBS="-L$TORCH_HOME/lib -Wl,-rpath,$TORCH_HOME/lib -ltorch"

if [[ "$TORCH_BACKEND" == "CUDA" ]]
then
  echo "Found TORCH_BACKEND='CUDA' - using 'CUDA' backend"
  if test -z "$CUDA_HOME"
  then
    CUDA_HOME="/usr/local/cuda"
    echo "CUDA_HOME env var is not set - setting it to: $CUDA_HOME"
  else
    echo "CUDA_HOME env var is set - using it: $CUDA_HOME"
  fi # CUDA_HOME
  PKG_LIBS="$PKG_LIBS -L/$CUDA_HOME/lib64 -lnvrtc -lcuda"
else
  echo "TORCH_BACKEND!='CUDA' - using 'CPU' backend"
fi # TORCH_BACKEND
echo "----------------------------------------------------------------"
echo "Using PKG_LIBS=$PKG_LIBS"
echo "Using PKG_CFLAGS=$PKG_CFLAGS"
echo "----------------------------------------------------------------"

# Write to Makevars
sed -e "s|@pkg_cflags@|$PKG_CFLAGS|" -e "s|@libs@|$PKG_LIBS|" src/Makevars.in > src/Makevars

exit 0
